{"version":3,"file":"react-native-logs.fx.js","sourceRoot":"","sources":["../../src/environment/react-native-logs.fx.ts"],"names":[],"mappings":"AAAA,gGAAgG;AAChG,yDAAyD;AACzD,OAAO,EAAE,WAAW,EAAE,MAAM,cAAc,CAAC;AAE3C,WAAW,CAAC,CAAC,mDAAmD;AAEhE,oGAAoG;AACpG,sFAAsF;AACtF,qFAAqF;AACrF,oDAAoD;AACpD,MAAM,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC;AAClC,OAAO,CAAC,IAAI,GAAG,SAAS,IAAI,CAAC,GAAG,IAAI;IAClC,IACE,IAAI,CAAC,MAAM,GAAG,CAAC;QACf,OAAO,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ;QAC3B,CAAC,gCAAgC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7C,wEAAwE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACtF,+DAA+D,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAChF;QACA,OAAO;KACR;IACD,YAAY,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AACpC,CAAC,CAAC;AAEF,MAAM,aAAa,GAAG,OAAO,CAAC,KAAK,CAAC;AACpC,OAAO,CAAC,KAAK,GAAG,SAAS,KAAK,CAAC,GAAG,IAAI;IACpC,IACE,IAAI,CAAC,MAAM,GAAG,CAAC;QACf,OAAO,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ;QAC3B,iCAAiC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAC/C;QACA,OAAO;KACR;IACD,aAAa,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AACrC,CAAC,CAAC","sourcesContent":["// AppRegistry transitively installs YellowBox as a side effect, which overrides various console\n// methods that we need to set up before we override them\nimport { AppRegistry } from 'react-native';\n\nAppRegistry; // eslint-disable-line @babel/no-unused-expressions\n\n// NOTE(2018-10-29): temporarily filter out cyclic dependency warnings here since they are noisy and\n// each warning symbolicates a stack trace, which is slow when there are many warnings\n// NOTE(2019-05-27): temporarily filter out LottieAnimationView warnings triggered by\n// unmaintained react-native-safe-module dependency.\nconst originalWarn = console.warn;\nconsole.warn = function warn(...args) {\n  if (\n    args.length > 0 &&\n    typeof args[0] === 'string' &&\n    (/^Require cycle: .*node_modules/.test(args[0]) ||\n      /Use UIManager\\.getViewManagerConfig\\('LottieAnimationView'\\) instead\\./.test(args[0]) ||\n      /ReactNative\\.NativeModules\\.LottieAnimationView\\.getConstants/.test(args[0]))\n  ) {\n    return;\n  }\n  originalWarn.apply(console, args);\n};\n\nconst originalError = console.error;\nconsole.error = function error(...args) {\n  if (\n    args.length > 0 &&\n    typeof args[0] === 'string' &&\n    /^Warning: .* has been extracted/.test(args[0])\n  ) {\n    return;\n  }\n  originalError.apply(console, args);\n};\n"]}