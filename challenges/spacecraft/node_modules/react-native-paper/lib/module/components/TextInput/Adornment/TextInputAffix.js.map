{"version":3,"sources":["TextInputAffix.tsx"],"names":["React","color","Text","StyleSheet","Animated","withTheme","AdornmentSide","AFFIX_OFFSET","AffixContext","createContext","textStyle","fontFamily","topPosition","side","Left","AffixAdornment","affix","onLayout","visible","paddingHorizontal","maxFontSizeMultiplier","TextInputAffix","text","labelStyle","theme","useContext","textColor","colors","alpha","dark","rgb","string","offset","style","top","styles","container","opacity","interpolate","inputRange","outputRange","displayName","create","position","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import React from 'react';\nimport color from 'color';\nimport {\n  Text,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n  Animated,\n  ViewStyle,\n} from 'react-native';\n\nimport { withTheme } from '../../../core/theming';\nimport { AdornmentSide } from './enums';\n\nconst AFFIX_OFFSET = 12;\n\nexport type Props = {\n  /**\n   * Text to show.\n   */\n  text: string;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  /**\n   * Style that is passed to the Text element.\n   */\n  textStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype ContextState = {\n  topPosition: number | null;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  visible?: Animated.Value;\n  textStyle?: StyleProp<TextStyle>;\n  side: AdornmentSide;\n  paddingHorizontal?: number | string;\n  maxFontSizeMultiplier?: number | undefined | null;\n};\n\nconst AffixContext = React.createContext<ContextState>({\n  textStyle: { fontFamily: '', color: '' },\n  topPosition: null,\n  side: AdornmentSide.Left,\n});\n\nconst AffixAdornment: React.FunctionComponent<\n  {\n    affix: React.ReactNode;\n    testID: string;\n  } & ContextState\n> = ({\n  affix,\n  side,\n  textStyle,\n  topPosition,\n  onLayout,\n  visible,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n}) => {\n  return (\n    <AffixContext.Provider\n      value={{\n        side,\n        textStyle,\n        topPosition,\n        onLayout,\n        visible,\n        paddingHorizontal,\n        maxFontSizeMultiplier,\n      }}\n    >\n      {affix}\n    </AffixContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing text in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outline.affix.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       mode=\"outlined\"\n *       label=\"Outlined input\"\n *       placeholder=\"Type something\"\n *       right={<TextInput.Affix text=\"/100\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputAffix = ({ text, textStyle: labelStyle, theme }: Props) => {\n  const {\n    textStyle,\n    onLayout,\n    topPosition,\n    side,\n    visible,\n    paddingHorizontal,\n    maxFontSizeMultiplier,\n  } = React.useContext(AffixContext);\n  const textColor = color(theme.colors.text)\n    .alpha(theme.dark ? 0.7 : 0.54)\n    .rgb()\n    .string();\n\n  const offset =\n    typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n\n  const style = {\n    top: topPosition,\n    [side]: offset,\n  } as ViewStyle;\n\n  return (\n    <Animated.View\n      style={[\n        styles.container,\n        style,\n        {\n          opacity:\n            visible?.interpolate({\n              inputRange: [0, 1],\n              outputRange: [1, 0],\n            }) || 1,\n        },\n      ]}\n      onLayout={onLayout}\n    >\n      <Text\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n        style={[{ color: textColor }, textStyle, labelStyle]}\n      >\n        {text}\n      </Text>\n    </Animated.View>\n  );\n};\nTextInputAffix.displayName = 'TextInput.Affix';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(TextInputAffix);\n\n// @component-docs ignore-next-line\nexport { TextInputAffix, AffixAdornment };\n"]}