{"version":3,"sources":["TextInputAdornment.tsx"],"names":["React","TextInputIcon","IconAdornment","TextInputAffix","AffixAdornment","ADORNMENT_OFFSET","OUTLINED_INPUT_OFFSET","AdornmentSide","AdornmentType","InputMode","getAdornmentConfig","left","right","adornmentConfig","side","Left","adornment","Right","forEach","isValidElement","type","Affix","Icon","push","getAdornmentStyleAdjustmentForNativeInput","leftAffixWidth","rightAffixWidth","paddingHorizontal","inputOffset","mode","length","adornmentStyleAdjustmentForNativeInput","map","isLeftSide","inputModeAdornemntOffset","Outlined","paddingKey","captalize","affixWidth","padding","offset","isAffix","marginKey","allStyleAdjustmentsMerged","reduce","mergedStyles","currentStyle","text","charAt","toUpperCase","slice","TextInputAdornment","onAffixChange","textStyle","visible","topPosition","isTextInputFocused","forceFocus","maxFontSizeMultiplier","inputAdornmentComponent","commonProps","key","testID"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TextInputIcon, { IconAdornment } from './TextInputIcon';\nimport TextInputAffix, { AffixAdornment } from './TextInputAffix';\nimport { ADORNMENT_OFFSET, OUTLINED_INPUT_OFFSET } from '../constants';\nimport type {\n  LayoutChangeEvent,\n  TextStyle,\n  StyleProp,\n  Animated,\n} from 'react-native';\nimport type {\n  AdornmentConfig,\n  AdornmentStyleAdjustmentForNativeInput,\n} from './types';\nimport { AdornmentSide, AdornmentType, InputMode } from './enums';\n\nexport function getAdornmentConfig({\n  left,\n  right,\n}: {\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n}): Array<AdornmentConfig> {\n  let adornmentConfig: any[] = [];\n  if (left || right) {\n    [\n      { side: AdornmentSide.Left, adornment: left },\n      { side: AdornmentSide.Right, adornment: right },\n    ].forEach(({ side, adornment }) => {\n      if (adornment && React.isValidElement(adornment)) {\n        let type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side,\n          type,\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nexport function getAdornmentStyleAdjustmentForNativeInput({\n  adornmentConfig,\n  leftAffixWidth,\n  rightAffixWidth,\n  paddingHorizontal,\n  inputOffset = 0,\n  mode,\n}: {\n  inputOffset?: number;\n  adornmentConfig: AdornmentConfig[];\n  leftAffixWidth: number;\n  rightAffixWidth: number;\n  mode?: 'outlined' | 'flat';\n  paddingHorizontal?: number | string;\n}): AdornmentStyleAdjustmentForNativeInput | {} {\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(\n      ({ type, side }: AdornmentConfig) => {\n        const isLeftSide = side === AdornmentSide.Left;\n        const inputModeAdornemntOffset =\n          mode === InputMode.Outlined\n            ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET\n            : ADORNMENT_OFFSET;\n        const paddingKey = `padding${captalize(side)}`;\n        const affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n        const padding =\n          typeof paddingHorizontal === 'number'\n            ? paddingHorizontal\n            : inputModeAdornemntOffset;\n        const offset = affixWidth + padding;\n\n        const isAffix = type === AdornmentType.Affix;\n        const marginKey = `margin${captalize(side)}`;\n\n        return {\n          [marginKey]: isAffix ? 0 : offset,\n          [paddingKey]: isAffix ? offset : inputOffset,\n        };\n      }\n    );\n    const allStyleAdjustmentsMerged =\n      adornmentStyleAdjustmentForNativeInput.reduce(\n        (mergedStyles, currentStyle) => {\n          return {\n            ...mergedStyles,\n            ...currentStyle,\n          };\n        },\n        {}\n      );\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = (text: string) =>\n  text.charAt(0).toUpperCase() + text.slice(1);\n\nexport interface TextInputAdornmentProps {\n  forceFocus: () => void;\n  adornmentConfig: AdornmentConfig[];\n  topPosition: {\n    [AdornmentType.Affix]: {\n      [AdornmentSide.Left]: number | null;\n      [AdornmentSide.Right]: number | null;\n    };\n    [AdornmentType.Icon]: number;\n  };\n  onAffixChange: {\n    [AdornmentSide.Left]: (event: LayoutChangeEvent) => void;\n    [AdornmentSide.Right]: (event: LayoutChangeEvent) => void;\n  };\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  textStyle?: StyleProp<TextStyle>;\n  visible?: Animated.Value;\n  isTextInputFocused: boolean;\n  paddingHorizontal?: number | string;\n  maxFontSizeMultiplier?: number | undefined | null;\n}\n\nconst TextInputAdornment: React.FunctionComponent<TextInputAdornmentProps> = ({\n  adornmentConfig,\n  left,\n  right,\n  onAffixChange,\n  textStyle,\n  visible,\n  topPosition,\n  isTextInputFocused,\n  forceFocus,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n}) => {\n  if (adornmentConfig.length) {\n    return (\n      <>\n        {adornmentConfig.map(({ type, side }: AdornmentConfig) => {\n          let inputAdornmentComponent;\n          if (side === AdornmentSide.Left) {\n            inputAdornmentComponent = left;\n          } else if (side === AdornmentSide.Right) {\n            inputAdornmentComponent = right;\n          }\n\n          const commonProps = {\n            key: side,\n            side: side,\n            testID: `${side}-${type}-adornment`,\n            isTextInputFocused,\n            paddingHorizontal,\n          };\n          if (type === AdornmentType.Icon) {\n            return (\n              <IconAdornment\n                {...commonProps}\n                icon={inputAdornmentComponent}\n                topPosition={topPosition[AdornmentType.Icon]}\n                forceFocus={forceFocus}\n              />\n            );\n          } else if (type === AdornmentType.Affix) {\n            return (\n              <AffixAdornment\n                {...commonProps}\n                topPosition={topPosition[AdornmentType.Affix][side]}\n                affix={inputAdornmentComponent}\n                textStyle={textStyle}\n                onLayout={onAffixChange[side]}\n                visible={visible}\n                maxFontSizeMultiplier={maxFontSizeMultiplier}\n              />\n            );\n          } else {\n            return null;\n          }\n        })}\n      </>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;\n"]}