{"version":3,"sources":["TextInput.tsx"],"names":["React","Animated","TextInput","NativeTextInput","TextInputOutlined","TextInputFlat","TextInputIcon","TextInputAffix","withTheme","BLUR_ANIMATION_DURATION","FOCUS_ANIMATION_DURATION","forwardRef","ref","mode","dense","disabled","error","errorProp","multiline","editable","render","props","rest","validInputValue","value","undefined","defaultValue","current","labeled","useRef","Value","focused","setFocused","useState","placeholder","setPlaceholder","setValue","labelLayout","setLabelLayout","measured","width","height","leftLayout","setLeftLayout","rightLayout","setRightLayout","timer","root","scale","theme","animation","useImperativeHandle","focus","clear","setNativeProps","args","isFocused","blur","forceFocus","useLayoutEffect","useEffect","timing","toValue","duration","useNativeDriver","start","label","setTimeout","clearTimeout","onLeftAffixLayoutChange","event","nativeEvent","layout","onRightAffixLayoutChange","handleFocus","onFocus","handleBlur","onBlur","handleChangeText","onChangeText","handleLayoutAnimatedText","e","maxFontSizeMultiplier","Icon","Affix"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  TextInput as NativeTextInput,\n  LayoutChangeEvent,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport TextInputOutlined from './TextInputOutlined';\nimport TextInputFlat from './TextInputFlat';\nimport TextInputIcon, {\n  Props as TextInputIconProps,\n} from './Adornment/TextInputIcon';\nimport TextInputAffix, {\n  Props as TextInputAffixProps,\n} from './Adornment/TextInputAffix';\nimport { withTheme } from '../../core/theming';\nimport type { RenderProps, TextInputLabelProp } from './types';\n\nconst BLUR_ANIMATION_DURATION = 180;\nconst FOCUS_ANIMATION_DURATION = 150;\n\nexport type TextInputProps = React.ComponentPropsWithRef<\n  typeof NativeTextInput\n> & {\n  /**\n   * Mode of the TextInput.\n   * - `flat` - flat input with an underline.\n   * - `outlined` - input with an outline.\n   *\n   * In `outlined` mode, the background color of the label is derived from `colors.background` in theme or the `backgroundColor` style.\n   * This component render TextInputOutlined or TextInputFlat based on that props\n   */\n  mode?: 'flat' | 'outlined';\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  /**\n   * If true, user won't be able to interact with the component.\n   */\n  disabled?: boolean;\n  /**\n   * The text or component to use for the floating label.\n   */\n  label?: TextInputLabelProp;\n  /**\n   * Placeholder for the input.\n   */\n  placeholder?: string;\n  /**\n   * Whether to style the TextInput with error style.\n   */\n  error?: boolean;\n  /**\n   * Callback that is called when the text input's text changes. Changed text is passed as an argument to the callback handler.\n   */\n  onChangeText?: Function;\n  /**\n   * Selection color of the input\n   */\n  selectionColor?: string;\n  /**\n   * Inactive underline color of the input.\n   */\n  underlineColor?: string;\n  /**\n   * Active underline color of the input.\n   */\n  activeUnderlineColor?: string;\n  /**\n   * Inactive outline color of the input.\n   */\n  outlineColor?: string;\n  /**\n   * Active outline color of the input.\n   */\n  activeOutlineColor?: string;\n  /**\n   * Sets min height with densed layout. For `TextInput` in `flat` mode\n   * height is `64dp` or in dense layout - `52dp` with label or `40dp` without label.\n   * For `TextInput` in `outlined` mode\n   * height is `56dp` or in dense layout - `40dp` regardless of label.\n   * When you apply `height` prop in style the `dense` prop affects only `paddingVertical` inside `TextInput`\n   */\n  dense?: boolean;\n  /**\n   * Whether the input can have multiple lines.\n   */\n  multiline?: boolean;\n  /**\n   * The number of lines to show in the input (Android only).\n   */\n  numberOfLines?: number;\n  /**\n   * Callback that is called when the text input is focused.\n   */\n  onFocus?: (args: any) => void;\n  /**\n   * Callback that is called when the text input is blurred.\n   */\n  onBlur?: (args: any) => void;\n  /**\n   *\n   * Callback to render a custom input component such as `react-native-text-input-mask`\n   * instead of the default `TextInput` component from `react-native`.\n   *\n   * Example:\n   * ```js\n   * <TextInput\n   *   label=\"Phone number\"\n   *   render={props =>\n   *     <TextInputMask\n   *       {...props}\n   *       mask=\"+[00] [000] [000] [000]\"\n   *     />\n   *   }\n   * />\n   * ```\n   */\n  render?: (props: RenderProps) => React.ReactNode;\n  /**\n   * Value of the text input.\n   */\n  value?: string;\n  /**\n   * Pass `fontSize` prop to modify the font size inside `TextInput`.\n   * Pass `height` prop to set `TextInput` height. When `height` is passed,\n   * `dense` prop will affect only input's `paddingVertical`.\n   * Pass `paddingHorizontal` to modify horizontal padding.\n   * This can be used to get MD Guidelines v1 TextInput look.\n   */\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ninterface CompoundedComponent\n  extends React.ForwardRefExoticComponent<\n    TextInputProps & React.RefAttributes<TextInputHandles>\n  > {\n  Icon: React.FunctionComponent<TextInputIconProps>;\n  Affix: React.FunctionComponent<Partial<TextInputAffixProps>>;\n}\n\ntype TextInputHandles = Pick<\n  NativeTextInput,\n  'focus' | 'clear' | 'blur' | 'isFocused' | 'setNativeProps'\n>;\n\n/**\n * A component to allow users to input text.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.focused.png\" />\n *     <figcaption>Flat (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.disabled.png\" />\n *     <figcaption>Flat (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.focused.png\" />\n *     <figcaption>Outlined (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.disabled.png\" />\n *     <figcaption>Outlined (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState(\"\");\n *\n *   return (\n *     <TextInput\n *       label=\"Email\"\n *       value={text}\n *       onChangeText={text => setText(text)}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n *\n * @extends TextInput props https://reactnative.dev/docs/textinput#props\n */\n\nconst TextInput = React.forwardRef<TextInputHandles, TextInputProps>(\n  (\n    {\n      mode = 'flat',\n      dense = false,\n      disabled = false,\n      error: errorProp = false,\n      multiline = false,\n      editable = true,\n      render = (props: RenderProps) => <NativeTextInput {...props} />,\n      ...rest\n    }: TextInputProps,\n    ref\n  ) => {\n    const validInputValue =\n      rest.value !== undefined ? rest.value : rest.defaultValue;\n\n    const { current: labeled } = React.useRef<Animated.Value>(\n      new Animated.Value(validInputValue ? 0 : 1)\n    );\n    const { current: error } = React.useRef<Animated.Value>(\n      new Animated.Value(errorProp ? 1 : 0)\n    );\n    const [focused, setFocused] = React.useState<boolean>(false);\n    const [placeholder, setPlaceholder] = React.useState<string | undefined>(\n      ''\n    );\n    const [value, setValue] = React.useState<string | undefined>(\n      validInputValue\n    );\n    const [labelLayout, setLabelLayout] = React.useState<{\n      measured: boolean;\n      width: number;\n      height: number;\n    }>({\n      measured: false,\n      width: 0,\n      height: 0,\n    });\n    const [leftLayout, setLeftLayout] = React.useState<{\n      height: number | null;\n      width: number | null;\n    }>({\n      width: null,\n      height: null,\n    });\n    const [rightLayout, setRightLayout] = React.useState<{\n      height: number | null;\n      width: number | null;\n    }>({\n      width: null,\n      height: null,\n    });\n\n    const timer = React.useRef<NodeJS.Timeout | undefined>();\n\n    const root = React.useRef<NativeTextInput | undefined | null>();\n\n    const { scale } = rest.theme.animation;\n\n    React.useImperativeHandle(ref, () => ({\n      focus: () => root.current?.focus(),\n      clear: () => root.current?.clear(),\n      setNativeProps: (args: Object) => root.current?.setNativeProps(args),\n      isFocused: () => root.current?.isFocused() || false,\n      blur: () => root.current?.blur(),\n      forceFocus: () => root.current?.focus(),\n    }));\n\n    React.useLayoutEffect(() => {\n      if (typeof rest.value !== 'undefined') setValue(rest.value);\n    }, [rest.value]);\n\n    React.useEffect(() => {\n      // When the input has an error, we wiggle the label and apply error styles\n      if (errorProp) {\n        // show error\n        Animated.timing(error, {\n          toValue: 1,\n          duration: FOCUS_ANIMATION_DURATION * scale,\n          // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n          useNativeDriver: true,\n        }).start();\n      } else {\n        // hide error\n        {\n          Animated.timing(error, {\n            toValue: 0,\n            duration: BLUR_ANIMATION_DURATION * scale,\n            // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n            useNativeDriver: true,\n          }).start();\n        }\n      }\n    }, [errorProp, scale, error]);\n\n    React.useEffect(() => {\n      // Show placeholder text only if the input is focused, or there's no label\n      // We don't show placeholder if there's a label because the label acts as placeholder\n      // When focused, the label moves up, so we can show a placeholder\n      if (focused || !rest.label) {\n        // Set the placeholder in a delay to offset the label animation\n        // If we show it immediately, they'll overlap and look ugly\n        timer.current = setTimeout(\n          () => setPlaceholder(rest.placeholder),\n          50\n        ) as unknown as NodeJS.Timeout;\n      } else {\n        // hidePlaceholder\n        setPlaceholder('');\n      }\n\n      return () => {\n        if (timer.current) {\n          clearTimeout(timer.current);\n        }\n      };\n    }, [focused, rest.label, rest.placeholder]);\n\n    React.useEffect(() => {\n      // The label should be minimized if the text input is focused, or has text\n      // In minimized mode, the label moves up and becomes small\n      // workaround for animated regression for react native > 0.61\n      // https://github.com/callstack/react-native-paper/pull/1440\n      if (value || focused) {\n        // minimize label\n        Animated.timing(labeled, {\n          toValue: 0,\n          duration: BLUR_ANIMATION_DURATION * scale,\n          // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n          useNativeDriver: true,\n        }).start();\n      } else {\n        // restore label\n        {\n          Animated.timing(labeled, {\n            toValue: 1,\n            duration: FOCUS_ANIMATION_DURATION * scale,\n            // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n            useNativeDriver: true,\n          }).start();\n        }\n      }\n    }, [focused, value, labeled, scale]);\n\n    const onLeftAffixLayoutChange = (event: LayoutChangeEvent) => {\n      setLeftLayout({\n        height: event.nativeEvent.layout.height,\n        width: event.nativeEvent.layout.width,\n      });\n    };\n\n    const onRightAffixLayoutChange = (event: LayoutChangeEvent) => {\n      setRightLayout({\n        width: event.nativeEvent.layout.width,\n        height: event.nativeEvent.layout.height,\n      });\n    };\n\n    const handleFocus = (args: any) => {\n      if (disabled || !editable) {\n        return;\n      }\n\n      setFocused(true);\n\n      rest.onFocus?.(args);\n    };\n\n    const handleBlur = (args: Object) => {\n      if (!editable) {\n        return;\n      }\n\n      setFocused(false);\n      rest.onBlur?.(args);\n    };\n\n    const handleChangeText = (value: string) => {\n      if (!editable || disabled) {\n        return;\n      }\n\n      setValue(value);\n      rest.onChangeText?.(value);\n    };\n\n    const handleLayoutAnimatedText = (e: LayoutChangeEvent) => {\n      setLabelLayout({\n        width: e.nativeEvent.layout.width,\n        height: e.nativeEvent.layout.height,\n        measured: true,\n      });\n    };\n    const forceFocus = () => root.current?.focus();\n\n    const { maxFontSizeMultiplier = 1.5 } = rest;\n\n    if (mode === 'outlined') {\n      return (\n        <TextInputOutlined\n          dense={dense}\n          disabled={disabled}\n          error={errorProp}\n          multiline={multiline}\n          editable={editable}\n          render={render}\n          {...rest}\n          value={value}\n          parentState={{\n            labeled,\n            error,\n            focused,\n            placeholder,\n            value,\n            labelLayout,\n            leftLayout,\n            rightLayout,\n          }}\n          innerRef={(ref) => {\n            root.current = ref;\n          }}\n          onFocus={handleFocus}\n          forceFocus={forceFocus}\n          onBlur={handleBlur}\n          onChangeText={handleChangeText}\n          onLayoutAnimatedText={handleLayoutAnimatedText}\n          onLeftAffixLayoutChange={onLeftAffixLayoutChange}\n          onRightAffixLayoutChange={onRightAffixLayoutChange}\n          maxFontSizeMultiplier={maxFontSizeMultiplier}\n        />\n      );\n    }\n\n    return (\n      <TextInputFlat\n        dense={dense}\n        disabled={disabled}\n        error={errorProp}\n        multiline={multiline}\n        editable={editable}\n        render={render}\n        {...rest}\n        value={value}\n        parentState={{\n          labeled,\n          error,\n          focused,\n          placeholder,\n          value,\n          labelLayout,\n          leftLayout,\n          rightLayout,\n        }}\n        innerRef={(ref) => {\n          root.current = ref;\n        }}\n        onFocus={handleFocus}\n        forceFocus={forceFocus}\n        onBlur={handleBlur}\n        onChangeText={handleChangeText}\n        onLayoutAnimatedText={handleLayoutAnimatedText}\n        onLeftAffixLayoutChange={onLeftAffixLayoutChange}\n        onRightAffixLayoutChange={onRightAffixLayoutChange}\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n      />\n    );\n  }\n) as CompoundedComponent;\n// @component ./Adornment/TextInputIcon.tsx\nTextInput.Icon = TextInputIcon;\n\n// @component ./Adornment/TextInputAffix.tsx\n// @ts-ignore Types of property 'theme' are incompatible.\nTextInput.Affix = TextInputAffix;\n\nexport default withTheme(TextInput);\n"]}