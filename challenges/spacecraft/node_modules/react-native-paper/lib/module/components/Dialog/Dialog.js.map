{"version":3,"sources":["Dialog.tsx"],"names":["React","StyleSheet","Platform","Modal","DialogContent","DialogActions","DialogTitle","DialogScrollArea","withTheme","overlay","DIALOG_ELEVATION","Dialog","children","dismissable","onDismiss","visible","style","theme","borderRadius","roundness","backgroundColor","dark","mode","colors","surface","styles","container","Children","toArray","filter","child","map","i","isValidElement","type","cloneElement","paddingTop","props","Content","Actions","Title","ScrollArea","create","marginVertical","OS","marginHorizontal","elevation","justifyContent"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,QAArB,QAA2D,cAA3D;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B,C,CACA;;AACA,OAAOC,WAAP,MAAyD,eAAzD;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,OAAOC,OAAP,MAAoB,sBAApB;AA0BA,MAAMC,gBAAwB,GAAG,EAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,MAAM,GAAG;AAAA,MAAC;AACdC,IAAAA,QADc;AAEdC,IAAAA,WAAW,GAAG,IAFA;AAGdC,IAAAA,SAHc;AAIdC,IAAAA,OAAO,GAAG,KAJI;AAKdC,IAAAA,KALc;AAMdC,IAAAA;AANc,GAAD;AAAA,sBAQb,oBAAC,KAAD;AACE,IAAA,WAAW,EAAEJ,WADf;AAEE,IAAA,SAAS,EAAEC,SAFb;AAGE,IAAA,OAAO,EAAEC,OAHX;AAIE,IAAA,qBAAqB,EAAE,CACrB;AACEG,MAAAA,YAAY,EAAED,KAAK,CAACE,SADtB;AAEEC,MAAAA,eAAe,EACbH,KAAK,CAACI,IAAN,IAAcJ,KAAK,CAACK,IAAN,KAAe,UAA7B,GACIb,OAAO,CAACC,gBAAD,EAAmBO,KAAK,CAACM,MAAN,CAAaC,OAAhC,CADX,GAEIP,KAAK,CAACM,MAAN,CAAaC;AALrB,KADqB,EAQrBC,MAAM,CAACC,SARc,EASrBV,KATqB;AAJzB,KAgBGhB,KAAK,CAAC2B,QAAN,CAAeC,OAAf,CAAuBhB,QAAvB,EACEiB,MADF,CACUC,KAAD,IAAWA,KAAK,IAAI,IAAT,IAAiB,OAAOA,KAAP,KAAiB,SADtD,EAEEC,GAFF,CAEM,CAACD,KAAD,EAAQE,CAAR,KAAc;AACjB,QACEA,CAAC,KAAK,CAAN,iBACAhC,KAAK,CAACiC,cAAN,CAAqBH,KAArB,CADA,IAEAA,KAAK,CAACI,IAAN,KAAe9B,aAHjB,EAIE;AACA;AACA,0BAAOJ,KAAK,CAACmC,YAAN,CAAmBL,KAAnB,EAA0B;AAC/Bd,QAAAA,KAAK,EAAE,CAAC;AAAEoB,UAAAA,UAAU,EAAE;AAAd,SAAD,EAAqBN,KAAK,CAACO,KAAN,CAAYrB,KAAjC;AADwB,OAA1B,CAAP;AAGD;;AAED,WAAOc,KAAP;AACD,GAfF,CAhBH,CARa;AAAA,CAAf,C,CA2CA;;;AACAnB,MAAM,CAAC2B,OAAP,GAAiBlC,aAAjB,C,CACA;;AACAO,MAAM,CAAC4B,OAAP,GAAiBlC,aAAjB,C,CACA;;AACAM,MAAM,CAAC6B,KAAP,GAAelC,WAAf,C,CACA;;AACAK,MAAM,CAAC8B,UAAP,GAAoBlC,gBAApB;AAEA,MAAMkB,MAAM,GAAGxB,UAAU,CAACyC,MAAX,CAAkB;AAC/BhB,EAAAA,SAAS,EAAE;AACT;AACJ;AACA;AACA;AACA;AACA;AACA;AACIiB,IAAAA,cAAc,EAAEzC,QAAQ,CAAC0C,EAAT,KAAgB,SAAhB,GAA4B,EAA5B,GAAiC,CARxC;AASTC,IAAAA,gBAAgB,EAAE,EATT;AAUTC,IAAAA,SAAS,EAAEpC,gBAVF;AAWTqC,IAAAA,cAAc,EAAE;AAXP;AADoB,CAAlB,CAAf;AAgBA,eAAevC,SAAS,CAACG,MAAD,CAAxB","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Platform, StyleProp, ViewStyle } from 'react-native';\nimport Modal from '../Modal';\nimport DialogContent from './DialogContent';\nimport DialogActions from './DialogActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport DialogTitle, { DialogTitle as _DialogTitle } from './DialogTitle';\nimport DialogScrollArea from './DialogScrollArea';\nimport { withTheme } from '../../core/theming';\nimport overlay from '../../styles/overlay';\n\ntype Props = {\n  /**\n   * Determines whether clicking outside the dialog dismiss it.\n   */\n  dismissable?: boolean;\n  /**\n   * Callback that is called when the user dismisses the dialog.\n   */\n  onDismiss?: () => void;\n  /**\n   * Determines Whether the dialog is visible.\n   */\n  visible: boolean;\n  /**\n   * Content of the `Dialog`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst DIALOG_ELEVATION: number = 24;\n\n/**\n * Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.\n * To render the `Dialog` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n *  <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/dialog-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/dialog-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Button, Paragraph, Dialog, Portal, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const showDialog = () => setVisible(true);\n *\n *   const hideDialog = () => setVisible(false);\n *\n *   return (\n *     <Provider>\n *       <View>\n *         <Button onPress={showDialog}>Show Dialog</Button>\n *         <Portal>\n *           <Dialog visible={visible} onDismiss={hideDialog}>\n *             <Dialog.Title>Alert</Dialog.Title>\n *             <Dialog.Content>\n *               <Paragraph>This is simple dialog</Paragraph>\n *             </Dialog.Content>\n *             <Dialog.Actions>\n *               <Button onPress={hideDialog}>Done</Button>\n *             </Dialog.Actions>\n *           </Dialog>\n *         </Portal>\n *       </View>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst Dialog = ({\n  children,\n  dismissable = true,\n  onDismiss,\n  visible = false,\n  style,\n  theme,\n}: Props) => (\n  <Modal\n    dismissable={dismissable}\n    onDismiss={onDismiss}\n    visible={visible}\n    contentContainerStyle={[\n      {\n        borderRadius: theme.roundness,\n        backgroundColor:\n          theme.dark && theme.mode === 'adaptive'\n            ? overlay(DIALOG_ELEVATION, theme.colors.surface)\n            : theme.colors.surface,\n      },\n      styles.container,\n      style,\n    ]}\n  >\n    {React.Children.toArray(children)\n      .filter((child) => child != null && typeof child !== 'boolean')\n      .map((child, i) => {\n        if (\n          i === 0 &&\n          React.isValidElement(child) &&\n          child.type === DialogContent\n        ) {\n          // Dialog content is the first item, so we add a top padding\n          return React.cloneElement(child, {\n            style: [{ paddingTop: 24 }, child.props.style],\n          });\n        }\n\n        return child;\n      })}\n  </Modal>\n);\n\n// @component ./DialogContent.tsx\nDialog.Content = DialogContent;\n// @component ./DialogActions.tsx\nDialog.Actions = DialogActions;\n// @component ./DialogTitle.tsx\nDialog.Title = DialogTitle;\n// @component ./DialogScrollArea.tsx\nDialog.ScrollArea = DialogScrollArea;\n\nconst styles = StyleSheet.create({\n  container: {\n    /**\n     * This prevents the shadow from being clipped on Android since Android\n     * doesn't support `overflow: visible`.\n     * One downside for this fix is that it will disable clicks on the area\n     * of the shadow around the dialog, consequently, if you click around the\n     * dialog (44 pixel from the top and bottom) it won't be dismissed.\n     */\n    marginVertical: Platform.OS === 'android' ? 44 : 0,\n    marginHorizontal: 26,\n    elevation: DIALOG_ELEVATION,\n    justifyContent: 'flex-start',\n  },\n});\n\nexport default withTheme(Dialog);\n"]}