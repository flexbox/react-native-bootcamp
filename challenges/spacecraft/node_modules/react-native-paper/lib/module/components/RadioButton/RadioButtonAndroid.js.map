{"version":3,"sources":["RadioButtonAndroid.tsx"],"names":["React","Animated","View","StyleSheet","color","RadioButtonContext","handlePress","isChecked","TouchableRipple","withTheme","BORDER_WIDTH","RadioButtonAndroid","disabled","onPress","theme","value","status","testID","rest","current","borderAnim","useRef","Value","radioAnim","isFirstRendering","scale","animation","useEffect","setValue","timing","toValue","duration","useNativeDriver","start","checkedColor","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","radioColor","context","checked","contextValue","fade","undefined","onValueChange","styles","container","radio","borderColor","borderWidth","absoluteFill","radioContainer","dot","backgroundColor","transform","displayName","create","borderRadius","alignItems","justifyContent","height","width","margin","RadioButtonAndroidWithTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (param?: any) => void;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\nconst BORDER_WIDTH = 2;\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonAndroid = ({\n  disabled,\n  onPress,\n  theme,\n  value,\n  status,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: borderAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(BORDER_WIDTH)\n  );\n\n  const { current: radioAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(1)\n  );\n\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    if (status === 'checked') {\n      radioAnim.setValue(1.2);\n\n      Animated.timing(radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      borderAnim.setValue(10);\n\n      Animated.timing(borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n        useNativeDriver: false,\n      }).start();\n    }\n  }, [status, borderAnim, radioAnim, scale]);\n\n  const checkedColor = rest.color || theme.colors.accent;\n  const uncheckedColor =\n    rest.uncheckedColor ||\n    color(theme.colors.text)\n      .alpha(theme.dark ? 0.7 : 0.54)\n      .rgb()\n      .string();\n\n  let rippleColor: string, radioColor: string;\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        if (disabled) {\n          rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n          radioColor = theme.colors.disabled;\n        } else {\n          rippleColor = color(checkedColor).fade(0.32).rgb().string();\n          radioColor = checked ? checkedColor : uncheckedColor;\n        }\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : () => {\n                    handlePress({\n                      onPress,\n                      onValueChange: context?.onValueChange,\n                      value,\n                    });\n                  }\n            }\n            // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n            accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n            accessibilityComponentType={\n              checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n            }\n            accessibilityRole=\"radio\"\n            accessibilityState={{ disabled, checked }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n            testID={testID}\n          >\n            <Animated.View\n              style={[\n                styles.radio,\n                {\n                  borderColor: radioColor,\n                  borderWidth: borderAnim,\n                },\n              ]}\n            >\n              {checked ? (\n                <View style={[StyleSheet.absoluteFill, styles.radioContainer]}>\n                  <Animated.View\n                    style={[\n                      styles.dot,\n                      {\n                        backgroundColor: radioColor,\n                        transform: [{ scale: radioAnim }],\n                      },\n                    ]}\n                  />\n                </View>\n              ) : null}\n            </Animated.View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonAndroid.displayName = 'RadioButton.Android';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8,\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5,\n  },\n});\n\nexport default withTheme(RadioButtonAndroid);\n\n// @component-docs ignore-next-line\nconst RadioButtonAndroidWithTheme = withTheme(RadioButtonAndroid);\n// @component-docs ignore-next-line\nexport { RadioButtonAndroidWithTheme as RadioButtonAndroid };\n"]}