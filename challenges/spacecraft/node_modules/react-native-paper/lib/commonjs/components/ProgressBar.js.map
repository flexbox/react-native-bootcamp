{"version":3,"sources":["ProgressBar.tsx"],"names":["INDETERMINATE_DURATION","INDETERMINATE_MAX_WIDTH","isRTL","I18nManager","ProgressBar","color","indeterminate","style","progress","visible","theme","rest","current","timer","React","useRef","Animated","Value","fade","width","setWidth","useState","prevWidth","setPrevWidth","indeterminateAnimation","scale","animation","startAnimation","useCallback","timing","duration","toValue","useNativeDriver","isInteraction","start","Platform","OS","setValue","loop","stopAnimation","stop","useEffect","onLayout","event","nativeEvent","layout","tintColor","colors","primary","trackTintColor","alpha","rgb","string","busy","min","max","now","styles","container","backgroundColor","opacity","progressBar","transform","translateX","interpolate","inputRange","outputRange","scaleX","StyleSheet","create","height","overflow","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Platform,\n  StyleSheet,\n  View,\n  ViewStyle,\n  StyleProp,\n  LayoutChangeEvent,\n  I18nManager,\n} from 'react-native';\nimport setColor from 'color';\nimport { withTheme } from '../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Progress value (between 0 and 1).\n   */\n  progress?: number;\n  /**\n   * Color of the progress bar. The background color will be calculated based on this but you can change it by passing `backgroundColor` to `style` prop.\n   */\n  color?: string;\n  /**\n   * If the progress bar will show indeterminate progress.\n   */\n  indeterminate?: boolean;\n  /**\n   * Whether to show the ProgressBar (true, the default) or hide it (false).\n   */\n  visible?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst INDETERMINATE_DURATION = 2000;\nconst INDETERMINATE_MAX_WIDTH = 0.6;\nconst { isRTL } = I18nManager;\n\n/**\n * Progress bar is an indicator used to present progress of some activity in the app.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/progress-bar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ProgressBar, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <ProgressBar progress={0.5} color={Colors.red800} />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst ProgressBar = ({\n  color,\n  indeterminate,\n  style,\n  progress = 0,\n  visible = true,\n  theme,\n  ...rest\n}: Props) => {\n  const { current: timer } = React.useRef<Animated.Value>(\n    new Animated.Value(0)\n  );\n  const { current: fade } = React.useRef<Animated.Value>(new Animated.Value(0));\n  const [width, setWidth] = React.useState<number>(0);\n  const [prevWidth, setPrevWidth] = React.useState<number>(0);\n\n  const indeterminateAnimation =\n    React.useRef<Animated.CompositeAnimation | null>(null);\n\n  const { scale } = theme.animation;\n\n  const startAnimation = React.useCallback(() => {\n    // Show progress bar\n    Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 1,\n      useNativeDriver: true,\n      isInteraction: false,\n    }).start();\n\n    // Animate progress bar\n    if (indeterminate) {\n      if (!indeterminateAnimation.current) {\n        indeterminateAnimation.current = Animated.timing(timer, {\n          duration: INDETERMINATE_DURATION,\n          toValue: 1,\n          // Animated.loop does not work if useNativeDriver is true on web\n          useNativeDriver: Platform.OS !== 'web',\n          isInteraction: false,\n        });\n      }\n\n      // Reset timer to the beginning\n      timer.setValue(0);\n\n      Animated.loop(indeterminateAnimation.current).start();\n    } else {\n      Animated.timing(timer, {\n        duration: 200 * scale,\n        toValue: progress ? progress : 0,\n        useNativeDriver: true,\n        isInteraction: false,\n      }).start();\n    }\n  }, [scale, timer, progress, indeterminate, fade]);\n\n  const stopAnimation = React.useCallback(() => {\n    // Stop indeterminate animation\n    if (indeterminateAnimation.current) {\n      indeterminateAnimation.current.stop();\n    }\n\n    Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 0,\n      useNativeDriver: true,\n      isInteraction: false,\n    }).start();\n  }, [fade, scale]);\n\n  React.useEffect(() => {\n    if (visible) startAnimation();\n    else stopAnimation();\n  }, [visible, startAnimation, stopAnimation]);\n\n  React.useEffect(() => {\n    // Start animation the very first time when previously the width was unclear\n    if (visible && prevWidth === 0) {\n      startAnimation();\n    }\n  }, [prevWidth, startAnimation, visible]);\n\n  const onLayout = (event: LayoutChangeEvent) => {\n    setPrevWidth(width);\n    setWidth(event.nativeEvent.layout.width);\n  };\n\n  const tintColor = color || theme.colors.primary;\n  const trackTintColor = setColor(tintColor).alpha(0.38).rgb().string();\n\n  return (\n    <View\n      onLayout={onLayout}\n      {...rest}\n      accessible\n      accessibilityRole=\"progressbar\"\n      accessibilityState={{ busy: visible }}\n      accessibilityValue={\n        indeterminate ? {} : { min: 0, max: 100, now: progress * 100 }\n      }\n    >\n      <Animated.View\n        style={[\n          styles.container,\n          { backgroundColor: trackTintColor, opacity: fade },\n          style,\n        ]}\n      >\n        {width ? (\n          <Animated.View\n            style={[\n              styles.progressBar,\n              {\n                width,\n                backgroundColor: tintColor,\n                transform: [\n                  {\n                    translateX: timer.interpolate(\n                      indeterminate\n                        ? {\n                            inputRange: [0, 0.5, 1],\n                            outputRange: [\n                              (isRTL ? 1 : -1) * 0.5 * width,\n                              (isRTL ? 1 : -1) *\n                                0.5 *\n                                INDETERMINATE_MAX_WIDTH *\n                                width,\n                              (isRTL ? -1 : 1) * 0.7 * width,\n                            ],\n                          }\n                        : {\n                            inputRange: [0, 1],\n                            outputRange: [(isRTL ? 1 : -1) * 0.5 * width, 0],\n                          }\n                    ),\n                  },\n                  {\n                    // Workaround for workaround for https://github.com/facebook/react-native/issues/6278\n                    scaleX: timer.interpolate(\n                      indeterminate\n                        ? {\n                            inputRange: [0, 0.5, 1],\n                            outputRange: [\n                              0.0001,\n                              INDETERMINATE_MAX_WIDTH,\n                              0.0001,\n                            ],\n                          }\n                        : {\n                            inputRange: [0, 1],\n                            outputRange: [0.0001, 1],\n                          }\n                    ),\n                  },\n                ],\n              },\n            ]}\n          />\n        ) : null}\n      </Animated.View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 4,\n    overflow: 'hidden',\n  },\n\n  progressBar: {\n    flex: 1,\n  },\n});\n\nexport default withTheme(ProgressBar);\n"]}