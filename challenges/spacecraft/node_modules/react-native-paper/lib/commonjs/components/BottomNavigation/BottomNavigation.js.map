{"version":3,"sources":["BottomNavigation.tsx"],"names":["MIN_RIPPLE_SCALE","MIN_TAB_WIDTH","MAX_TAB_WIDTH","BAR_HEIGHT","BOTTOM_INSET","FAR_FAR_AWAY","Platform","OS","Touchable","route","_0","style","children","borderless","centered","rippleColor","rest","TouchableRipple","supported","disabled","undefined","SceneComponent","React","memo","component","createElement","BottomNavigation","navigationState","renderScene","renderIcon","renderLabel","renderTouchable","props","getLabelText","title","getBadge","badge","getColor","color","getAccessibilityLabel","accessibilityLabel","getTestID","testID","activeColor","inactiveColor","keyboardHidesNavigationBar","barStyle","labeled","theme","sceneAnimationEnabled","onTabPress","onIndexChange","shifting","routes","length","safeAreaInsets","labelMaxFontSizeMultiplier","scale","animation","focusedKey","index","key","visibleAnim","tabsAnims","map","_","i","offsetsAnims","indexAnim","rippleAnim","layout","onLayout","loaded","setLoaded","useState","includes","keyboardVisible","setKeyboardVisible","handleKeyboardShow","useCallback","Animated","timing","toValue","duration","useNativeDriver","start","handleKeyboardHide","animateToIndex","setValue","parallel","finished","tab","forEach","offset","useEffect","onShow","onHide","prevNavigationState","useRef","current","handleTabPress","event","defaultPrevented","preventDefault","jumpTo","findIndex","colors","dark","isDarkTheme","mode","backgroundColor","customBackground","elevation","StyleSheet","flatten","approxBackgroundColor","surface","primary","interpolate","inputRange","outputRange","isDark","isLight","textColor","white","black","activeTintColor","inactiveTintColor","alpha","rgb","string","touchColor","maxTabWidth","maxTabBarWidth","tabBarWidth","Math","min","width","tabWidth","rippleSize","insets","left","right","bottom","styles","container","content","background","focused","opacity","top","absoluteFill","bar","transform","translateY","height","position","measured","barContent","items","marginBottom","marginHorizontal","max","maxWidth","ripple","borderRadius","active","activeOpacity","inactiveOpacity","onPress","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","selected","item","iconContainer","iconWrapper","icon","badgeContainer","String","labelContainer","labelWrapper","label","SceneMap","scenes","create","flex","overflow","alignItems","flexDirection","paddingVertical","marginTop","alignSelf","absoluteFillObject","paddingBottom","fontSize","textAlign","whiteSpace"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Animated,\n  TouchableWithoutFeedback,\n  TouchableWithoutFeedbackProps,\n  StyleSheet,\n  StyleProp,\n  Platform,\n  ViewStyle,\n} from 'react-native';\nimport { getBottomSpace } from 'react-native-iphone-x-helper';\nimport color from 'color';\nimport overlay from '../../styles/overlay';\nimport Icon, { IconSource } from '../Icon';\nimport Surface from '../Surface';\nimport Badge from '../Badge';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport useAnimatedValue from '../../utils/useAnimatedValue';\nimport useAnimatedValueArray from '../../utils/useAnimatedValueArray';\nimport useLayout from '../../utils/useLayout';\nimport useIsKeyboardShown from '../../utils/useIsKeyboardShown';\nimport BottomNavigationRouteScreen from './BottomNavigationRouteScreen';\n\ntype Route = {\n  key: string;\n  title?: string;\n  icon?: IconSource;\n  badge?: string | number | boolean;\n  color?: string;\n  accessibilityLabel?: string;\n  testID?: string;\n};\n\ntype NavigationState = {\n  index: number;\n  routes: Route[];\n};\n\ntype TabPressEvent = {\n  defaultPrevented: boolean;\n  preventDefault(): void;\n};\n\ntype TouchableProps = TouchableWithoutFeedbackProps & {\n  key: string;\n  route: Route;\n  children: React.ReactNode;\n  borderless?: boolean;\n  centered?: boolean;\n  rippleColor?: string;\n};\n\ntype Props = {\n  /**\n   * Whether the shifting style is used, the active tab icon shifts up to show the label and the inactive tabs won't have a label.\n   *\n   * By default, this is `true` when you have more than 3 tabs.\n   * Pass `shifting={false}` to explicitly disable this animation, or `shifting={true}` to always use this animation.\n   */\n  shifting?: boolean;\n  /**\n   * Whether to show labels in tabs. When `false`, only icons will be displayed.\n   */\n  labeled?: boolean;\n  /**\n   * State for the bottom navigation. The state should contain the following properties:\n   *\n   * - `index`: a number representing the index of the active route in the `routes` array\n   * - `routes`: an array containing a list of route objects used for rendering the tabs\n   *\n   * Each route object should contain the following properties:\n   *\n   * - `key`: a unique key to identify the route (required)\n   * - `title`: title of the route to use as the tab label\n   * - `icon`: icon to use as the tab icon, can be a string, an image source or a react component\n   * - `color`: color to use as background color for shifting bottom navigation\n   * - `badge`: badge to show on the tab icon, can be `true` to show a dot, `string` or `number` to show text.\n   * - `accessibilityLabel`: accessibility label for the tab button\n   * - `testID`: test id for the tab button\n   *\n   * Example:\n   *\n   * ```js\n   * {\n   *   index: 1,\n   *   routes: [\n   *     { key: 'music', title: 'Music', icon: 'queue-music', color: '#3F51B5' },\n   *     { key: 'albums', title: 'Albums', icon: 'album', color: '#009688' },\n   *     { key: 'recents', title: 'Recents', icon: 'history', color: '#795548' },\n   *     { key: 'purchased', title: 'Purchased', icon: 'shopping-cart', color: '#607D8B' },\n   *   ]\n   * }\n   * ```\n   *\n   * `BottomNavigation` is a controlled component, which means the `index` needs to be updated via the `onIndexChange` callback.\n   */\n  navigationState: NavigationState;\n  /**\n   * Callback which is called on tab change, receives the index of the new tab as argument.\n   * The navigation state needs to be updated when it's called, otherwise the change is dropped.\n   */\n  onIndexChange: (index: number) => void;\n  /**\n   * Callback which returns a react element to render as the page for the tab. Receives an object containing the route as the argument:\n   *\n   * ```js\n   * renderScene = ({ route, jumpTo }) => {\n   *   switch (route.key) {\n   *     case 'music':\n   *       return <MusicRoute jumpTo={jumpTo} />;\n   *     case 'albums':\n   *       return <AlbumsRoute jumpTo={jumpTo} />;\n   *   }\n   * }\n   * ```\n   *\n   * Pages are lazily rendered, which means that a page will be rendered the first time you navigate to it.\n   * After initial render, all the pages stay rendered to preserve their state.\n   *\n   * You need to make sure that your individual routes implement a `shouldComponentUpdate` to improve the performance.\n   * To make it easier to specify the components, you can use the `SceneMap` helper:\n   *\n   * ```js\n   * renderScene = BottomNavigation.SceneMap({\n   *   music: MusicRoute,\n   *   albums: AlbumsRoute,\n   * });\n   * ```\n   *\n   * Specifying the components this way is easier and takes care of implementing a `shouldComponentUpdate` method.\n   * Each component will receive the current route and a `jumpTo` method as it's props.\n   * The `jumpTo` method can be used to navigate to other tabs programmatically:\n   *\n   * ```js\n   * this.props.jumpTo('albums')\n   * ```\n   */\n  renderScene: (props: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => React.ReactNode | null;\n  /**\n   * Callback which returns a React Element to be used as tab icon.\n   */\n  renderIcon?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which React Element to be used as tab label.\n   */\n  renderLabel?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to be used as the touchable for the tab item.\n   * Renders a `TouchableRipple` on Android and `TouchableWithoutFeedback` with `View` on iOS.\n   */\n  renderTouchable?: (props: TouchableProps) => React.ReactNode;\n  /**\n   * Get label text for the tab, uses `route.title` by default. Use `renderLabel` to replace label component.\n   */\n  getLabelText?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get accessibility label for the tab button. This is read by the screen reader when the user taps the tab.\n   * Uses `route.accessibilityLabel` by default.\n   */\n  getAccessibilityLabel?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get the id to locate this tab button in tests, uses `route.testID` by default.\n   */\n  getTestID?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get badge for the tab, uses `route.badge` by default.\n   */\n  getBadge?: (props: { route: Route }) => boolean | number | string | undefined;\n  /**\n   * Get color for the tab, uses `route.color` by default.\n   */\n  getColor?: (props: { route: Route }) => string | undefined;\n  /**\n   * Function to execute on tab press. It receives the route for the pressed tab, useful for things like scroll to top.\n   */\n  onTabPress?: (props: { route: Route } & TabPressEvent) => void;\n  /**\n   * Custom color for icon and label in the active tab.\n   */\n  activeColor?: string;\n  /**\n   * Custom color for icon and label in the inactive tab.\n   */\n  inactiveColor?: string;\n  /**\n   * Whether animation is enabled for scenes transitions in `shifting` mode.\n   * By default, the scenes cross-fade during tab change when `shifting` is enabled.\n   * Specify `sceneAnimationEnabled` as `false` to disable the animation.\n   */\n  sceneAnimationEnabled?: boolean;\n  /**\n   * Whether the bottom navigation bar is hidden when keyboard is shown.\n   * On Android, this works best when [`windowSoftInputMode`](https://developer.android.com/guide/topics/manifest/activity-element#wsoft) is set to `adjustResize`.\n   */\n  keyboardHidesNavigationBar?: boolean;\n  /**\n   * Safe area insets for the tab bar. This can be used to avoid elements like the navigation bar on Android and bottom safe area on iOS.\n   * The bottom insets for iOS is added by default. You can override the behavior with this option.\n   */\n  safeAreaInsets?: {\n    top?: number;\n    right?: number;\n    bottom?: number;\n    left?: number;\n  };\n  /**\n   * Style for the bottom navigation bar.  You can pass a custom background color here:\n   *\n   * ```js\n   * barStyle={{ backgroundColor: '#694fad' }}\n   * ```\n   */\n  barStyle?: StyleProp<ViewStyle>;\n  /**\n   * Specifies the largest possible scale a label font can reach.\n   */\n  labelMaxFontSizeMultiplier?: number;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst MIN_RIPPLE_SCALE = 0.001; // Minimum scale is not 0 due to bug with animation\nconst MIN_TAB_WIDTH = 96;\nconst MAX_TAB_WIDTH = 168;\nconst BAR_HEIGHT = 56;\nconst BOTTOM_INSET = getBottomSpace();\nconst FAR_FAR_AWAY = Platform.OS === 'web' ? 0 : 9999;\n\nconst Touchable = ({\n  route: _0,\n  style,\n  children,\n  borderless,\n  centered,\n  rippleColor,\n  ...rest\n}: TouchableProps) =>\n  TouchableRipple.supported ? (\n    <TouchableRipple\n      {...rest}\n      disabled={rest.disabled || undefined}\n      borderless={borderless}\n      centered={centered}\n      rippleColor={rippleColor}\n      style={style}\n    >\n      {children}\n    </TouchableRipple>\n  ) : (\n    <TouchableWithoutFeedback {...rest}>\n      <View style={style}>{children}</View>\n    </TouchableWithoutFeedback>\n  );\n\nconst SceneComponent = React.memo(({ component, ...rest }: any) =>\n  React.createElement(component, rest)\n);\n\n/**\n * Bottom navigation provides quick navigation between top-level views of an app with a bottom navigation bar.\n * It is primarily designed for use on mobile.\n *\n * For integration with React Navigation, you can use [react-navigation-material-bottom-tabs](https://github.com/react-navigation/react-navigation/tree/main/packages/material-bottom-tabs) and consult [createMaterialBottomTabNavigator](https://reactnavigation.org/docs/material-bottom-tab-navigator/) documentation.\n *\n * By default Bottom navigation uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/bottom-navigation.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { BottomNavigation, Text } from 'react-native-paper';\n *\n * const MusicRoute = () => <Text>Music</Text>;\n *\n * const AlbumsRoute = () => <Text>Albums</Text>;\n *\n * const RecentsRoute = () => <Text>Recents</Text>;\n *\n * const MyComponent = () => {\n *   const [index, setIndex] = React.useState(0);\n *   const [routes] = React.useState([\n *     { key: 'music', title: 'Music', icon: 'queue-music' },\n *     { key: 'albums', title: 'Albums', icon: 'album' },\n *     { key: 'recents', title: 'Recents', icon: 'history' },\n *   ]);\n *\n *   const renderScene = BottomNavigation.SceneMap({\n *     music: MusicRoute,\n *     albums: AlbumsRoute,\n *     recents: RecentsRoute,\n *   });\n *\n *   return (\n *     <BottomNavigation\n *       navigationState={{ index, routes }}\n *       onIndexChange={setIndex}\n *       renderScene={renderScene}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst BottomNavigation = ({\n  navigationState,\n  renderScene,\n  renderIcon,\n  renderLabel,\n  renderTouchable = (props: TouchableProps) => <Touchable {...props} />,\n  getLabelText = ({ route }: { route: Route }) => route.title,\n  getBadge = ({ route }: { route: Route }) => route.badge,\n  getColor = ({ route }: { route: Route }) => route.color,\n  getAccessibilityLabel = ({ route }: { route: Route }) =>\n    route.accessibilityLabel,\n  getTestID = ({ route }: { route: Route }) => route.testID,\n  activeColor,\n  inactiveColor,\n  keyboardHidesNavigationBar = true,\n  barStyle,\n  labeled = true,\n  style,\n  theme,\n  sceneAnimationEnabled = false,\n  onTabPress,\n  onIndexChange,\n  shifting = navigationState.routes.length > 3,\n  safeAreaInsets,\n  labelMaxFontSizeMultiplier = 1,\n}: Props) => {\n  const { scale } = theme.animation;\n\n  const focusedKey = navigationState.routes[navigationState.index].key;\n\n  /**\n   * Visibility of the navigation bar, visible state is 1 and invisible is 0.\n   */\n  const visibleAnim = useAnimatedValue(1);\n\n  /**\n   * Active state of individual tab items, active state is 1 and inactive state is 0.\n   */\n  const tabsAnims = useAnimatedValueArray(\n    navigationState.routes.map(\n      // focused === 1, unfocused === 0\n      (_, i) => (i === navigationState.index ? 1 : 0)\n    )\n  );\n\n  /**\n   * The top offset for each tab item to position it offscreen.\n   * Placing items offscreen helps to save memory usage for inactive screens with removeClippedSubviews.\n   * We use animated values for this to prevent unnecessary re-renders.\n   */\n  const offsetsAnims = useAnimatedValueArray(\n    navigationState.routes.map(\n      // offscreen === 1, normal === 0\n      (_, i) => (i === navigationState.index ? 0 : 1)\n    )\n  );\n\n  /**\n   * Index of the currently active tab. Used for setting the background color.\n   * We don't use the color as an animated value directly, because `setValue` seems to be buggy with colors.\n   */\n  const indexAnim = useAnimatedValue(navigationState.index);\n\n  /**\n   * Animation for the background color ripple, used to determine it's scale and opacity.\n   */\n  const rippleAnim = useAnimatedValue(MIN_RIPPLE_SCALE);\n\n  /**\n   * Layout of the navigation bar. The width is used to determine the size and position of the ripple.\n   */\n  const [layout, onLayout] = useLayout();\n\n  /**\n   * List of loaded tabs, tabs will be loaded when navigated to.\n   */\n  const [loaded, setLoaded] = React.useState<string[]>([focusedKey]);\n\n  if (!loaded.includes(focusedKey)) {\n    // Set the current tab to be loaded if it was not loaded before\n    setLoaded((loaded) => [...loaded, focusedKey]);\n  }\n\n  /**\n   * Track whether the keyboard is visible to show and hide the navigation bar.\n   */\n  const [keyboardVisible, setKeyboardVisible] = React.useState(false);\n\n  const handleKeyboardShow = React.useCallback(() => {\n    setKeyboardVisible(true);\n    Animated.timing(visibleAnim, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  }, [scale, visibleAnim]);\n\n  const handleKeyboardHide = React.useCallback(() => {\n    Animated.timing(visibleAnim, {\n      toValue: 1,\n      duration: 100 * scale,\n      useNativeDriver: true,\n    }).start(() => {\n      setKeyboardVisible(false);\n    });\n  }, [scale, visibleAnim]);\n\n  const animateToIndex = React.useCallback(\n    (index: number) => {\n      // Reset the ripple to avoid glitch if it's currently animating\n      rippleAnim.setValue(MIN_RIPPLE_SCALE);\n\n      Animated.parallel([\n        Animated.timing(rippleAnim, {\n          toValue: 1,\n          duration: shifting ? 400 * scale : 0,\n          useNativeDriver: true,\n        }),\n        ...navigationState.routes.map((_, i) =>\n          Animated.timing(tabsAnims[i], {\n            toValue: i === index ? 1 : 0,\n            duration: shifting ? 150 * scale : 0,\n            useNativeDriver: true,\n          })\n        ),\n      ]).start(({ finished }) => {\n        // Workaround a bug in native animations where this is reset after first animation\n        tabsAnims.map((tab, i) => tab.setValue(i === index ? 1 : 0));\n\n        // Update the index to change bar's background color and then hide the ripple\n        indexAnim.setValue(index);\n        rippleAnim.setValue(MIN_RIPPLE_SCALE);\n\n        if (finished) {\n          // Position all inactive screens offscreen to save memory usage\n          // Only do it when animation has finished to avoid glitches mid-transition if switching fast\n          offsetsAnims.forEach((offset, i) => {\n            if (i === index) {\n              offset.setValue(0);\n            } else {\n              offset.setValue(1);\n            }\n          });\n        }\n      });\n    },\n    [\n      indexAnim,\n      shifting,\n      navigationState.routes,\n      offsetsAnims,\n      rippleAnim,\n      scale,\n      tabsAnims,\n    ]\n  );\n\n  React.useEffect(() => {\n    // Workaround for native animated bug in react-native@^0.57\n    // Context: https://github.com/callstack/react-native-paper/pull/637\n    animateToIndex(navigationState.index);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useIsKeyboardShown({\n    onShow: handleKeyboardShow,\n    onHide: handleKeyboardHide,\n  });\n\n  const prevNavigationState = React.useRef<NavigationState>();\n\n  React.useEffect(() => {\n    // Reset offsets of previous and current tabs before animation\n    offsetsAnims.forEach((offset, i) => {\n      if (\n        i === navigationState.index ||\n        i === prevNavigationState.current?.index\n      ) {\n        offset.setValue(0);\n      }\n    });\n\n    animateToIndex(navigationState.index);\n  }, [navigationState.index, animateToIndex, offsetsAnims]);\n\n  const handleTabPress = (index: number) => {\n    const event = {\n      route: navigationState.routes[index],\n      defaultPrevented: false,\n      preventDefault: () => {\n        event.defaultPrevented = true;\n      },\n    };\n\n    onTabPress?.(event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (index !== navigationState.index) {\n      onIndexChange(index);\n    }\n  };\n\n  const jumpTo = React.useCallback(\n    (key: string) => {\n      const index = navigationState.routes.findIndex(\n        (route) => route.key === key\n      );\n\n      onIndexChange(index);\n    },\n    [navigationState.routes, onIndexChange]\n  );\n\n  const { routes } = navigationState;\n  const { colors, dark: isDarkTheme, mode } = theme;\n\n  const { backgroundColor: customBackground, elevation = 4 }: ViewStyle =\n    StyleSheet.flatten(barStyle) || {};\n\n  const approxBackgroundColor = customBackground\n    ? customBackground\n    : isDarkTheme && mode === 'adaptive'\n    ? overlay(elevation, colors.surface)\n    : colors.primary;\n\n  const backgroundColor = shifting\n    ? indexAnim.interpolate({\n        inputRange: routes.map((_, i) => i),\n        // FIXME: does outputRange support ColorValue or just strings?\n        // @ts-expect-error\n        outputRange: routes.map(\n          (route) => getColor({ route }) || approxBackgroundColor\n        ),\n      })\n    : approxBackgroundColor;\n\n  const isDark =\n    typeof approxBackgroundColor === 'string'\n      ? !color(approxBackgroundColor).isLight()\n      : true;\n\n  const textColor = isDark ? white : black;\n  const activeTintColor =\n    typeof activeColor !== 'undefined' ? activeColor : textColor;\n  const inactiveTintColor =\n    typeof inactiveColor !== 'undefined'\n      ? inactiveColor\n      : color(textColor).alpha(0.5).rgb().string();\n\n  const touchColor = color(activeColor || activeTintColor)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  const maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;\n  const maxTabBarWidth = maxTabWidth * routes.length;\n\n  const tabBarWidth = Math.min(layout.width, maxTabBarWidth);\n  const tabWidth = tabBarWidth / routes.length;\n\n  const rippleSize = layout.width / 4;\n\n  const insets = {\n    left: safeAreaInsets?.left ?? 0,\n    right: safeAreaInsets?.right ?? 0,\n    bottom: safeAreaInsets?.bottom ?? BOTTOM_INSET,\n  };\n\n  return (\n    <View style={[styles.container, style]}>\n      <View style={[styles.content, { backgroundColor: colors.background }]}>\n        {routes.map((route, index) => {\n          if (!loaded.includes(route.key)) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const focused = navigationState.index === index;\n\n          const opacity = sceneAnimationEnabled\n            ? tabsAnims[index]\n            : focused\n            ? 1\n            : 0;\n\n          const top = sceneAnimationEnabled\n            ? offsetsAnims[index].interpolate({\n                inputRange: [0, 1],\n                outputRange: [0, FAR_FAR_AWAY],\n              })\n            : focused\n            ? 0\n            : FAR_FAR_AWAY;\n\n          return (\n            <BottomNavigationRouteScreen\n              key={route.key}\n              pointerEvents={focused ? 'auto' : 'none'}\n              accessibilityElementsHidden={!focused}\n              importantForAccessibility={\n                focused ? 'auto' : 'no-hide-descendants'\n              }\n              index={index}\n              visibility={opacity}\n              style={[StyleSheet.absoluteFill, { opacity }]}\n              collapsable={false}\n              removeClippedSubviews={\n                // On iOS, set removeClippedSubviews to true only when not focused\n                // This is an workaround for a bug where the clipped view never re-appears\n                Platform.OS === 'ios' ? navigationState.index !== index : true\n              }\n            >\n              <Animated.View style={[styles.content, { top }]}>\n                {renderScene({ route, jumpTo })}\n              </Animated.View>\n            </BottomNavigationRouteScreen>\n          );\n        })}\n      </View>\n      <Surface\n        style={\n          [\n            styles.bar,\n            keyboardHidesNavigationBar\n              ? {\n                  // When the keyboard is shown, slide down the navigation bar\n                  transform: [\n                    {\n                      translateY: visibleAnim.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [layout.height, 0],\n                      }),\n                    },\n                  ],\n                  // Absolutely position the navigation bar so that the content is below it\n                  // This is needed to avoid gap at bottom when the navigation bar is hidden\n                  position: keyboardVisible ? 'absolute' : null,\n                }\n              : null,\n            barStyle,\n          ] as StyleProp<ViewStyle>\n        }\n        pointerEvents={\n          layout.measured\n            ? keyboardHidesNavigationBar && keyboardVisible\n              ? 'none'\n              : 'auto'\n            : 'none'\n        }\n        onLayout={onLayout}\n      >\n        <Animated.View style={[styles.barContent, { backgroundColor }]}>\n          <View\n            style={[\n              styles.items,\n              {\n                marginBottom: insets.bottom,\n                marginHorizontal: Math.max(insets.left, insets.right),\n                maxWidth: maxTabBarWidth,\n              },\n            ]}\n            accessibilityRole={'tablist'}\n          >\n            {shifting ? (\n              <Animated.View\n                pointerEvents=\"none\"\n                style={[\n                  styles.ripple,\n                  {\n                    // Since we have a single ripple, we have to reposition it so that it appears to expand from active tab.\n                    // We need to move it from the top to center of the navigation bar and from the left to the active tab.\n                    top: (BAR_HEIGHT - rippleSize) / 2,\n                    left:\n                      tabWidth * (navigationState.index + 0.5) - rippleSize / 2,\n                    height: rippleSize,\n                    width: rippleSize,\n                    borderRadius: rippleSize / 2,\n                    backgroundColor: getColor({\n                      route: routes[navigationState.index],\n                    }),\n                    transform: [\n                      {\n                        // Scale to twice the size  to ensure it covers the whole navigation bar\n                        scale: rippleAnim.interpolate({\n                          inputRange: [0, 1],\n                          outputRange: [0, 8],\n                        }),\n                      },\n                    ],\n                    opacity: rippleAnim.interpolate({\n                      inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],\n                      outputRange: [0, 0, 1, 1],\n                    }),\n                  },\n                ]}\n              />\n            ) : null}\n            {routes.map((route, index) => {\n              const focused = navigationState.index === index;\n              const active = tabsAnims[index];\n\n              // Scale the label up\n              const scale =\n                labeled && shifting\n                  ? active.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [0.5, 1],\n                    })\n                  : 1;\n\n              // Move down the icon to account for no-label in shifting and smaller label in non-shifting.\n              const translateY = labeled\n                ? shifting\n                  ? active.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [7, 0],\n                    })\n                  : 0\n                : 7;\n\n              // We render the active icon and label on top of inactive ones and cross-fade them on change.\n              // This trick gives the illusion that we are animating between active and inactive colors.\n              // This is to ensure that we can use native driver, as colors cannot be animated with native driver.\n              const activeOpacity = active;\n              const inactiveOpacity = active.interpolate({\n                inputRange: [0, 1],\n                outputRange: [1, 0],\n              });\n\n              const badge = getBadge({ route });\n\n              return renderTouchable({\n                key: route.key,\n                route,\n                borderless: true,\n                centered: true,\n                rippleColor: touchColor,\n                onPress: () => handleTabPress(index),\n                testID: getTestID({ route }),\n                accessibilityLabel: getAccessibilityLabel({ route }),\n                // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n                accessibilityTraits: focused\n                  ? ['button', 'selected']\n                  : 'button',\n                accessibilityComponentType: 'button',\n                accessibilityRole: Platform.OS === 'ios' ? 'button' : 'tab',\n                accessibilityState: { selected: focused },\n                style: styles.item,\n                children: (\n                  <View pointerEvents=\"none\">\n                    <Animated.View\n                      style={[\n                        styles.iconContainer,\n                        { transform: [{ translateY }] },\n                      ]}\n                    >\n                      <Animated.View\n                        style={[styles.iconWrapper, { opacity: activeOpacity }]}\n                      >\n                        {renderIcon ? (\n                          renderIcon({\n                            route,\n                            focused: true,\n                            color: activeTintColor,\n                          })\n                        ) : (\n                          <Icon\n                            source={route.icon as IconSource}\n                            color={activeTintColor}\n                            size={24}\n                          />\n                        )}\n                      </Animated.View>\n                      <Animated.View\n                        style={[\n                          styles.iconWrapper,\n                          { opacity: inactiveOpacity },\n                        ]}\n                      >\n                        {renderIcon ? (\n                          renderIcon({\n                            route,\n                            focused: false,\n                            color: inactiveTintColor,\n                          })\n                        ) : (\n                          <Icon\n                            source={route.icon as IconSource}\n                            color={inactiveTintColor}\n                            size={24}\n                          />\n                        )}\n                      </Animated.View>\n                      <View\n                        style={[\n                          styles.badgeContainer,\n                          {\n                            right:\n                              (badge != null && typeof badge !== 'boolean'\n                                ? String(badge).length * -2\n                                : 0) - 2,\n                          },\n                        ]}\n                      >\n                        {typeof badge === 'boolean' ? (\n                          <Badge visible={badge} size={8} />\n                        ) : (\n                          <Badge visible={badge != null} size={16}>\n                            {badge}\n                          </Badge>\n                        )}\n                      </View>\n                    </Animated.View>\n                    {labeled ? (\n                      <Animated.View\n                        style={[\n                          styles.labelContainer,\n                          { transform: [{ scale }] },\n                        ]}\n                      >\n                        <Animated.View\n                          style={[\n                            styles.labelWrapper,\n                            { opacity: activeOpacity },\n                          ]}\n                        >\n                          {renderLabel ? (\n                            renderLabel({\n                              route,\n                              focused: true,\n                              color: activeTintColor,\n                            })\n                          ) : (\n                            <Text\n                              maxFontSizeMultiplier={labelMaxFontSizeMultiplier}\n                              style={[styles.label, { color: activeTintColor }]}\n                            >\n                              {getLabelText({ route })}\n                            </Text>\n                          )}\n                        </Animated.View>\n                        {shifting ? null : (\n                          <Animated.View\n                            style={[\n                              styles.labelWrapper,\n                              { opacity: inactiveOpacity },\n                            ]}\n                          >\n                            {renderLabel ? (\n                              renderLabel({\n                                route,\n                                focused: false,\n                                color: inactiveTintColor,\n                              })\n                            ) : (\n                              <Text\n                                maxFontSizeMultiplier={\n                                  labelMaxFontSizeMultiplier\n                                }\n                                selectable={false}\n                                style={[\n                                  styles.label,\n                                  { color: inactiveTintColor },\n                                ]}\n                              >\n                                {getLabelText({ route })}\n                              </Text>\n                            )}\n                          </Animated.View>\n                        )}\n                      </Animated.View>\n                    ) : (\n                      <View style={styles.labelContainer} />\n                    )}\n                  </View>\n                ),\n              });\n            })}\n          </View>\n        </Animated.View>\n      </Surface>\n    </View>\n  );\n};\n\n/**\n * Function which takes a map of route keys to components.\n * Pure components are used to minimize re-rendering of the pages.\n * This drastically improves the animation performance.\n */\nBottomNavigation.SceneMap = (scenes: {\n  [key: string]: React.ComponentType<{\n    route: Route;\n    jumpTo: (key: string) => void;\n  }>;\n}) => {\n  return ({\n    route,\n    jumpTo,\n  }: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => (\n    <SceneComponent\n      key={route.key}\n      component={scenes[route.key ? route.key : '']}\n      route={route}\n      jumpTo={jumpTo}\n    />\n  );\n};\n\nexport default withTheme(BottomNavigation);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  content: {\n    flex: 1,\n  },\n  bar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    elevation: 4,\n  },\n  barContent: {\n    alignItems: 'center',\n    overflow: 'hidden',\n  },\n  items: {\n    flexDirection: 'row',\n    ...(Platform.OS === 'web'\n      ? {\n          width: '100%',\n        }\n      : null),\n  },\n  item: {\n    flex: 1,\n    // Top padding is 6 and bottom padding is 10\n    // The extra 4dp bottom padding is offset by label's height\n    paddingVertical: 6,\n  },\n  ripple: {\n    position: 'absolute',\n  },\n  iconContainer: {\n    height: 24,\n    width: 24,\n    marginTop: 2,\n    marginHorizontal: 12,\n    alignSelf: 'center',\n  },\n  iconWrapper: {\n    ...StyleSheet.absoluteFillObject,\n    alignItems: 'center',\n  },\n  labelContainer: {\n    height: 16,\n    paddingBottom: 2,\n  },\n  labelWrapper: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  // eslint-disable-next-line react-native/no-color-literals\n  label: {\n    fontSize: 12,\n    height: BAR_HEIGHT,\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n    ...(Platform.OS === 'web'\n      ? {\n          whiteSpace: 'nowrap',\n          alignSelf: 'center',\n        }\n      : null),\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 0,\n    top: -2,\n  },\n});\n"]}