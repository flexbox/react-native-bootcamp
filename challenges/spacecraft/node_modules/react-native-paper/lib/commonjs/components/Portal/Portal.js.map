{"version":3,"sources":["Portal.tsx"],"names":["Portal","React","Component","render","children","theme","props","settings","manager","PortalHost"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAIA;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,MAAN,SAAqBC,KAAK,CAACC,SAA3B,CAA4C;AAC1C;AAGAC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAAsB,KAAKC,KAAjC;AAEA,wBACE,oBAAC,kBAAD,QACIC,QAAD,iBACC,oBAAC,yBAAD,CAAe,QAAf,QACIC,OAAD,iBACC,oBAAC,uBAAD;AAAgB,MAAA,OAAO,EAAEA;AAAzB,oBACE,oBAAC,kBAAD;AAAkB,MAAA,KAAK,EAAED;AAAzB,oBACE,oBAAC,sBAAD;AAAe,MAAA,KAAK,EAAEF;AAAtB,OAA8BD,QAA9B,CADF,CADF,CAFJ,CAFJ,CADF;AAeD;;AAtByC;;gBAAtCJ,M,UAEUS,mB;;eAuBD,wBAAUT,MAAV,C","sourcesContent":["import * as React from 'react';\nimport PortalConsumer from './PortalConsumer';\nimport PortalHost, { PortalContext, PortalMethods } from './PortalHost';\nimport {\n  Provider as SettingsProvider,\n  Consumer as SettingsConsumer,\n} from '../../core/settings';\nimport { ThemeProvider, withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Content of the `Portal`.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Portal allows to render a component at a different place in the parent tree.\n * You can use it to render content which should appear above other elements, similar to `Modal`.\n * It requires a [`Portal.Host`](portal-host.html) component to be rendered somewhere in the parent tree.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Portal, Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Portal>\n *     <Text>This is rendered at a different place</Text>\n *   </Portal>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Portal extends React.Component<Props> {\n  // @component ./PortalHost.tsx\n  static Host = PortalHost;\n\n  render() {\n    const { children, theme } = this.props;\n\n    return (\n      <SettingsConsumer>\n        {(settings) => (\n          <PortalContext.Consumer>\n            {(manager) => (\n              <PortalConsumer manager={manager as PortalMethods}>\n                <SettingsProvider value={settings}>\n                  <ThemeProvider theme={theme}>{children}</ThemeProvider>\n                </SettingsProvider>\n              </PortalConsumer>\n            )}\n          </PortalContext.Consumer>\n        )}\n      </SettingsConsumer>\n    );\n  }\n}\n\nexport default withTheme(Portal);\n"]}