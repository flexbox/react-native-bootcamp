{"version":3,"sources":["ToggleButtonRow.tsx"],"names":["ToggleButtonRow","value","onValueChange","children","style","count","React","Children","styles","row","map","child","i","type","ToggleButton","cloneElement","button","first","last","middle","props","displayName","StyleSheet","create","flexDirection","borderWidth","hairlineWidth","borderTopRightRadius","borderBottomRightRadius","borderRadius","borderLeftWidth","borderTopLeftRadius","borderBottomLeftRadius"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,eAAe,GAAG,QAAsD;AAAA,MAArD;AAAEC,IAAAA,KAAF;AAASC,IAAAA,aAAT;AAAwBC,IAAAA,QAAxB;AAAkCC,IAAAA;AAAlC,GAAqD;AAC5E,QAAMC,KAAK,GAAGC,KAAK,CAACC,QAAN,CAAeF,KAAf,CAAqBF,QAArB,CAAd;AAEA,sBACE,oBAAC,0BAAD;AAAmB,IAAA,KAAK,EAAEF,KAA1B;AAAiC,IAAA,aAAa,EAAEC;AAAhD,kBACE,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAACM,MAAM,CAACC,GAAR,EAAaL,KAAb;AAAb,KACGE,KAAK,CAACC,QAAN,CAAeG,GAAf,CAAmBP,QAAnB,EAA6B,CAACQ,KAAD,EAAQC,CAAR,KAAc;AAC1C;AACA,QAAID,KAAK,IAAIA,KAAK,CAACE,IAAN,KAAeC,qBAA5B,EAA0C;AACxC;AACA,0BAAOR,KAAK,CAACS,YAAN,CAAmBJ,KAAnB,EAA0B;AAC/BP,QAAAA,KAAK,EAAE,CACLI,MAAM,CAACQ,MADF,EAELJ,CAAC,KAAK,CAAN,GACIJ,MAAM,CAACS,KADX,GAEIL,CAAC,KAAKP,KAAK,GAAG,CAAd,GACAG,MAAM,CAACU,IADP,GAEAV,MAAM,CAACW,MANN,EAOL;AACAR,QAAAA,KAAK,CAACS,KAAN,CAAYhB,KARP;AADwB,OAA1B,CAAP;AAYD;;AAED,WAAOO,KAAP;AACD,GAnBA,CADH,CADF,CADF;AA0BD,CA7BD;;;AA+BAX,eAAe,CAACqB,WAAhB,GAA8B,kBAA9B;;AAEA,MAAMb,MAAM,GAAGc,wBAAWC,MAAX,CAAkB;AAC/Bd,EAAAA,GAAG,EAAE;AACHe,IAAAA,aAAa,EAAE;AADZ,GAD0B;AAI/BR,EAAAA,MAAM,EAAE;AACNS,IAAAA,WAAW,EAAEH,wBAAWI;AADlB,GAJuB;AAQ/BT,EAAAA,KAAK,EAAE;AACLU,IAAAA,oBAAoB,EAAE,CADjB;AAELC,IAAAA,uBAAuB,EAAE;AAFpB,GARwB;AAa/BT,EAAAA,MAAM,EAAE;AACNU,IAAAA,YAAY,EAAE,CADR;AAENC,IAAAA,eAAe,EAAE;AAFX,GAbuB;AAkB/BZ,EAAAA,IAAI,EAAE;AACJY,IAAAA,eAAe,EAAE,CADb;AAEJC,IAAAA,mBAAmB,EAAE,CAFjB;AAGJC,IAAAA,sBAAsB,EAAE;AAHpB;AAlByB,CAAlB,CAAf;;eAyBehC,e,EAEf","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, StyleProp, ViewStyle } from 'react-native';\nimport ToggleButtonGroup from './ToggleButtonGroup';\nimport ToggleButton from './ToggleButton';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onValueChange: (value: string) => void;\n  /**\n   * Value of the currently selected toggle button.\n   */\n  value: string;\n  /**\n   * React elements containing toggle buttons.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * Toggle button row renders a group of toggle buttons in a row.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/toggle-button-row.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('left');\n *\n *   return (\n *     <ToggleButton.Row onValueChange={value => setValue(value)} value={value}>\n *       <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *       <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *     </ToggleButton.Row>\n *   );\n * };\n *\n * export default MyComponent;\n *\n *```\n */\nconst ToggleButtonRow = ({ value, onValueChange, children, style }: Props) => {\n  const count = React.Children.count(children);\n\n  return (\n    <ToggleButtonGroup value={value} onValueChange={onValueChange}>\n      <View style={[styles.row, style]}>\n        {React.Children.map(children, (child, i) => {\n          // @ts-expect-error: TypeScript complains about child.type but it doesn't matter\n          if (child && child.type === ToggleButton) {\n            // @ts-expect-error: We're sure that child is a React Element\n            return React.cloneElement(child, {\n              style: [\n                styles.button,\n                i === 0\n                  ? styles.first\n                  : i === count - 1\n                  ? styles.last\n                  : styles.middle,\n                // @ts-expect-error: We're sure that child is a React Element\n                child.props.style,\n              ],\n            });\n          }\n\n          return child;\n        })}\n      </View>\n    </ToggleButtonGroup>\n  );\n};\n\nToggleButtonRow.displayName = 'ToggleButton.Row';\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n  button: {\n    borderWidth: StyleSheet.hairlineWidth,\n  },\n\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n  },\n\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0,\n  },\n\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n  },\n});\n\nexport default ToggleButtonRow;\n\n// @component-docs ignore-next-line\nexport { ToggleButtonRow };\n"]}