{"version":3,"sources":["helpers.tsx"],"names":["calculateLabelTopPosition","labelHeight","height","optionalPadding","customHeight","Math","floor","calculateInputHeight","minHeight","finalHeight","calculatePadding","props","multiline","result","calculateTextAreaPadding","calculateInputPadding","max","dense","topPosition","fontSize","scale","offset","isAndroid","refFontSize","min","adjustPaddingOut","pad","label","lineHeight","fontHeight","refFontHeight","paddingTop","paddingBottom","adjustPaddingFlat","styles","topResult","bottomResult","interpolatePlaceholder","labeled","hasActiveOutline","interpolate","inputRange","outputRange","calculateFlatAffixTopPosition","affixHeight","inputHeightWithoutPadding","halfOfTheInputHeightDecreasedByAffixHeight","calculateOutlinedIconAndAffixTopPosition","labelYOffset","calculateFlatInputHorizontalPadding","adornmentConfig","paddingLeft","LABEL_PADDING_HORIZONTAL","paddingRight","forEach","type","side","AdornmentType","Icon","AdornmentSide","Left","ADORNMENT_SIZE","ADORNMENT_OFFSET","FLAT_INPUT_OFFSET","Right","Affix"],"mappings":"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","sourcesContent":["import type { Animated } from 'react-native';\nimport type { AdornmentConfig } from './Adornment/types';\nimport {\n  LABEL_PADDING_HORIZONTAL,\n  ADORNMENT_OFFSET,\n  ADORNMENT_SIZE,\n  FLAT_INPUT_OFFSET,\n} from './constants';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\nimport type { TextInputLabelProp } from './types';\n\ntype PaddingProps = {\n  height: number | null;\n  labelHalfHeight: number;\n  multiline: boolean | null;\n  dense: boolean | null;\n  topPosition: number;\n  fontSize: number;\n  lineHeight?: number;\n  label?: TextInputLabelProp | null;\n  scale: number;\n  offset: number;\n  isAndroid: boolean;\n  styles: { paddingTop: number; paddingBottom: number };\n};\n\ntype AdjProps = PaddingProps & {\n  pad: number;\n};\n\nexport type Padding = { paddingTop: number; paddingBottom: number };\n\nexport const calculateLabelTopPosition = (\n  labelHeight: number,\n  height: number = 0,\n  optionalPadding: number = 0\n): number => {\n  const customHeight = height > 0 ? height : 0;\n\n  return Math.floor((customHeight - labelHeight) / 2 + optionalPadding);\n};\n\nexport const calculateInputHeight = (\n  labelHeight: number,\n  height: any = 0,\n  minHeight: number\n): number => {\n  const finalHeight = height > 0 ? height : labelHeight;\n\n  if (height > 0) return height;\n  return finalHeight < minHeight ? minHeight : finalHeight;\n};\n\nexport const calculatePadding = (props: PaddingProps): number => {\n  const { height, multiline = false } = props;\n\n  let result = 0;\n\n  if (multiline) {\n    if (height && multiline) {\n      result = calculateTextAreaPadding(props);\n    } else {\n      result = calculateInputPadding(props);\n    }\n  }\n\n  return Math.max(0, result);\n};\n\nconst calculateTextAreaPadding = (props: PaddingProps) => {\n  const { dense } = props;\n\n  return dense ? 10 : 20;\n};\n\nconst calculateInputPadding = ({\n  topPosition,\n  fontSize,\n  multiline,\n  scale,\n  dense,\n  offset,\n  isAndroid,\n}: PaddingProps): number => {\n  const refFontSize = scale * fontSize;\n  let result = Math.floor(topPosition / 2);\n\n  result =\n    result +\n    Math.floor((refFontSize - fontSize) / 2) -\n    (scale < 1 ? offset / 2 : 0);\n\n  if (multiline && isAndroid)\n    result = Math.min(dense ? offset / 2 : offset, result);\n\n  return result;\n};\n\nexport const adjustPaddingOut = ({\n  pad,\n  multiline,\n  label,\n  scale,\n  height,\n  fontSize,\n  lineHeight,\n  dense,\n  offset,\n  isAndroid,\n}: AdjProps): Padding => {\n  const fontHeight = lineHeight ?? fontSize;\n  const refFontHeight = scale * fontSize;\n  let result = pad;\n\n  if (height && !multiline) {\n    return {\n      paddingTop: Math.max(0, (height - fontHeight) / 2),\n      paddingBottom: Math.max(0, (height - fontHeight) / 2),\n    };\n  }\n  if (!isAndroid && multiline) {\n    if (dense) {\n      if (label) {\n        result += scale < 1 ? Math.min(offset, (refFontHeight / 2) * scale) : 0;\n      } else {\n        result += 0;\n      }\n    }\n    if (!dense) {\n      if (label) {\n        result +=\n          scale < 1\n            ? Math.min(offset, refFontHeight * scale)\n            : Math.min(offset / 2, refFontHeight * scale);\n      } else {\n        result += scale < 1 ? Math.min(offset / 2, refFontHeight * scale) : 0;\n      }\n    }\n    result = Math.floor(result);\n  }\n  return { paddingTop: result, paddingBottom: result };\n};\n\nexport const adjustPaddingFlat = ({\n  pad,\n  scale,\n  multiline,\n  label,\n  height,\n  offset,\n  dense,\n  fontSize,\n  isAndroid,\n  styles,\n}: AdjProps): Padding => {\n  let result = pad;\n  let topResult = result;\n  let bottomResult = result;\n  const { paddingTop, paddingBottom } = styles;\n  const refFontSize = scale * fontSize;\n\n  if (!multiline) {\n    // do not modify padding if input is not multiline\n    if (label) {\n      // return const style for flat input with label\n      return { paddingTop, paddingBottom };\n    }\n    // return pad for flat input without label\n    return { paddingTop: result, paddingBottom: result };\n  }\n\n  if (label) {\n    // add paddings passed from styles\n    topResult = paddingTop;\n    bottomResult = paddingBottom;\n\n    // adjust top padding for iOS\n    if (!isAndroid) {\n      if (dense) {\n        topResult +=\n          scale < 1\n            ? Math.min(result, refFontSize * scale) - result / 2\n            : Math.min(result, refFontSize * scale) - result / 2;\n      }\n      if (!dense) {\n        topResult +=\n          scale < 1\n            ? Math.min(offset / 2, refFontSize * scale)\n            : Math.min(result, refFontSize * scale) - offset / 2;\n      }\n    }\n    topResult = Math.floor(topResult);\n  } else {\n    if (height) {\n      // center text when height is passed\n      return {\n        paddingTop: Math.max(0, (height - fontSize) / 2),\n        paddingBottom: Math.max(0, (height - fontSize) / 2),\n      };\n    }\n    // adjust paddings for iOS if no label\n    if (!isAndroid) {\n      if (dense) {\n        result +=\n          scale < 1\n            ? Math.min(offset / 2, (fontSize / 2) * scale)\n            : Math.min(offset / 2, scale);\n      }\n      if (!dense) {\n        result +=\n          scale < 1\n            ? Math.min(offset, fontSize * scale)\n            : Math.min(fontSize, (offset / 2) * scale);\n      }\n\n      result = Math.floor(result);\n      topResult = result;\n      bottomResult = result;\n    }\n  }\n\n  return {\n    paddingTop: Math.max(0, topResult),\n    paddingBottom: Math.max(0, bottomResult),\n  };\n};\n\nexport const interpolatePlaceholder = (\n  labeled: Animated.Value,\n  hasActiveOutline: boolean | undefined\n) =>\n  labeled.interpolate({\n    inputRange: [0, 1],\n    outputRange: [hasActiveOutline ? 0 : 1, 1],\n  });\n\nexport function calculateFlatAffixTopPosition({\n  height,\n  paddingTop,\n  paddingBottom,\n  affixHeight,\n}: {\n  height: number;\n  paddingTop: number;\n  paddingBottom: number;\n  affixHeight: number;\n}): number {\n  const inputHeightWithoutPadding = height - paddingTop - paddingBottom;\n\n  const halfOfTheInputHeightDecreasedByAffixHeight =\n    (inputHeightWithoutPadding - affixHeight) / 2;\n\n  return paddingTop + halfOfTheInputHeightDecreasedByAffixHeight;\n}\n\nexport function calculateOutlinedIconAndAffixTopPosition({\n  height,\n  affixHeight,\n  labelYOffset,\n}: {\n  height: number;\n  affixHeight: number;\n  labelYOffset: number;\n}): number {\n  return (height - affixHeight + labelYOffset) / 2;\n}\n\nexport const calculateFlatInputHorizontalPadding = ({\n  adornmentConfig,\n}: {\n  adornmentConfig: AdornmentConfig[];\n}) => {\n  let paddingLeft = LABEL_PADDING_HORIZONTAL;\n  let paddingRight = LABEL_PADDING_HORIZONTAL;\n\n  adornmentConfig.forEach(({ type, side }) => {\n    if (type === AdornmentType.Icon && side === AdornmentSide.Left) {\n      paddingLeft = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n    } else if (side === AdornmentSide.Right) {\n      if (type === AdornmentType.Affix) {\n        paddingRight = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n      } else if (type === AdornmentType.Icon) {\n        paddingRight = ADORNMENT_SIZE + ADORNMENT_OFFSET + FLAT_INPUT_OFFSET;\n      }\n    }\n  });\n\n  return { paddingLeft, paddingRight };\n};\n"]}