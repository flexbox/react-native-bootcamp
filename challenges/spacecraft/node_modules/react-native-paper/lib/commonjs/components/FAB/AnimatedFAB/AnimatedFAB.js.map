{"version":3,"sources":["AnimatedFAB.tsx"],"names":["SIZE","BORDER_RADIUS","SCALE","AnimatedFAB","icon","label","accessibilityLabel","accessibilityState","color","customColor","disabled","onPress","onLongPress","theme","style","visible","uppercase","testID","animateFrom","extended","iconMode","rest","isIOS","Platform","OS","isAnimatedFromRight","isIconStatic","isRTL","I18nManager","current","visibility","React","useRef","Animated","Value","animFAB","scale","animation","textWidth","setTextWidth","useState","textHeight","setTextHeight","useEffect","timing","toValue","duration","useNativeDriver","start","disabledColor","dark","white","black","alpha","rgb","string","backgroundColor","colors","accent","StyleSheet","flatten","foregroundColor","isLight","rippleColor","extendedWidth","distance","easing","Easing","linear","onTextLayout","nativeEvent","currentWidth","Math","ceil","lines","width","currentHeight","height","propForDirection","right","reverse","combinedStyles","opacity","transform","elevation","styles","container","scaleY","interpolate","inputRange","outputRange","standard","absoluteFill","shadowWrapper","shadow","borderRadius","innerWrapper","touchable","iconWrapper","undefined","minWidth","top","translateX","uppercaseLabel","fonts","medium","textPlaceholderContainer","create","position","flexDirection","overflow","alignItems","justifyContent","textTransform"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  Easing,\n  ScrollView,\n  Text,\n  Platform,\n  I18nManager,\n} from 'react-native';\nimport Surface from '../../Surface';\nimport Icon from '../../Icon';\nimport TouchableRipple from '../../TouchableRipple/TouchableRipple';\nimport type { $RemoveChildren } from '../../../types';\nimport type { IconSource } from '../../Icon';\nimport { withTheme } from '../../../core/theming';\nimport type {\n  AccessibilityState,\n  NativeSyntheticEvent,\n  TextLayoutEventData,\n} from 'react-native';\nimport { white, black } from '../../../styles/colors';\nimport AnimatedText from '../../Typography/AnimatedText';\nimport { getCombinedStyles } from './utils';\n\nexport type AnimatedFABIconMode = 'static' | 'dynamic';\nexport type AnimatedFABAnimateFrom = 'left' | 'right';\n\ntype Props = $RemoveChildren<typeof Surface> & {\n  /**\n   * Icon to display for the `FAB`.\n   */\n  icon: IconSource;\n  /**\n   * Label for extended `FAB`.\n   */\n  label: string;\n  /**\n   * Make the label text uppercased.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the FAB. This is read by the screen reader when the user taps the FAB.\n   * Uses `label` by default if specified.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility state for the FAB. This is read by the screen reader when the user taps the FAB.\n   */\n  accessibilityState?: AccessibilityState;\n  /**\n   * Custom color for the icon and label of the `FAB`.\n   */\n  color?: string;\n  /**\n   * Whether `FAB` is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether `FAB` is currently visible.\n   */\n  visible?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Whether icon should be translated to the end of extended `FAB` or be static and stay in the same place. The default value is `dynamic`.\n   */\n  iconMode?: AnimatedFABIconMode;\n  /**\n   * Indicates from which direction animation should be performed. The default value is `right`.\n   */\n  animateFrom?: AnimatedFABAnimateFrom;\n  /**\n   * Whether `FAB` should start animation to extend.\n   */\n  extended: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  testID?: string;\n};\n\nconst SIZE = 56;\nconst BORDER_RADIUS = SIZE / 2;\nconst SCALE = 0.9;\n\nconst AnimatedFAB = ({\n  icon,\n  label,\n  accessibilityLabel = label,\n  accessibilityState,\n  color: customColor,\n  disabled,\n  onPress,\n  onLongPress,\n  theme,\n  style,\n  visible = true,\n  uppercase = true,\n  testID,\n  animateFrom = 'right',\n  extended = false,\n  iconMode = 'dynamic',\n  ...rest\n}: Props) => {\n  const isIOS = Platform.OS === 'ios';\n  const isAnimatedFromRight = animateFrom === 'right';\n  const isIconStatic = iconMode === 'static';\n  const { isRTL } = I18nManager;\n  const { current: visibility } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const { current: animFAB } = React.useRef<Animated.Value>(\n    new Animated.Value(0)\n  );\n  const { scale } = theme.animation;\n\n  const [textWidth, setTextWidth] = React.useState<number>(0);\n  const [textHeight, setTextHeight] = React.useState<number>(0);\n\n  React.useEffect(() => {\n    if (visible) {\n      Animated.timing(visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.timing(visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, visibility]);\n\n  const disabledColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  const { backgroundColor = disabled ? disabledColor : theme.colors.accent } =\n    StyleSheet.flatten<ViewStyle>(style) || {};\n\n  let foregroundColor: string;\n\n  if (typeof customColor !== 'undefined') {\n    foregroundColor = customColor;\n  } else if (disabled) {\n    foregroundColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  } else {\n    foregroundColor = !color(backgroundColor as string).isLight()\n      ? white\n      : 'rgba(0, 0, 0, .54)';\n  }\n\n  const rippleColor = color(foregroundColor).alpha(0.32).rgb().string();\n\n  const extendedWidth = textWidth + 1.5 * SIZE;\n\n  const distance = isAnimatedFromRight\n    ? -textWidth - BORDER_RADIUS\n    : textWidth + BORDER_RADIUS;\n\n  React.useEffect(() => {\n    Animated.timing(animFAB, {\n      toValue: !extended ? 0 : distance,\n      duration: 150 * scale,\n      useNativeDriver: true,\n      easing: Easing.linear,\n    }).start();\n  }, [animFAB, scale, distance, extended]);\n\n  const onTextLayout = ({\n    nativeEvent,\n  }: NativeSyntheticEvent<TextLayoutEventData>) => {\n    const currentWidth = Math.ceil(nativeEvent.lines[0].width);\n    const currentHeight = Math.ceil(nativeEvent.lines[0].height);\n\n    if (currentWidth !== textWidth || currentHeight !== textHeight) {\n      setTextHeight(currentHeight);\n\n      if (isIOS) {\n        return setTextWidth(currentWidth - 12);\n      }\n\n      setTextWidth(currentWidth);\n    }\n  };\n\n  const propForDirection = <T,>(right: T[]): T[] => {\n    if (isAnimatedFromRight) {\n      return right;\n    }\n\n    return right.reverse();\n  };\n\n  const combinedStyles = getCombinedStyles({\n    isAnimatedFromRight,\n    isIconStatic,\n    distance,\n    animFAB,\n  });\n\n  return (\n    <Surface\n      {...rest}\n      style={\n        [\n          {\n            opacity: visibility,\n            transform: [\n              {\n                scale: visibility,\n              },\n            ],\n            elevation: isIOS ? 6 : 0,\n          },\n          styles.container,\n          disabled && styles.disabled,\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n    >\n      <Animated.View\n        style={[\n          {\n            transform: [\n              {\n                scaleY: animFAB.interpolate({\n                  inputRange: propForDirection([distance, 0]),\n                  outputRange: propForDirection([SCALE, 1]),\n                }),\n              },\n            ],\n          },\n          styles.standard,\n        ]}\n      >\n        <View style={[StyleSheet.absoluteFill, styles.shadowWrapper]}>\n          <Animated.View\n            pointerEvents=\"none\"\n            style={[\n              StyleSheet.absoluteFill,\n              styles.shadow,\n              {\n                width: extendedWidth,\n                opacity: animFAB.interpolate({\n                  inputRange: propForDirection([distance, 0.9 * distance, 0]),\n                  outputRange: propForDirection([1, 0.15, 0]),\n                }),\n              },\n            ]}\n          />\n          <Animated.View\n            pointerEvents=\"none\"\n            style={[\n              StyleSheet.absoluteFill,\n              styles.shadow,\n              {\n                opacity: animFAB.interpolate({\n                  inputRange: propForDirection([distance, 0.9 * distance, 0]),\n                  outputRange: propForDirection([0, 0.85, 1]),\n                }),\n                width: SIZE,\n                borderRadius: animFAB.interpolate({\n                  inputRange: propForDirection([distance, 0]),\n                  outputRange: propForDirection([\n                    SIZE / (extendedWidth / SIZE),\n                    BORDER_RADIUS,\n                  ]),\n                }),\n              },\n              combinedStyles.absoluteFill,\n            ]}\n          />\n        </View>\n        <Animated.View pointerEvents=\"box-none\" style={[styles.innerWrapper]}>\n          <Animated.View\n            style={[\n              styles.standard,\n              {\n                width: extendedWidth,\n                backgroundColor,\n              },\n              combinedStyles.innerWrapper,\n            ]}\n          >\n            <TouchableRipple\n              borderless\n              onPress={onPress}\n              onLongPress={onLongPress}\n              rippleColor={rippleColor}\n              disabled={disabled}\n              accessibilityLabel={accessibilityLabel}\n              // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n              accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n              accessibilityComponentType=\"button\"\n              accessibilityRole=\"button\"\n              accessibilityState={{ ...accessibilityState, disabled }}\n              testID={testID}\n              style={styles.touchable}\n            >\n              <View\n                style={[\n                  styles.standard,\n                  {\n                    width: extendedWidth,\n                  },\n                ]}\n              />\n            </TouchableRipple>\n          </Animated.View>\n        </Animated.View>\n      </Animated.View>\n\n      <Animated.View\n        style={[styles.iconWrapper, combinedStyles.iconWrapper]}\n        pointerEvents=\"none\"\n      >\n        <Icon source={icon} size={24} color={foregroundColor} />\n      </Animated.View>\n\n      <View pointerEvents=\"none\">\n        <AnimatedText\n          numberOfLines={1}\n          onTextLayout={isIOS ? onTextLayout : undefined}\n          ellipsizeMode={'tail'}\n          style={[\n            {\n              [isAnimatedFromRight || isRTL ? 'right' : 'left']: isIconStatic\n                ? isIOS\n                  ? SIZE - 10\n                  : SIZE - 12\n                : BORDER_RADIUS,\n            },\n            {\n              minWidth: textWidth,\n              top: -BORDER_RADIUS - textHeight / 2,\n              opacity: animFAB.interpolate({\n                inputRange: propForDirection([distance, 0.7 * distance, 0]),\n                outputRange: propForDirection([1, 0, 0]),\n              }),\n              transform: [\n                {\n                  translateX: animFAB.interpolate({\n                    inputRange: propForDirection([distance, 0]),\n                    outputRange: propForDirection([0, SIZE]),\n                  }),\n                },\n              ],\n            },\n            styles.label,\n            uppercase && styles.uppercaseLabel,\n            {\n              color: foregroundColor,\n              ...theme.fonts.medium,\n            },\n          ]}\n        >\n          {label}\n        </AnimatedText>\n      </View>\n\n      {!isIOS && (\n        // Method `onTextLayout` on Android returns sizes of text visible on the screen,\n        // however during render the text in `FAB` isn't fully visible. In order to get\n        // proper text measurements there is a need to additionaly render that text, but\n        // wrapped in absolutely positioned `ScrollView` which height is 0.\n        <ScrollView style={styles.textPlaceholderContainer}>\n          <Text onTextLayout={onTextLayout}>{label}</Text>\n        </ScrollView>\n      )}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  standard: {\n    height: SIZE,\n    borderRadius: BORDER_RADIUS,\n  },\n  disabled: {\n    elevation: 0,\n  },\n  container: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n    borderRadius: BORDER_RADIUS,\n  },\n  innerWrapper: {\n    flexDirection: 'row',\n    overflow: 'hidden',\n    borderRadius: BORDER_RADIUS,\n  },\n  shadowWrapper: {\n    elevation: 0,\n  },\n  shadow: {\n    elevation: 6,\n    borderRadius: BORDER_RADIUS,\n  },\n  touchable: {\n    borderRadius: BORDER_RADIUS,\n  },\n  iconWrapper: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    position: 'absolute',\n    height: SIZE,\n    width: SIZE,\n  },\n  label: {\n    position: 'absolute',\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n  textPlaceholderContainer: {\n    height: 0,\n    position: 'absolute',\n  },\n});\n\nexport default withTheme(AnimatedFAB);\n"]}