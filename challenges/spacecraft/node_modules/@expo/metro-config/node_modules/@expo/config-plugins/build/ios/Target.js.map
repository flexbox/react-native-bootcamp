{"version":3,"sources":["../../src/ios/Target.ts"],"names":["TargetType","getXCBuildConfigurationFromPbxproj","project","targetName","buildConfiguration","nativeTarget","findNativeTargetByName","findFirstNativeTarget","xcBuildConfiguration","configurationListId","buildConfigurationList","findApplicationTargetWithDependenciesAsync","projectRoot","scheme","applicationTargetName","applicationTarget","dependencies","map","value","target","targetId","getPBXGroupByKeyAndType","findNativeTargetById","type","isTargetOfType","EXTENSION","OTHER","name","APPLICATION","targetType","productType","getNativeTargets","section","pbxNativeTargetSection","Object","entries","filter","isNotComment","findSignableTargets","targets","applicationTargets","WATCH","STICKER_PACK_EXTENSION","length","Error","nativeTargets","nativeTargetEntry","find","i","key"],"mappings":"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","sourcesContent":["import { PBXNativeTarget, PBXTargetDependency, XCBuildConfiguration, XcodeProject } from 'xcode';\n\nimport { getApplicationTargetNameForSchemeAsync } from './BuildScheme';\nimport {\n  getBuildConfigurationForListIdAndName,\n  getPbxproj,\n  isNotComment,\n  NativeTargetSectionEntry,\n} from './utils/Xcodeproj';\n\nexport enum TargetType {\n  APPLICATION = 'com.apple.product-type.application',\n  EXTENSION = 'com.apple.product-type.app-extension',\n  WATCH = 'com.apple.product-type.application.watchapp',\n  STICKER_PACK_EXTENSION = 'com.apple.product-type.app-extension.messages-sticker-pack',\n  OTHER = 'other',\n}\n\nexport interface Target {\n  name: string;\n  type: TargetType;\n  dependencies?: Target[];\n}\n\nexport function getXCBuildConfigurationFromPbxproj(\n  project: XcodeProject,\n  {\n    targetName,\n    buildConfiguration = 'Release',\n  }: { targetName?: string; buildConfiguration?: string } = {}\n): XCBuildConfiguration | null {\n  const [, nativeTarget] = targetName\n    ? findNativeTargetByName(project, targetName)\n    : findFirstNativeTarget(project);\n  const [, xcBuildConfiguration] = getBuildConfigurationForListIdAndName(project, {\n    configurationListId: nativeTarget.buildConfigurationList,\n    buildConfiguration,\n  });\n  return xcBuildConfiguration ?? null;\n}\n\nexport async function findApplicationTargetWithDependenciesAsync(\n  projectRoot: string,\n  scheme: string\n): Promise<Target> {\n  const applicationTargetName = await getApplicationTargetNameForSchemeAsync(projectRoot, scheme);\n  const project = getPbxproj(projectRoot);\n  const [, applicationTarget] = findNativeTargetByName(project, applicationTargetName);\n\n  const dependencies: Target[] = applicationTarget.dependencies.map(({ value }) => {\n    const { target: targetId } = project.getPBXGroupByKeyAndType(\n      value,\n      'PBXTargetDependency'\n    ) as PBXTargetDependency;\n\n    const [, target] = findNativeTargetById(project, targetId);\n\n    const type = isTargetOfType(target, TargetType.EXTENSION)\n      ? TargetType.EXTENSION\n      : TargetType.OTHER;\n    return {\n      name: target.name,\n      type,\n    };\n  });\n\n  return {\n    name: applicationTarget.name,\n    type: TargetType.APPLICATION,\n    dependencies,\n  };\n}\n\nexport function isTargetOfType(target: PBXNativeTarget, targetType: TargetType): boolean {\n  return target.productType === targetType || target.productType === `\"${targetType}\"`;\n}\n\nexport function getNativeTargets(project: XcodeProject): NativeTargetSectionEntry[] {\n  const section = project.pbxNativeTargetSection();\n  return Object.entries(section).filter(isNotComment);\n}\n\nexport function findSignableTargets(project: XcodeProject): NativeTargetSectionEntry[] {\n  const targets = getNativeTargets(project);\n  const applicationTargets = targets.filter(\n    ([, target]) =>\n      isTargetOfType(target, TargetType.APPLICATION) ||\n      isTargetOfType(target, TargetType.EXTENSION) ||\n      isTargetOfType(target, TargetType.WATCH) ||\n      isTargetOfType(target, TargetType.STICKER_PACK_EXTENSION)\n  );\n  if (applicationTargets.length === 0) {\n    throw new Error(`Could not find any signable targets in project.pbxproj`);\n  }\n  return applicationTargets;\n}\n\nexport function findFirstNativeTarget(project: XcodeProject): NativeTargetSectionEntry {\n  const targets = getNativeTargets(project);\n  const applicationTargets = targets.filter(([, target]) =>\n    isTargetOfType(target, TargetType.APPLICATION)\n  );\n  if (applicationTargets.length === 0) {\n    throw new Error(`Could not find any application target in project.pbxproj`);\n  }\n  return applicationTargets[0];\n}\n\nexport function findNativeTargetByName(\n  project: XcodeProject,\n  targetName: string\n): NativeTargetSectionEntry {\n  const nativeTargets = getNativeTargets(project);\n  const nativeTargetEntry = nativeTargets.find(\n    ([, i]) => i.name === targetName || i.name === `\"${targetName}\"`\n  );\n  if (!nativeTargetEntry) {\n    throw new Error(`Could not find target '${targetName}' in project.pbxproj`);\n  }\n  return nativeTargetEntry;\n}\n\nfunction findNativeTargetById(project: XcodeProject, targetId: string): NativeTargetSectionEntry {\n  const nativeTargets = getNativeTargets(project);\n  const nativeTargetEntry = nativeTargets.find(([key]) => key === targetId);\n  if (!nativeTargetEntry) {\n    throw new Error(`Could not find target with id '${targetId}' in project.pbxproj`);\n  }\n  return nativeTargetEntry;\n}\n"],"file":"Target.js"}