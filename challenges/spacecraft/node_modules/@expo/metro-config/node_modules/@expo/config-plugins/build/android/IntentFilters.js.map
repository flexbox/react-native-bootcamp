{"version":3,"sources":["../../src/android/IntentFilters.ts"],"names":["withAndroidIntentFilters","setAndroidIntentFilters","getIntentFilters","config","android","intentFilters","androidManifest","length","intentFiltersXML","renderIntentFilters","join","parser","Parser","intentFiltersJSON","parseStringPromise","mainActivity","concat","map","intentFilter","autoVerify","renderIntentFilterData","data","action","renderIntentFilterCategory","category","renderIntentFilterDatumEntries","datum","entries","key","value","Object","push","Array","isArray","filter","Boolean","cat"],"mappings":";;;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAEO,MAAMA,wBAAwB,GAAG,mDACtCC,uBADsC,EAEtC,0BAFsC,CAAjC;;;AAKA,SAASC,gBAAT,CAA0BC,MAA1B,EAAqF;AAAA;;AAC1F,qDAAOA,MAAM,CAACC,OAAd,oDAAO,gBAAgBC,aAAvB,yEAAwC,EAAxC;AACD;;AAEM,eAAeJ,uBAAf,CACLE,MADK,EAELG,eAFK,EAGqB;AAAA;;AAC1B,QAAMD,aAAa,GAAGH,gBAAgB,CAACC,MAAD,CAAtC;;AACA,MAAI,CAACE,aAAa,CAACE,MAAnB,EAA2B;AACzB,WAAOD,eAAP;AACD;;AAED,QAAME,gBAAgB,GAAGC,mBAAmB,CAACJ,aAAD,CAAnB,CAAmCK,IAAnC,CAAwC,EAAxC,CAAzB;AACA,QAAMC,MAAM,GAAG,KAAIC,gBAAJ,GAAf;AACA,QAAMC,iBAAiB,GAAG,MAAMF,MAAM,CAACG,kBAAP,CAA0BN,gBAA1B,CAAhC;AAEA,QAAMO,YAAY,GAAG,wCAAuBT,eAAvB,CAArB;AAEAS,EAAAA,YAAY,CAAC,eAAD,CAAZ,2BAAgCA,YAAY,CAAC,eAAD,CAA5C,yDAAgC,qBAA+BC,MAA/B,CAC9BH,iBAAiB,CAAC,eAAD,CADa,CAAhC;AAIA,SAAOP,eAAP;AACD;;AAEc,SAASG,mBAAT,CAA6BJ,aAA7B,EAA4E;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAOA,aAAa,CAACY,GAAd,CAAkBC,YAAY,IAAI;AACvC,UAAMC,UAAU,GAAGD,YAAY,CAACC,UAAb,GAA0B,4BAA1B,GAAyD,EAA5E;AAEA,WAAQ,iBAAgBA,UAAW;AACvC,QAAQC,sBAAsB,CAACF,YAAY,CAACG,IAAd,CAAoB;AAClD,oDAAoDH,YAAY,CAACI,MAAO;AACxE,QAAQC,0BAA0B,CAACL,YAAY,CAACM,QAAd,CAAwB;AAC1D,qBAJI;AAKD,GARM,CAAP;AASD;;AAED,SAASC,8BAAT,CAAwCC,KAA+B,GAAG,EAA1E,EAAsF;AACpF,QAAMC,OAAiB,GAAG,EAA1B;;AACA,OAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2BC,MAAM,CAACH,OAAP,CAAeD,KAAf,CAA3B,EAAkD;AAChDC,IAAAA,OAAO,CAACI,IAAR,CAAc,WAAUH,GAAI,KAAIC,KAAM,GAAtC;AACD;;AACD,SAAOF,OAAO,CAACjB,IAAR,CAAa,GAAb,CAAP;AACD;;AAED,SAASU,sBAAT,CACEC,IADF,EAEU;AACR,SAAO,CAACW,KAAK,CAACC,OAAN,CAAcZ,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAA9B,EACJa,MADI,CACGC,OADH,EAEJlB,GAFI,CAEAS,KAAK,IAAK,SAAQD,8BAA8B,CAACC,KAAD,CAAQ,IAFxD,EAGJhB,IAHI,CAGC,IAHD,CAAP;AAID;;AAED,SAASa,0BAAT,CAAoCC,QAApC,EAA0E;AACxE,SAAO,CAACQ,KAAK,CAACC,OAAN,CAAcT,QAAd,IAA0BA,QAA1B,GAAqC,CAACA,QAAD,CAAtC,EACJU,MADI,CACGC,OADH,EAEJlB,GAFI,CAEAmB,GAAG,IAAK,mDAAkDA,GAAI,KAF9D,EAGJ1B,IAHI,CAGC,IAHD,CAAP;AAID","sourcesContent":["import { Android, AndroidIntentFiltersData, ExpoConfig } from '@expo/config-types';\nimport { Parser } from 'xml2js';\n\nimport { createAndroidManifestPlugin } from '../plugins/android-plugins';\nimport { AndroidManifest, getMainActivityOrThrow } from './Manifest';\n\ntype AndroidIntentFilters = NonNullable<Android['intentFilters']>;\n// TODO: make it so intent filters aren't written again if you run the command again\n\nexport const withAndroidIntentFilters = createAndroidManifestPlugin(\n  setAndroidIntentFilters,\n  'withAndroidIntentFilters'\n);\n\nexport function getIntentFilters(config: Pick<ExpoConfig, 'android'>): AndroidIntentFilters {\n  return config.android?.intentFilters ?? [];\n}\n\nexport async function setAndroidIntentFilters(\n  config: Pick<ExpoConfig, 'android'>,\n  androidManifest: AndroidManifest\n): Promise<AndroidManifest> {\n  const intentFilters = getIntentFilters(config);\n  if (!intentFilters.length) {\n    return androidManifest;\n  }\n\n  const intentFiltersXML = renderIntentFilters(intentFilters).join('');\n  const parser = new Parser();\n  const intentFiltersJSON = await parser.parseStringPromise(intentFiltersXML);\n\n  const mainActivity = getMainActivityOrThrow(androidManifest);\n\n  mainActivity['intent-filter'] = mainActivity['intent-filter']?.concat(\n    intentFiltersJSON['intent-filter']\n  );\n\n  return androidManifest;\n}\n\nexport default function renderIntentFilters(intentFilters: AndroidIntentFilters): string[] {\n  // returns an array of <intent-filter> tags:\n  // [\n  //   `<intent-filter>\n  //     <data android:scheme=\"exp\"/>\n  //     <data android:scheme=\"exps\"/>\n  //\n  //     <action android:name=\"android.intent.action.VIEW\"/>\n  //\n  //     <category android:name=\"android.intent.category.DEFAULT\"/>\n  //     <category android:name=\"android.intent.category.BROWSABLE\"/>\n  //   </intent-filter>`,\n  //   ...\n  // ]\n  return intentFilters.map(intentFilter => {\n    const autoVerify = intentFilter.autoVerify ? ' android:autoVerify=\"true\"' : '';\n\n    return `<intent-filter${autoVerify}>\n      ${renderIntentFilterData(intentFilter.data)}\n      <action android:name=\"android.intent.action.${intentFilter.action}\"/>\n      ${renderIntentFilterCategory(intentFilter.category)}\n    </intent-filter>`;\n  });\n}\n\nfunction renderIntentFilterDatumEntries(datum: AndroidIntentFiltersData = {}): string {\n  const entries: string[] = [];\n  for (const [key, value] of Object.entries(datum)) {\n    entries.push(`android:${key}=\"${value}\"`);\n  }\n  return entries.join(' ');\n}\n\nfunction renderIntentFilterData(\n  data?: AndroidIntentFiltersData | AndroidIntentFiltersData[]\n): string {\n  return (Array.isArray(data) ? data : [data])\n    .filter(Boolean)\n    .map(datum => `<data ${renderIntentFilterDatumEntries(datum)}/>`)\n    .join('\\n');\n}\n\nfunction renderIntentFilterCategory(category?: string | string[]): string {\n  return (Array.isArray(category) ? category : [category])\n    .filter(Boolean)\n    .map(cat => `<category android:name=\"android.intent.category.${cat}\"/>`)\n    .join('\\n');\n}\n"],"file":"IntentFilters.js"}