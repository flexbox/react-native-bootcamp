{"version":3,"sources":["../../src/utils/sortObject.ts"],"names":["sortObject","obj","compareFn","Object","keys","sort","reduce","acc","key","sortObjWithOrder","order","sorted","sortWithOrder","groupOrder","Set","concat","length","shift","index","indexOf","item","splice","push","reverseSortString","a","b"],"mappings":";;;;;;;;;;AAAO,SAASA,UAAT,CACLC,GADK,EAELC,SAFK,EAGF;AACH,SAAOC,MAAM,CAACC,IAAP,CAAYH,GAAZ,EACJI,IADI,CACCH,SADD,EAEJI,MAFI,CAGH,CAACC,GAAD,EAAMC,GAAN,MAAe,EACb,GAAGD,GADU;AAEb,KAACC,GAAD,GAAOP,GAAG,CAACO,GAAD;AAFG,GAAf,CAHG,EAOH,EAPG,CAAP;AASD;;AAEM,SAASC,gBAAT,CACLR,GADK,EAELS,KAFK,EAGF;AACH,QAAMC,MAAM,GAAGC,aAAa,CAACT,MAAM,CAACC,IAAP,CAAYH,GAAZ,CAAD,EAAmBS,KAAnB,CAA5B;AAEA,SAAOC,MAAM,CAACL,MAAP,CACL,CAACC,GAAD,EAAMC,GAAN,MAAe,EACb,GAAGD,GADU;AAEb,KAACC,GAAD,GAAOP,GAAG,CAACO,GAAD;AAFG,GAAf,CADK,EAKL,EALK,CAAP;AAOD;;AAEM,SAASI,aAAT,CAAuBX,GAAvB,EAAsCS,KAAtC,EAAiE;AACtE,QAAMG,UAAU,GAAG,CAAC,GAAG,IAAIC,GAAJ,CAAQJ,KAAK,CAACK,MAAN,CAAad,GAAb,CAAR,CAAJ,CAAnB;AACA,QAAMU,MAAgB,GAAG,EAAzB;;AAEA,SAAOE,UAAU,CAACG,MAAlB,EAA0B;AACxB,UAAMR,GAAG,GAAGK,UAAU,CAACI,KAAX,EAAZ;AACA,UAAMC,KAAK,GAAGjB,GAAG,CAACkB,OAAJ,CAAYX,GAAZ,CAAd;;AACA,QAAIU,KAAK,GAAG,CAAC,CAAb,EAAgB;AACd,YAAM,CAACE,IAAD,IAASnB,GAAG,CAACoB,MAAJ,CAAWH,KAAX,EAAkB,CAAlB,CAAf;AACAP,MAAAA,MAAM,CAACW,IAAP,CAAYF,IAAZ;AACD;AACF;;AAED,SAAOT,MAAP;AACD;;AAEM,MAAMY,iBAAiB,GAAG,CAACC,CAAD,EAAYC,CAAZ,KAA0B;AACzD,MAAID,CAAC,GAAGC,CAAR,EAAW,OAAO,CAAP;AACX,MAAID,CAAC,GAAGC,CAAR,EAAW,OAAO,CAAC,CAAR;AACX,SAAO,CAAP;AACD,CAJM","sourcesContent":["export function sortObject<T extends Record<string, any> = Record<string, any>>(\n  obj: T,\n  compareFn?: (a: string, b: string) => number\n): T {\n  return Object.keys(obj)\n    .sort(compareFn)\n    .reduce(\n      (acc, key) => ({\n        ...acc,\n        [key]: obj[key],\n      }),\n      {}\n    ) as T;\n}\n\nexport function sortObjWithOrder<T extends Record<string, any> = Record<string, any>>(\n  obj: T,\n  order: string[]\n): T {\n  const sorted = sortWithOrder(Object.keys(obj), order);\n\n  return sorted.reduce(\n    (acc, key) => ({\n      ...acc,\n      [key]: obj[key],\n    }),\n    {}\n  ) as T;\n}\n\nexport function sortWithOrder(obj: string[], order: string[]): string[] {\n  const groupOrder = [...new Set(order.concat(obj))];\n  const sorted: string[] = [];\n\n  while (groupOrder.length) {\n    const key = groupOrder.shift()!;\n    const index = obj.indexOf(key);\n    if (index > -1) {\n      const [item] = obj.splice(index, 1);\n      sorted.push(item);\n    }\n  }\n\n  return sorted;\n}\n\nexport const reverseSortString = (a: string, b: string) => {\n  if (a < b) return 1;\n  if (a > b) return -1;\n  return 0;\n};\n"],"file":"sortObject.js"}