{"version":3,"sources":["../../src/android/UserInterfaceStyle.ts"],"names":["CONFIG_CHANGES_ATTRIBUTE","ON_CONFIGURATION_CHANGED","withUiModeManifest","setUiModeAndroidManifest","withUiModeMainActivity","config","modResults","language","contents","addOnConfigurationChangedMainActivity","getUserInterfaceStyle","android","userInterfaceStyle","androidManifest","mainActivity","$","match","length","MainActivityWithImports","pattern","RegExp","replace"],"mappings":";;;;;;;;;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEO,MAAMA,wBAAwB,GAAG,uBAAjC;;AAEA,MAAMC,wBAAwB,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXO;;AAaA,MAAMC,kBAAkB,GAAG,mDAChCC,wBADgC,EAEhC,oBAFgC,CAA3B;;;AAKA,MAAMC,sBAAoC,GAAGC,MAAM,IAAI;AAC5D,SAAO,wCAAiBA,MAAjB,EAAyBA,MAAM,IAAI;AACxC,QAAIA,MAAM,CAACC,UAAP,CAAkBC,QAAlB,KAA+B,MAAnC,EAA2C;AACzCF,MAAAA,MAAM,CAACC,UAAP,CAAkBE,QAAlB,GAA6BC,qCAAqC,CAChEJ,MADgE,EAEhEA,MAAM,CAACC,UAAP,CAAkBE,QAF8C,CAAlE;AAID,KALD,MAKO;AACL,yCACE,4BADF,EAEG,8DAFH;AAID;;AACD,WAAOH,MAAP;AACD,GAbM,CAAP;AAcD,CAfM;;;;AAiBA,SAASK,qBAAT,CACLL,MADK,EAEG;AAAA;;AACR,6DAAOA,MAAM,CAACM,OAAd,oDAAO,gBAAgBC,kBAAvB,yEAA6CP,MAAM,CAACO,kBAApD,uCAA0E,OAA1E;AACD;;AAEM,SAAST,wBAAT,CACLE,MADK,EAELQ,eAFK,EAGL;AACA,QAAMD,kBAAkB,GAAGF,qBAAqB,CAACL,MAAD,CAAhD,CADA,CAEA;;AACA,MAAI,CAACO,kBAAL,EAAyB;AACvB,WAAOC,eAAP;AACD;;AAED,QAAMC,YAAY,GAAG,wCAAuBD,eAAvB,CAArB;AACAC,EAAAA,YAAY,CAACC,CAAb,CAAef,wBAAf,IACE,uDADF;AAGA,SAAOa,eAAP;AACD;;AAEM,SAASJ,qCAAT,CACLJ,MADK,EAELS,YAFK,EAGG;AAAA;;AACR,QAAMF,kBAAkB,GAAGF,qBAAqB,CAACL,MAAD,CAAhD;;AACA,MAAI,CAACO,kBAAL,EAAyB;AACvB,WAAOE,YAAP;AACD,GAJO,CAMR;;;AACA,6BAAIA,YAAY,CAACE,KAAb,CAAoB,wBAApB,CAAJ,gDAAI,oBAA8CC,MAAlD,EAA0D;AACxD,WAAOH,YAAP;AACD;;AAED,QAAMI,uBAAuB,GAAG,2BAC9BJ,YAD8B,EAE9B,CAAC,wBAAD,EAA2B,mCAA3B,CAF8B,EAG9B,IAH8B,CAAhC;AAMA,QAAMK,OAAO,GAAG,IAAIC,MAAJ,CAAY,mDAAZ,CAAhB;AACA,SAAOF,uBAAuB,CAACG,OAAxB,CAAgCF,OAAhC,EAAyClB,wBAAzC,CAAP;AACD","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { createAndroidManifestPlugin, withMainActivity } from '../plugins/android-plugins';\nimport { addWarningAndroid } from '../utils/warnings';\nimport { AndroidManifest, getMainActivityOrThrow } from './Manifest';\nimport { addImports } from './codeMod';\n\nexport const CONFIG_CHANGES_ATTRIBUTE = 'android:configChanges';\n\nexport const ON_CONFIGURATION_CHANGED = `\npublic class MainActivity extends ReactActivity {\n\n    // Added automatically by Expo Config\n    @Override\n    public void onConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n        Intent intent = new Intent(\"onConfigurationChanged\");\n        intent.putExtra(\"newConfig\", newConfig);\n        sendBroadcast(intent);\n    }\n`;\n\nexport const withUiModeManifest = createAndroidManifestPlugin(\n  setUiModeAndroidManifest,\n  'withUiModeManifest'\n);\n\nexport const withUiModeMainActivity: ConfigPlugin = config => {\n  return withMainActivity(config, config => {\n    if (config.modResults.language === 'java') {\n      config.modResults.contents = addOnConfigurationChangedMainActivity(\n        config,\n        config.modResults.contents\n      );\n    } else {\n      addWarningAndroid(\n        'android.userInterfaceStyle',\n        `Cannot automatically configure MainActivity if it's not java`\n      );\n    }\n    return config;\n  });\n};\n\nexport function getUserInterfaceStyle(\n  config: Pick<ExpoConfig, 'android' | 'userInterfaceStyle'>\n): string {\n  return config.android?.userInterfaceStyle ?? config.userInterfaceStyle ?? 'light';\n}\n\nexport function setUiModeAndroidManifest(\n  config: Pick<ExpoConfig, 'android' | 'userInterfaceStyle'>,\n  androidManifest: AndroidManifest\n) {\n  const userInterfaceStyle = getUserInterfaceStyle(config);\n  // TODO: Remove this if we decide to remove any uiMode configuration when not specified\n  if (!userInterfaceStyle) {\n    return androidManifest;\n  }\n\n  const mainActivity = getMainActivityOrThrow(androidManifest);\n  mainActivity.$[CONFIG_CHANGES_ATTRIBUTE] =\n    'keyboard|keyboardHidden|orientation|screenSize|uiMode';\n\n  return androidManifest;\n}\n\nexport function addOnConfigurationChangedMainActivity(\n  config: Pick<ExpoConfig, 'android' | 'userInterfaceStyle'>,\n  mainActivity: string\n): string {\n  const userInterfaceStyle = getUserInterfaceStyle(config);\n  if (!userInterfaceStyle) {\n    return mainActivity;\n  }\n\n  // Cruzan: this is not ideal, but I'm not sure of a better way to handle writing to MainActivity.java\n  if (mainActivity.match(`onConfigurationChanged`)?.length) {\n    return mainActivity;\n  }\n\n  const MainActivityWithImports = addImports(\n    mainActivity,\n    ['android.content.Intent', 'android.content.res.Configuration'],\n    true\n  );\n\n  const pattern = new RegExp(`public class MainActivity extends ReactActivity {`);\n  return MainActivityWithImports.replace(pattern, ON_CONFIGURATION_CHANGED);\n}\n"],"file":"UserInterfaceStyle.js"}