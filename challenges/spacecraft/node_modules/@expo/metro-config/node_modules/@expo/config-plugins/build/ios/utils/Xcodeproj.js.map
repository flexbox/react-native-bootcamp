{"version":3,"sources":["../../../src/ios/utils/Xcodeproj.ts"],"names":["getProjectName","projectRoot","sourceRoot","Paths","getSourceRoot","path","basename","resolvePathOrProject","projectRootOrProject","getPbxproj","sanitizedName","name","sanitizedNameForProjects","replace","normalize","getHackyProjectName","config","projectName","createProjectFileForGroup","filepath","group","file","pbxFile","conflictingFile","children","find","child","comment","addResourceFileToGroup","groupName","isBuildFile","project","verbose","addFileToGroupAndLink","addFileToProject","addToPbxFileReferenceSection","addToPbxBuildFileSection","addToPbxResourcesBuildPhase","addBuildSourceFileToGroup","targetUuid","addToPbxSourcesBuildPhase","pbxGroupByPathOrAssert","target","applicationNativeTarget","getTarget","uuid","generateUuid","fileRef","push","value","getApplicationNativeTarget","String","addFramework","framework","splitPath","split","findGroup","undefined","findGroupInsideGroup","foundGroup","getPBXGroupByKey","firstProject","getFirstProject","mainGroup","components","nextGroup","Error","ensureGroupRecursively","hasChild","topMostGroup","pathComponent","pbxCreateGroup","pbxGroupByName","projectPath","getPBXProjectPath","xcode","parseSync","getProductName","productName","targetName","getFirstTarget","firstTarget","getProjectSection","pbxProjectSection","getXCConfigurationListEntries","lists","pbxXCConfigurationList","Object","entries","filter","isNotComment","getBuildConfigurationsForListId","configurationListId","configurationListEntries","configurationList","key","buildConfigurations","map","i","pbxXCBuildConfigurationSection","isBuildConfig","includes","getBuildConfigurationForListIdAndName","buildConfiguration","xcBuildConfigurationEntry","sectionItem","isa","isNotTestHost","buildSettings","TEST_HOST","endsWith","unquote","match"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport assert from 'assert';\nimport path from 'path';\nimport slugify from 'slugify';\nimport xcode, {\n  PBXFile,\n  PBXGroup,\n  PBXNativeTarget,\n  PBXProject,\n  UUID,\n  XCBuildConfiguration,\n  XCConfigurationList,\n  XcodeProject,\n} from 'xcode';\nimport pbxFile from 'xcode/lib/pbxFile';\n\nimport { addWarningIOS } from '../../utils/warnings';\nimport * as Paths from '../Paths';\n\nexport type ProjectSectionEntry = [string, PBXProject];\n\nexport type NativeTargetSection = Record<string, PBXNativeTarget>;\n\nexport type NativeTargetSectionEntry = [string, PBXNativeTarget];\n\nexport type ConfigurationLists = Record<string, XCConfigurationList>;\n\nexport type ConfigurationListEntry = [string, XCConfigurationList];\n\nexport type ConfigurationSectionEntry = [string, XCBuildConfiguration];\n\nexport function getProjectName(projectRoot: string) {\n  const sourceRoot = Paths.getSourceRoot(projectRoot);\n  return path.basename(sourceRoot);\n}\n\nexport function resolvePathOrProject(\n  projectRootOrProject: string | XcodeProject\n): XcodeProject | null {\n  if (typeof projectRootOrProject === 'string') {\n    try {\n      return getPbxproj(projectRootOrProject);\n    } catch {\n      return null;\n    }\n  }\n  return projectRootOrProject;\n}\n\n// TODO: come up with a better solution for using app.json expo.name in various places\nexport function sanitizedName(name: string) {\n  // Default to the name `app` when every safe character has been sanitized\n  return sanitizedNameForProjects(name) || sanitizedNameForProjects(slugify(name)) || 'app';\n}\n\nfunction sanitizedNameForProjects(name: string) {\n  return name\n    .replace(/[\\W_]+/g, '')\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, '');\n}\n\n// TODO: it's silly and kind of fragile that we look at app config to determine\n// the ios project paths. Overall this function needs to be revamped, just a\n// placeholder for now! Make this more robust when we support applying config\n// at any time (currently it's only applied on eject).\nexport function getHackyProjectName(projectRoot: string, config: ExpoConfig): string {\n  // Attempt to get the current ios folder name (apply).\n  try {\n    return getProjectName(projectRoot);\n  } catch {\n    // If no iOS project exists then create a new one (eject).\n    const projectName = config.name;\n    assert(projectName, 'Your project needs a name in app.json/app.config.js.');\n    return sanitizedName(projectName);\n  }\n}\n\nfunction createProjectFileForGroup({ filepath, group }: { filepath: string; group: PBXGroup }) {\n  const file = new pbxFile(filepath);\n\n  const conflictingFile = group.children.find(child => child.comment === file.basename);\n  if (conflictingFile) {\n    // This can happen when a file like the GoogleService-Info.plist needs to be added and the eject command is run twice.\n    // Not much we can do here since it might be a conflicting file.\n    return null;\n  }\n  return file;\n}\n\n/**\n * Add a resource file (ex: `SplashScreen.storyboard`, `Images.xcassets`) to an Xcode project.\n * This is akin to creating a new code file in Xcode with `⌘+n`.\n */\nexport function addResourceFileToGroup({\n  filepath,\n  groupName,\n  // Should add to `PBXBuildFile Section`\n  isBuildFile,\n  project,\n  verbose,\n}: {\n  filepath: string;\n  groupName: string;\n  isBuildFile?: boolean;\n  project: XcodeProject;\n  verbose?: boolean;\n}): XcodeProject {\n  return addFileToGroupAndLink({\n    filepath,\n    groupName,\n    project,\n    verbose,\n    addFileToProject({ project, file }) {\n      project.addToPbxFileReferenceSection(file);\n      if (isBuildFile) {\n        project.addToPbxBuildFileSection(file);\n      }\n      project.addToPbxResourcesBuildPhase(file);\n    },\n  });\n}\n\n/**\n * Add a build source file (ex: `AppDelegate.m`, `ViewController.swift`) to an Xcode project.\n * This is akin to creating a new code file in Xcode with `⌘+n`.\n */\nexport function addBuildSourceFileToGroup({\n  filepath,\n  groupName,\n  project,\n  verbose,\n  targetUuid,\n}: {\n  filepath: string;\n  groupName: string;\n  project: XcodeProject;\n  verbose?: boolean;\n  targetUuid?: string;\n}): XcodeProject {\n  return addFileToGroupAndLink({\n    filepath,\n    groupName,\n    project,\n    verbose,\n    addFileToProject({ project, file }) {\n      project.addToPbxFileReferenceSection(file);\n      project.addToPbxBuildFileSection(file);\n      project.addToPbxSourcesBuildPhase(file);\n    },\n  });\n}\n\n// TODO(brentvatne): I couldn't figure out how to do this with an existing\n// higher level function exposed by the xcode library, but we should find out how to do\n// that and replace this with it\nexport function addFileToGroupAndLink({\n  filepath,\n  groupName,\n  project,\n  verbose,\n  addFileToProject,\n  targetUuid,\n}: {\n  filepath: string;\n  groupName: string;\n  project: XcodeProject;\n  verbose?: boolean;\n  targetUuid?: string;\n  addFileToProject: (props: { file: PBXFile; project: XcodeProject }) => void;\n}): XcodeProject {\n  const group = pbxGroupByPathOrAssert(project, groupName);\n\n  const file = createProjectFileForGroup({ filepath, group });\n\n  if (!file) {\n    if (verbose) {\n      // This can happen when a file like the GoogleService-Info.plist needs to be added and the eject command is run twice.\n      // Not much we can do here since it might be a conflicting file.\n      addWarningIOS(\n        'ios-xcode-project',\n        `Skipped adding duplicate file \"${filepath}\" to PBXGroup named \"${groupName}\"`\n      );\n    }\n    return project;\n  }\n\n  if (targetUuid != null) {\n    file.target = targetUuid;\n  } else {\n    const applicationNativeTarget = project.getTarget('com.apple.product-type.application');\n    file.target = applicationNativeTarget?.uuid;\n  }\n\n  file.uuid = project.generateUuid();\n  file.fileRef = project.generateUuid();\n\n  addFileToProject({ project, file });\n\n  group.children.push({\n    value: file.fileRef,\n    comment: file.basename,\n  });\n  return project;\n}\n\nexport function getApplicationNativeTarget({\n  project,\n  projectName,\n}: {\n  project: XcodeProject;\n  projectName: string;\n}) {\n  const applicationNativeTarget = project.getTarget('com.apple.product-type.application');\n  assert(\n    applicationNativeTarget,\n    `Couldn't locate application PBXNativeTarget in '.xcodeproj' file.`\n  );\n  assert(\n    String(applicationNativeTarget.target.name) === projectName,\n    `Application native target name mismatch. Expected ${projectName}, but found ${applicationNativeTarget.target.name}.`\n  );\n  return applicationNativeTarget;\n}\n\n/**\n * Add a framework to the default app native target.\n *\n * @param projectName Name of the PBX project.\n * @param framework String ending in `.framework`, i.e. `StoreKit.framework`\n */\nexport function addFramework({\n  project,\n  projectName,\n  framework,\n}: {\n  project: XcodeProject;\n  projectName: string;\n  framework: string;\n}) {\n  const target = getApplicationNativeTarget({ project, projectName });\n  return project.addFramework(framework, { target: target.uuid });\n}\n\nfunction splitPath(path: string): string[] {\n  // TODO: Should we account for other platforms that may not use `/`\n  return path.split('/');\n}\n\nconst findGroup = (\n  group: PBXGroup | undefined,\n  name: string\n):\n  | {\n      value: UUID;\n      comment?: string;\n    }\n  | undefined => {\n  if (!group) {\n    return undefined;\n  }\n\n  return group.children.find(group => group.comment === name);\n};\n\nfunction findGroupInsideGroup(\n  project: XcodeProject,\n  group: PBXGroup | undefined,\n  name: string\n): null | PBXGroup {\n  const foundGroup = findGroup(group, name);\n  if (foundGroup) {\n    return project.getPBXGroupByKey(foundGroup.value) ?? null;\n  }\n  return null;\n}\n\nfunction pbxGroupByPathOrAssert(project: XcodeProject, path: string): PBXGroup {\n  const { firstProject } = project.getFirstProject();\n\n  let group = project.getPBXGroupByKey(firstProject.mainGroup);\n\n  const components = splitPath(path);\n  for (const name of components) {\n    const nextGroup = findGroupInsideGroup(project, group, name);\n    if (nextGroup) {\n      group = nextGroup;\n    } else {\n      break;\n    }\n  }\n\n  if (!group) {\n    throw Error(`Xcode PBXGroup with name \"${path}\" could not be found in the Xcode project.`);\n  }\n\n  return group;\n}\n\nexport function ensureGroupRecursively(project: XcodeProject, filepath: string): PBXGroup | null {\n  const components = splitPath(filepath);\n  const hasChild = (group: PBXGroup, name: string) =>\n    group.children.find(({ comment }) => comment === name);\n  const { firstProject } = project.getFirstProject();\n\n  let topMostGroup = project.getPBXGroupByKey(firstProject.mainGroup);\n\n  for (const pathComponent of components) {\n    if (topMostGroup && !hasChild(topMostGroup, pathComponent)) {\n      topMostGroup.children.push({\n        comment: pathComponent,\n        value: project.pbxCreateGroup(pathComponent, '\"\"'),\n      });\n    }\n    topMostGroup = project.pbxGroupByName(pathComponent);\n  }\n  return topMostGroup ?? null;\n}\n\n/**\n * Get the pbxproj for the given path\n */\nexport function getPbxproj(projectRoot: string): XcodeProject {\n  const projectPath = Paths.getPBXProjectPath(projectRoot);\n  const project = xcode.project(projectPath);\n  project.parseSync();\n  return project;\n}\n\n/**\n * Get the productName for a project, if the name is using a variable `$(TARGET_NAME)`, then attempt to get the value of that variable.\n *\n * @param project\n */\nexport function getProductName(project: XcodeProject): string {\n  let productName = '$(TARGET_NAME)';\n  try {\n    // If the product name is numeric, this will fail (it's a getter).\n    // If the bundle identifier' final component is only numeric values, then the PRODUCT_NAME\n    // will be a numeric value, this results in a bug where the product name isn't useful,\n    // i.e. `com.bacon.001` -> `1` -- in this case, use the first target name.\n    productName = project.productName;\n  } catch {}\n\n  if (productName === '$(TARGET_NAME)') {\n    const targetName = project.getFirstTarget()?.firstTarget?.productName;\n    productName = targetName ?? productName;\n  }\n\n  return productName;\n}\n\nexport function getProjectSection(project: XcodeProject) {\n  return project.pbxProjectSection();\n}\n\nexport function getXCConfigurationListEntries(project: XcodeProject): ConfigurationListEntry[] {\n  const lists = project.pbxXCConfigurationList();\n  return Object.entries(lists).filter(isNotComment);\n}\n\nexport function getBuildConfigurationsForListId(\n  project: XcodeProject,\n  configurationListId: string\n): ConfigurationSectionEntry[] {\n  const configurationListEntries = getXCConfigurationListEntries(project);\n  const [, configurationList] = configurationListEntries.find(\n    ([key]) => key === configurationListId\n  ) as ConfigurationListEntry;\n\n  const buildConfigurations = configurationList.buildConfigurations.map(i => i.value);\n\n  return Object.entries(project.pbxXCBuildConfigurationSection())\n    .filter(isNotComment)\n    .filter(isBuildConfig)\n    .filter(([key]: ConfigurationSectionEntry) => buildConfigurations.includes(key));\n}\n\nexport function getBuildConfigurationForListIdAndName(\n  project: XcodeProject,\n  {\n    configurationListId,\n    buildConfiguration,\n  }: { configurationListId: string; buildConfiguration: string }\n): ConfigurationSectionEntry {\n  const xcBuildConfigurationEntry = getBuildConfigurationsForListId(\n    project,\n    configurationListId\n  ).find(i => i[1].name === buildConfiguration);\n  if (!xcBuildConfigurationEntry) {\n    throw new Error(\n      `Build configuration '${buildConfiguration}' does not exist in list with id '${configurationListId}'`\n    );\n  }\n  return xcBuildConfigurationEntry;\n}\n\nexport function isBuildConfig([, sectionItem]: ConfigurationSectionEntry): boolean {\n  return sectionItem.isa === 'XCBuildConfiguration';\n}\n\nexport function isNotTestHost([, sectionItem]: ConfigurationSectionEntry): boolean {\n  return !sectionItem.buildSettings.TEST_HOST;\n}\n\nexport function isNotComment([key]:\n  | ConfigurationSectionEntry\n  | ProjectSectionEntry\n  | ConfigurationListEntry\n  | NativeTargetSectionEntry): boolean {\n  return !key.endsWith(`_comment`);\n}\n\n// Remove surrounding double quotes if they exist.\nexport function unquote(value: string): string {\n  // projects with numeric names will fail due to a bug in the xcode package.\n  if (typeof value === 'number') {\n    value = String(value);\n  }\n  return value.match(/^\"(.*)\"$/)?.[1] ?? value;\n}\n"],"file":"Xcodeproj.js"}