{"version":3,"sources":["../../src/ios/Locales.ts"],"names":["withLocales","config","modResults","setLocalesAsync","projectRoot","modRequest","project","getLocales","locales","localesMap","getResolvedLocalesAsync","projectName","supportingDirectory","stringName","lang","localizationObj","Object","entries","dir","fs","promises","mkdir","recursive","strings","buffer","plistKey","localVersion","push","writeFile","join","groupName","group","children","some","comment","filepath","isBuildFile","verbose","input","localeJsonPath","JsonFile","readAsync","e"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport JsonFile from '@expo/json-file';\nimport fs from 'fs';\nimport { join, relative } from 'path';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withXcodeProject } from '../plugins/ios-plugins';\nimport { addWarningIOS } from '../utils/warnings';\nimport { addResourceFileToGroup, ensureGroupRecursively, getProjectName } from './utils/Xcodeproj';\n\ntype LocaleJson = Record<string, string>;\ntype ResolvedLocalesJson = Record<string, LocaleJson>;\ntype ExpoConfigLocales = NonNullable<ExpoConfig['locales']>;\n\nexport const withLocales: ConfigPlugin = config => {\n  return withXcodeProject(config, async config => {\n    config.modResults = await setLocalesAsync(config, {\n      projectRoot: config.modRequest.projectRoot,\n      project: config.modResults,\n    });\n    return config;\n  });\n};\n\nexport function getLocales(\n  config: Pick<ExpoConfig, 'locales'>\n): Record<string, string | LocaleJson> | null {\n  return config.locales ?? null;\n}\n\nexport async function setLocalesAsync(\n  config: Pick<ExpoConfig, 'locales'>,\n  { projectRoot, project }: { projectRoot: string; project: XcodeProject }\n): Promise<XcodeProject> {\n  const locales = getLocales(config);\n  if (!locales) {\n    return project;\n  }\n  // possibly validate CFBundleAllowMixedLocalizations is enabled\n  const localesMap = await getResolvedLocalesAsync(projectRoot, locales);\n\n  const projectName = getProjectName(projectRoot);\n  const supportingDirectory = join(projectRoot, 'ios', projectName, 'Supporting');\n\n  // TODO: Should we delete all before running? Revisit after we land on a lock file.\n  const stringName = 'InfoPlist.strings';\n\n  for (const [lang, localizationObj] of Object.entries(localesMap)) {\n    const dir = join(supportingDirectory, `${lang}.lproj`);\n    // await fs.ensureDir(dir);\n    await fs.promises.mkdir(dir, { recursive: true });\n\n    const strings = join(dir, stringName);\n    const buffer = [];\n    for (const [plistKey, localVersion] of Object.entries(localizationObj)) {\n      buffer.push(`${plistKey} = \"${localVersion}\";`);\n    }\n    // Write the file to the file system.\n    await fs.promises.writeFile(strings, buffer.join('\\n'));\n\n    const groupName = `${projectName}/Supporting/${lang}.lproj`;\n    // deep find the correct folder\n    const group = ensureGroupRecursively(project, groupName);\n\n    // Ensure the file doesn't already exist\n    if (!group?.children.some(({ comment }) => comment === stringName)) {\n      // Only write the file if it doesn't already exist.\n      project = addResourceFileToGroup({\n        filepath: relative(supportingDirectory, strings),\n        groupName,\n        project,\n        isBuildFile: true,\n        verbose: true,\n      });\n    }\n  }\n\n  return project;\n}\n\nexport async function getResolvedLocalesAsync(\n  projectRoot: string,\n  input: ExpoConfigLocales\n): Promise<ResolvedLocalesJson> {\n  const locales: ResolvedLocalesJson = {};\n  for (const [lang, localeJsonPath] of Object.entries(input)) {\n    if (typeof localeJsonPath === 'string') {\n      try {\n        locales[lang] = await JsonFile.readAsync(join(projectRoot, localeJsonPath));\n      } catch (e) {\n        // Add a warning when a json file cannot be parsed.\n        addWarningIOS(\n          `locales.${lang}`,\n          `Failed to parse JSON of locale file for language: ${lang}`,\n          'https://docs.expo.dev/distribution/app-stores/#localizing-your-ios-app'\n        );\n      }\n    } else {\n      // In the off chance that someone defined the locales json in the config, pass it directly to the object.\n      // We do this to make the types more elegant.\n      locales[lang] = localeJsonPath;\n    }\n  }\n\n  return locales;\n}\n"],"file":"Locales.js"}