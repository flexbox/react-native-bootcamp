{"version":3,"sources":["../../src/ios/Swift.ts"],"names":["templateBridgingHeader","withSwiftBridgingHeader","config","modResults","ensureSwiftBridgingHeaderSetup","project","projectRoot","modRequest","shouldCreateSwiftBridgingHeader","projectName","bridgingHeader","createBridgingHeaderFileName","createBridgingHeaderFile","linkBridgingHeaderFile","path","join","isObjc","language","getDesignatedSwiftBridgingHeaderFileReference","configurations","pbxXCBuildConfigurationSection","buildSettings","Object","values","PRODUCT_NAME","SWIFT_OBJC_BRIDGING_HEADER","bridgingHeaderProjectPath","fs","existsSync","writeFileSync","filePath","hasFile","filepath","groupName","isBuildFile","verbose","withNoopSwiftFile","contents"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nimport { ConfigPlugin, XcodeProject } from '../Plugin.types';\nimport { withXcodeProject } from '../plugins/ios-plugins';\nimport { getAppDelegate, getSourceRoot } from './Paths';\nimport { withBuildSourceFile } from './XcodeProjectFile';\nimport { addResourceFileToGroup, getProjectName } from './utils/Xcodeproj';\n\nconst templateBridgingHeader = `//\n//  Use this file to import your target's public headers that you would like to expose to Swift.\n//\n`;\n\n/**\n * Ensure a Swift bridging header is created for the project.\n * This helps fix problems related to using modules that are written in Swift (lottie, FBSDK).\n *\n * 1. Ensures the file exists given the project path.\n * 2. Writes the file and links to Xcode as a resource file.\n * 3. Sets the build configuration `SWIFT_OBJC_BRIDGING_HEADER = [PROJECT_NAME]-Bridging-Header.h`\n */\nexport const withSwiftBridgingHeader: ConfigPlugin = config => {\n  return withXcodeProject(config, config => {\n    config.modResults = ensureSwiftBridgingHeaderSetup({\n      project: config.modResults,\n      projectRoot: config.modRequest.projectRoot,\n    });\n    return config;\n  });\n};\n\nexport function ensureSwiftBridgingHeaderSetup({\n  projectRoot,\n  project,\n}: {\n  projectRoot: string;\n  project: XcodeProject;\n}) {\n  // Only create a bridging header if using objective-c\n  if (shouldCreateSwiftBridgingHeader({ projectRoot, project })) {\n    const projectName = getProjectName(projectRoot);\n    const bridgingHeader = createBridgingHeaderFileName(projectName);\n    // Ensure a bridging header is created in the Xcode project.\n    project = createBridgingHeaderFile({\n      project,\n      projectName,\n      projectRoot,\n      bridgingHeader,\n    });\n    // Designate the newly created file as the Swift bridging header in the Xcode project.\n    project = linkBridgingHeaderFile({\n      project,\n      bridgingHeader: path.join(projectName, bridgingHeader),\n    });\n  }\n  return project;\n}\n\nfunction shouldCreateSwiftBridgingHeader({\n  projectRoot,\n  project,\n}: {\n  projectRoot: string;\n  project: XcodeProject;\n}): boolean {\n  // Only create a bridging header if the project is using in Objective C (AppDelegate is written in Objc).\n  const isObjc = getAppDelegate(projectRoot).language === 'objc';\n  return isObjc && !getDesignatedSwiftBridgingHeaderFileReference({ project });\n}\n\n/**\n * @returns String matching the default name used when Xcode automatically creates a bridging header file.\n */\nfunction createBridgingHeaderFileName(projectName: string): string {\n  return `${projectName}-Bridging-Header.h`;\n}\n\nexport function getDesignatedSwiftBridgingHeaderFileReference({\n  project,\n}: {\n  project: XcodeProject;\n}): string | null {\n  const configurations = project.pbxXCBuildConfigurationSection();\n  // @ts-ignore\n  for (const { buildSettings } of Object.values(configurations || {})) {\n    // Guessing that this is the best way to emulate Xcode.\n    // Using `project.addToBuildSettings` modifies too many targets.\n    if (typeof buildSettings?.PRODUCT_NAME !== 'undefined') {\n      if (\n        typeof buildSettings.SWIFT_OBJC_BRIDGING_HEADER === 'string' &&\n        buildSettings.SWIFT_OBJC_BRIDGING_HEADER\n      ) {\n        return buildSettings.SWIFT_OBJC_BRIDGING_HEADER;\n      }\n    }\n  }\n  return null;\n}\n\n/**\n *\n * @param bridgingHeader The bridging header filename ex: `ExpoAPIs-Bridging-Header.h`\n * @returns\n */\nexport function linkBridgingHeaderFile({\n  project,\n  bridgingHeader,\n}: {\n  project: XcodeProject;\n  bridgingHeader: string;\n}): XcodeProject {\n  const configurations = project.pbxXCBuildConfigurationSection();\n  // @ts-ignore\n  for (const { buildSettings } of Object.values(configurations || {})) {\n    // Guessing that this is the best way to emulate Xcode.\n    // Using `project.addToBuildSettings` modifies too many targets.\n    if (typeof buildSettings?.PRODUCT_NAME !== 'undefined') {\n      buildSettings.SWIFT_OBJC_BRIDGING_HEADER = bridgingHeader;\n    }\n  }\n\n  return project;\n}\n\nexport function createBridgingHeaderFile({\n  projectRoot,\n  projectName,\n  project,\n  bridgingHeader,\n}: {\n  project: XcodeProject;\n  projectName: string;\n  projectRoot: string;\n  bridgingHeader: string;\n}): XcodeProject {\n  const bridgingHeaderProjectPath = path.join(getSourceRoot(projectRoot), bridgingHeader);\n  if (!fs.existsSync(bridgingHeaderProjectPath)) {\n    // Create the file\n    fs.writeFileSync(bridgingHeaderProjectPath, templateBridgingHeader, 'utf8');\n  }\n\n  // This is non-standard, Xcode generates the bridging header in `/ios` which is kinda annoying.\n  // Instead, this'll generate the default header in the application code folder `/ios/myproject/`.\n  const filePath = `${projectName}/${bridgingHeader}`;\n  // Ensure the file is linked with Xcode resource files\n  if (!project.hasFile(filePath)) {\n    project = addResourceFileToGroup({\n      filepath: filePath,\n      groupName: projectName,\n      project,\n      // Not sure why, but this is how Xcode generates it.\n      isBuildFile: false,\n      verbose: false,\n    });\n  }\n  return project;\n}\n\nexport const withNoopSwiftFile: ConfigPlugin = config => {\n  return withBuildSourceFile(config, {\n    filePath: 'noop-file.swift',\n    contents: [\n      '//',\n      '// @generated',\n      '// A blank Swift file must be created for native modules with Swift files to work correctly.',\n      '//',\n      '',\n    ].join('\\n'),\n  });\n};\n"],"file":"Swift.js"}