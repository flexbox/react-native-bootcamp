{"version":3,"sources":["../../src/android/StatusBar.ts"],"names":["COLOR_PRIMARY_DARK_KEY","WINDOW_TRANSLUCENT_STATUS","WINDOW_LIGHT_STATUS_BAR","withStatusBar","config","withStatusBarColors","withStatusBarStyles","modResults","setStatusBarColors","setStatusBarStyles","colors","name","value","getStatusBarColor","styles","hexString","floatElement","getStatusBarTranslucent","parent","targetApi","add","getStatusBarStyle","backgroundColor","androidStatusBar","translucent","barStyle"],"mappings":";;;;;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA;AACA,MAAMA,sBAAsB,GAAG,kBAA/B,C,CACA;;AACA,MAAMC,yBAAyB,GAAG,iCAAlC,C,CACA;;AACA,MAAMC,uBAAuB,GAAG,8BAAhC;;AAEO,MAAMC,aAA2B,GAAGC,MAAM,IAAI;AACnDA,EAAAA,MAAM,GAAGC,mBAAmB,CAACD,MAAD,CAA5B;AACAA,EAAAA,MAAM,GAAGE,mBAAmB,CAACF,MAAD,CAA5B;AACA,SAAOA,MAAP;AACD,CAJM;;;;AAMP,MAAMC,mBAAiC,GAAGD,MAAM,IAAI;AAClD,SAAO,yCAAkBA,MAAlB,EAA0BA,MAAM,IAAI;AACzCA,IAAAA,MAAM,CAACG,UAAP,GAAoBC,kBAAkB,CAACJ,MAAD,EAASA,MAAM,CAACG,UAAhB,CAAtC;AACA,WAAOH,MAAP;AACD,GAHM,CAAP;AAID,CALD;;AAOA,MAAME,mBAAiC,GAAGF,MAAM,IAAI;AAClD,SAAO,yCAAkBA,MAAlB,EAA0BA,MAAM,IAAI;AACzCA,IAAAA,MAAM,CAACG,UAAP,GAAoBE,kBAAkB,CAACL,MAAD,EAASA,MAAM,CAACG,UAAhB,CAAtC;AACA,WAAOH,MAAP;AACD,GAHM,CAAP;AAID,CALD;;AAOO,SAASI,kBAAT,CACLJ,MADK,EAELM,MAFK,EAGQ;AACb,SAAO,gCAAiBA,MAAjB,EAAyB;AAC9BC,IAAAA,IAAI,EAAEX,sBADwB;AAE9BY,IAAAA,KAAK,EAAEC,iBAAiB,CAACT,MAAD;AAFM,GAAzB,CAAP;AAID;;AAEM,SAASK,kBAAT,CACLL,MADK,EAELU,MAFK,EAGQ;AACb,QAAMC,SAAS,GAAGF,iBAAiB,CAACT,MAAD,CAAnC;AACA,QAAMY,YAAY,GAAGC,uBAAuB,CAACb,MAAD,CAA5C;AAEAU,EAAAA,MAAM,GAAG,iCAAkBA,MAAlB,EAA0B;AACjCI,IAAAA,MAAM,EAAE,iDADyB;AAEjCP,IAAAA,IAAI,EAAET,uBAF2B;AAGjCiB,IAAAA,SAAS,EAAE,IAHsB;AAIjCP,IAAAA,KAAK,EAAE,MAJ0B;AAKjC;AACAQ,IAAAA,GAAG,EAAEC,iBAAiB,CAACjB,MAAD,CAAjB,KAA8B;AANF,GAA1B,CAAT;AASAU,EAAAA,MAAM,GAAG,iCAAkBA,MAAlB,EAA0B;AACjCI,IAAAA,MAAM,EAAE,iDADyB;AAEjCP,IAAAA,IAAI,EAAEV,yBAF2B;AAGjCW,IAAAA,KAAK,EAAE,MAH0B;AAIjC;AACAQ,IAAAA,GAAG,EAAEJ;AAL4B,GAA1B,CAAT;AAQAF,EAAAA,MAAM,GAAG,iCAAkBA,MAAlB,EAA0B;AACjCI,IAAAA,MAAM,EAAE,iDADyB;AAEjCP,IAAAA,IAAI,EAAEX,sBAF2B;AAGjCY,IAAAA,KAAK,EAAG,UAASZ,sBAAuB,EAHP;AAIjC;AACAoB,IAAAA,GAAG,EAAE,CAAC,CAACL;AAL0B,GAA1B,CAAT;AAQA,SAAOD,MAAP;AACD;;AAEM,SAASD,iBAAT,CAA2BT,MAA3B,EAAyE;AAAA;;AAC9E,QAAMkB,eAAe,4BAAGlB,MAAM,CAACmB,gBAAV,0DAAG,sBAAyBD,eAAjD;;AACA,MAAIA,eAAJ,EAAqB;AACnB;AACA,2BACEA,eAAe,KAAK,aADtB,EAEG,8EAA6EA,eAAgB,GAFhG;AAID;;AACD,SAAOA,eAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASL,uBAAT,CAAiCb,MAAjC,EAAwF;AAAA;;AAC7F,6DAAOA,MAAM,CAACmB,gBAAd,2DAAO,uBAAyBC,WAAhC,2EAA+C,KAA/C;AACD;;AAEM,SAASH,iBAAT,CAA2BjB,MAA3B,EAAyE;AAAA;;AAC9E,SAAO,2BAAAA,MAAM,CAACmB,gBAAP,kFAAyBE,QAAzB,KAAqC,eAA5C;AACD","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport assert from 'assert';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAndroidColors, withAndroidStyles } from '../plugins/android-plugins';\nimport { assignColorValue } from './Colors';\nimport { ResourceXML } from './Resources';\nimport { assignStylesValue, getAppThemeLightNoActionBarGroup } from './Styles';\n\n// https://developer.android.com/reference/android/R.attr#colorPrimaryDark\nconst COLOR_PRIMARY_DARK_KEY = 'colorPrimaryDark';\n// https://developer.android.com/reference/android/R.attr#windowTranslucentStatus\nconst WINDOW_TRANSLUCENT_STATUS = 'android:windowTranslucentStatus';\n// https://developer.android.com/reference/android/R.attr#windowLightStatusBar\nconst WINDOW_LIGHT_STATUS_BAR = 'android:windowLightStatusBar';\n\nexport const withStatusBar: ConfigPlugin = config => {\n  config = withStatusBarColors(config);\n  config = withStatusBarStyles(config);\n  return config;\n};\n\nconst withStatusBarColors: ConfigPlugin = config => {\n  return withAndroidColors(config, config => {\n    config.modResults = setStatusBarColors(config, config.modResults);\n    return config;\n  });\n};\n\nconst withStatusBarStyles: ConfigPlugin = config => {\n  return withAndroidStyles(config, config => {\n    config.modResults = setStatusBarStyles(config, config.modResults);\n    return config;\n  });\n};\n\nexport function setStatusBarColors(\n  config: Pick<ExpoConfig, 'androidStatusBar'>,\n  colors: ResourceXML\n): ResourceXML {\n  return assignColorValue(colors, {\n    name: COLOR_PRIMARY_DARK_KEY,\n    value: getStatusBarColor(config),\n  });\n}\n\nexport function setStatusBarStyles(\n  config: Pick<ExpoConfig, 'androidStatusBar'>,\n  styles: ResourceXML\n): ResourceXML {\n  const hexString = getStatusBarColor(config);\n  const floatElement = getStatusBarTranslucent(config);\n\n  styles = assignStylesValue(styles, {\n    parent: getAppThemeLightNoActionBarGroup(),\n    name: WINDOW_LIGHT_STATUS_BAR,\n    targetApi: '23',\n    value: 'true',\n    // Default is light-content, don't need to do anything to set it\n    add: getStatusBarStyle(config) === 'dark-content',\n  });\n\n  styles = assignStylesValue(styles, {\n    parent: getAppThemeLightNoActionBarGroup(),\n    name: WINDOW_TRANSLUCENT_STATUS,\n    value: 'true',\n    // translucent status bar set in theme\n    add: floatElement,\n  });\n\n  styles = assignStylesValue(styles, {\n    parent: getAppThemeLightNoActionBarGroup(),\n    name: COLOR_PRIMARY_DARK_KEY,\n    value: `@color/${COLOR_PRIMARY_DARK_KEY}`,\n    // Remove the color if translucent is used\n    add: !!hexString,\n  });\n\n  return styles;\n}\n\nexport function getStatusBarColor(config: Pick<ExpoConfig, 'androidStatusBar'>) {\n  const backgroundColor = config.androidStatusBar?.backgroundColor;\n  if (backgroundColor) {\n    // Drop support for translucent\n    assert(\n      backgroundColor !== 'translucent',\n      `androidStatusBar.backgroundColor must be a valid hex string, instead got: \"${backgroundColor}\"`\n    );\n  }\n  return backgroundColor;\n}\n\n/**\n * Specifies whether the status bar should be \"translucent\". When true, the status bar is drawn with `position: absolute` and a gray underlay, when false `position: relative` (pushes content down).\n *\n * @default false\n * @param config\n * @returns\n */\nexport function getStatusBarTranslucent(config: Pick<ExpoConfig, 'androidStatusBar'>): boolean {\n  return config.androidStatusBar?.translucent ?? false;\n}\n\nexport function getStatusBarStyle(config: Pick<ExpoConfig, 'androidStatusBar'>) {\n  return config.androidStatusBar?.barStyle || 'light-content';\n}\n"],"file":"StatusBar.js"}