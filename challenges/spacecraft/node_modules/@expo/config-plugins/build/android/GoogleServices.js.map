{"version":3,"sources":["../../src/android/GoogleServices.ts"],"names":["DEFAULT_TARGET_PATH","googleServicesClassPath","googleServicesPlugin","googleServicesVersion","withClassPath","config","modResults","language","contents","setClassPath","withApplyPlugin","applyPlugin","withGoogleServicesFile","setGoogleServicesFile","modRequest","projectRoot","getGoogleServicesFilePath","android","googleServicesFile","targetPath","partialSourcePath","completeSourcePath","path","resolve","destinationPath","e","console","log","Error","buildGradle","includes","replace","appBuildGradle","pattern","RegExp","match"],"mappings":";;;;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA,MAAMA,mBAAmB,GAAG,oCAA5B;AAEA,MAAMC,uBAAuB,GAAG,gCAAhC;AACA,MAAMC,oBAAoB,GAAG,gCAA7B,C,CAEA;;AACA,MAAMC,qBAAqB,GAAG,OAA9B;;AAEO,MAAMC,aAA2B,GAAGC,MAAM,IAAI;AACnD,SAAO,8CAAuBA,MAAvB,EAA+BA,MAAM,IAAI;AAC9C,QAAIA,MAAM,CAACC,UAAP,CAAkBC,QAAlB,KAA+B,QAAnC,EAA6C;AAC3CF,MAAAA,MAAM,CAACC,UAAP,CAAkBE,QAAlB,GAA6BC,YAAY,CAACJ,MAAD,EAASA,MAAM,CAACC,UAAP,CAAkBE,QAA3B,CAAzC;AACD,KAFD,MAEO;AACL,yCACE,4BADF,EAEG,wEAFH;AAID;;AACD,WAAOH,MAAP;AACD,GAVM,CAAP;AAWD,CAZM;;;;AAcA,MAAMK,eAA6B,GAAGL,MAAM,IAAI;AACrD,SAAO,0CAAmBA,MAAnB,EAA2BA,MAAM,IAAI;AAC1C,QAAIA,MAAM,CAACC,UAAP,CAAkBC,QAAlB,KAA+B,QAAnC,EAA6C;AAC3CF,MAAAA,MAAM,CAACC,UAAP,CAAkBE,QAAlB,GAA6BG,WAAW,CAACN,MAAD,EAASA,MAAM,CAACC,UAAP,CAAkBE,QAA3B,CAAxC;AACD,KAFD,MAEO;AACL,yCACE,4BADF,EAEG,oEAFH;AAID;;AACD,WAAOH,MAAP;AACD,GAVM,CAAP;AAWD,CAZM;AAcP;AACA;AACA;;;;;AACO,MAAMO,sBAAoC,GAAGP,MAAM,IAAI;AAC5D,SAAO,0CAAiBA,MAAjB,EAAyB,CAC9B,SAD8B,EAE9B,MAAMA,MAAN,IAAgB;AACd,UAAMQ,qBAAqB,CAACR,MAAD,EAASA,MAAM,CAACS,UAAP,CAAkBC,WAA3B,CAA3B;AACA,WAAOV,MAAP;AACD,GAL6B,CAAzB,CAAP;AAOD,CARM;;;;AAUA,SAASW,yBAAT,CAAmCX,MAAnC,EAAwE;AAAA;;AAC7E,qDAAOA,MAAM,CAACY,OAAd,oDAAO,gBAAgBC,kBAAvB,yEAA6C,IAA7C;AACD;;AAEM,eAAeL,qBAAf,CACLR,MADK,EAELU,WAFK,EAGLI,UAAkB,GAAGnB,mBAHhB,EAIL;AACA,QAAMoB,iBAAiB,GAAGJ,yBAAyB,CAACX,MAAD,CAAnD;;AACA,MAAI,CAACe,iBAAL,EAAwB;AACtB,WAAO,KAAP;AACD;;AAED,QAAMC,kBAAkB,GAAGC,gBAAKC,OAAL,CAAaR,WAAb,EAA0BK,iBAA1B,CAA3B;;AACA,QAAMI,eAAe,GAAGF,gBAAKC,OAAL,CAAaR,WAAb,EAA0BI,UAA1B,CAAxB;;AAEA,MAAI;AACF,UAAM,mCAAwBE,kBAAxB,EAA4CG,eAA5C,CAAN;AACD,GAFD,CAEE,OAAOC,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,UAAM,IAAIG,KAAJ,CACH,yCAAwCP,kBAAmB,OAAMG,eAAgB,4DAD9E,CAAN;AAGD;;AACD,SAAO,IAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACO,SAASf,YAAT,CAAsBJ,MAAtB,EAA2DwB,WAA3D,EAAgF;AACrF,QAAMX,kBAAkB,GAAGF,yBAAyB,CAACX,MAAD,CAApD;;AACA,MAAI,CAACa,kBAAL,EAAyB;AACvB,WAAOW,WAAP;AACD;;AAED,MAAIA,WAAW,CAACC,QAAZ,CAAqB7B,uBAArB,CAAJ,EAAmD;AACjD,WAAO4B,WAAP;AACD,GARoF,CAUrF;;;AACA,SAAOA,WAAW,CAACE,OAAZ,CACL,kBADK,EAEJ;AACL,qBAAqB9B,uBAAwB,IAAGE,qBAAsB,GAH7D,CAAP;AAKD;;AAEM,SAASQ,WAAT,CAAqBN,MAArB,EAA0D2B,cAA1D,EAAkF;AACvF,QAAMd,kBAAkB,GAAGF,yBAAyB,CAACX,MAAD,CAApD;;AACA,MAAI,CAACa,kBAAL,EAAyB;AACvB,WAAOc,cAAP;AACD,GAJsF,CAMvF;;;AACA,QAAMC,OAAO,GAAG,IAAIC,MAAJ,CAAY,2BAA0BhC,oBAAqB,MAA3D,CAAhB;;AACA,MAAI8B,cAAc,CAACG,KAAf,CAAqBF,OAArB,CAAJ,EAAmC;AACjC,WAAOD,cAAP;AACD,GAVsF,CAYvF;;;AACA,SAAOA,cAAc,GAAI,oBAAmB9B,oBAAqB,GAAjE;AACD","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport path from 'path';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAppBuildGradle, withProjectBuildGradle } from '../plugins/android-plugins';\nimport { withDangerousMod } from '../plugins/withDangerousMod';\nimport { copyFilePathToPathAsync } from '../utils/fs';\nimport { addWarningAndroid } from '../utils/warnings';\n\nconst DEFAULT_TARGET_PATH = './android/app/google-services.json';\n\nconst googleServicesClassPath = 'com.google.gms:google-services';\nconst googleServicesPlugin = 'com.google.gms.google-services';\n\n// NOTE(brentvatne): This may be annoying to keep up to date...\nconst googleServicesVersion = '4.3.3';\n\nexport const withClassPath: ConfigPlugin = config => {\n  return withProjectBuildGradle(config, config => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setClassPath(config, config.modResults.contents);\n    } else {\n      addWarningAndroid(\n        'android.googleServicesFile',\n        `Cannot automatically configure project build.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\nexport const withApplyPlugin: ConfigPlugin = config => {\n  return withAppBuildGradle(config, config => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = applyPlugin(config, config.modResults.contents);\n    } else {\n      addWarningAndroid(\n        'android.googleServicesFile',\n        `Cannot automatically configure app build.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\n/**\n * Add `google-services.json` to project\n */\nexport const withGoogleServicesFile: ConfigPlugin = config => {\n  return withDangerousMod(config, [\n    'android',\n    async config => {\n      await setGoogleServicesFile(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport function getGoogleServicesFilePath(config: Pick<ExpoConfig, 'android'>) {\n  return config.android?.googleServicesFile ?? null;\n}\n\nexport async function setGoogleServicesFile(\n  config: Pick<ExpoConfig, 'android'>,\n  projectRoot: string,\n  targetPath: string = DEFAULT_TARGET_PATH\n) {\n  const partialSourcePath = getGoogleServicesFilePath(config);\n  if (!partialSourcePath) {\n    return false;\n  }\n\n  const completeSourcePath = path.resolve(projectRoot, partialSourcePath);\n  const destinationPath = path.resolve(projectRoot, targetPath);\n\n  try {\n    await copyFilePathToPathAsync(completeSourcePath, destinationPath);\n  } catch (e) {\n    console.log(e);\n    throw new Error(\n      `Cannot copy google-services.json from ${completeSourcePath} to ${destinationPath}. Please make sure the source and destination paths exist.`\n    );\n  }\n  return true;\n}\n\n/**\n * Adding the Google Services plugin\n * NOTE(brentvatne): string replacement is a fragile approach! we need a\n * better solution than this.\n */\nexport function setClassPath(config: Pick<ExpoConfig, 'android'>, buildGradle: string) {\n  const googleServicesFile = getGoogleServicesFilePath(config);\n  if (!googleServicesFile) {\n    return buildGradle;\n  }\n\n  if (buildGradle.includes(googleServicesClassPath)) {\n    return buildGradle;\n  }\n\n  //\n  return buildGradle.replace(\n    /dependencies\\s?{/,\n    `dependencies {\n        classpath '${googleServicesClassPath}:${googleServicesVersion}'`\n  );\n}\n\nexport function applyPlugin(config: Pick<ExpoConfig, 'android'>, appBuildGradle: string) {\n  const googleServicesFile = getGoogleServicesFilePath(config);\n  if (!googleServicesFile) {\n    return appBuildGradle;\n  }\n\n  // Make sure the project does not have the plugin already\n  const pattern = new RegExp(`apply\\\\s+plugin:\\\\s+['\"]${googleServicesPlugin}['\"]`);\n  if (appBuildGradle.match(pattern)) {\n    return appBuildGradle;\n  }\n\n  // Add it to the end of the file\n  return appBuildGradle + `\\napply plugin: '${googleServicesPlugin}'`;\n}\n"],"file":"GoogleServices.js"}