{"version":3,"sources":["../../src/android/Colors.ts"],"names":["getProjectColorsXMLPathAsync","projectRoot","kind","name","setColorItem","itemToAdd","colorFileContentsJSON","resources","color","colorNameExists","filter","e","$","_","push","removeColorItem","named","contents","index","findIndex","splice","assignColorValue","xml","value","getColorsAsObject","getObjectAsColorsXml","obj"],"mappings":"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","sourcesContent":["import { getResourceXMLPathAsync } from './Paths';\nimport {\n  buildResourceItem,\n  getObjectAsResourceItems,\n  getResourceItemsAsObject,\n  ResourceItemXML,\n  ResourceKind,\n  ResourceXML,\n} from './Resources';\n\nexport function getProjectColorsXMLPathAsync(\n  projectRoot: string,\n  { kind }: { kind?: ResourceKind } = {}\n) {\n  return getResourceXMLPathAsync(projectRoot, { kind, name: 'colors' });\n}\n\nexport function setColorItem(itemToAdd: ResourceItemXML, colorFileContentsJSON: ResourceXML) {\n  if (colorFileContentsJSON.resources?.color) {\n    const colorNameExists = colorFileContentsJSON.resources.color.filter(\n      (e: ResourceItemXML) => e.$.name === itemToAdd.$.name\n    )[0];\n    if (colorNameExists) {\n      colorNameExists._ = itemToAdd._;\n    } else {\n      colorFileContentsJSON.resources.color.push(itemToAdd);\n    }\n  } else {\n    if (!colorFileContentsJSON.resources || typeof colorFileContentsJSON.resources === 'string') {\n      //file was empty and JSON is `{resources : ''}`\n      colorFileContentsJSON.resources = {};\n    }\n    colorFileContentsJSON.resources.color = [itemToAdd];\n  }\n  return colorFileContentsJSON;\n}\n\nexport function removeColorItem(named: string, contents: ResourceXML) {\n  if (contents.resources?.color) {\n    const index = contents.resources.color.findIndex((e: ResourceItemXML) => e.$.name === named);\n    if (index > -1) {\n      // replace the previous value\n      contents.resources.color.splice(index, 1);\n    }\n  }\n  return contents;\n}\n\n/**\n * Set or remove value in XML based on nullish factor of the `value` property.\n */\nexport function assignColorValue(\n  xml: ResourceXML,\n  {\n    value,\n    name,\n  }: {\n    value?: string | null;\n    name: string;\n  }\n) {\n  if (value) {\n    return setColorItem(\n      buildResourceItem({\n        name,\n        value,\n      }),\n      xml\n    );\n  }\n\n  return removeColorItem(name, xml);\n}\n\n/**\n * Helper to convert a basic XML object into a simple k/v pair.\n * `colors.xml` is a very basic XML file so this is pretty safe to do.\n * Added for testing purposes.\n *\n * @param xml\n * @returns\n */\nexport function getColorsAsObject(xml: ResourceXML): Record<string, string> | null {\n  if (!xml?.resources?.color) {\n    return null;\n  }\n\n  return getResourceItemsAsObject(xml.resources.color);\n}\n\n/**\n * Helper to convert a basic k/v object to a colors XML object.\n *\n * @param xml\n * @returns\n */\nexport function getObjectAsColorsXml(obj: Record<string, string>): ResourceXML {\n  return {\n    resources: {\n      color: getObjectAsResourceItems(obj),\n    },\n  };\n}\n"],"file":"Colors.js"}