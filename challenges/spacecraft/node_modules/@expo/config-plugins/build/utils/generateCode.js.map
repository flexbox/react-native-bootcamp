{"version":3,"sources":["../../src/utils/generateCode.ts"],"names":["getGeneratedSectionIndexes","src","tag","contents","split","start","findIndex","line","includes","end","mergeContents","newSrc","anchor","offset","comment","header","createGeneratedHeaderComment","sanitizedTarget","removeGeneratedContents","addLines","didMerge","didClear","removeContents","content","find","toAdd","lines","lineIndex","match","error","Error","code","newLine","splice","join","hashKey","createHash","hash","crypto","update","digest"],"mappings":"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","sourcesContent":["/**\n * Get line indexes for the generated section of a file.\n *\n * @param src\n */\nimport crypto from 'crypto';\n\nfunction getGeneratedSectionIndexes(\n  src: string,\n  tag: string\n): { contents: string[]; start: number; end: number } {\n  const contents = src.split('\\n');\n  const start = contents.findIndex(line => line.includes(`@generated begin ${tag}`));\n  const end = contents.findIndex(line => line.includes(`@generated end ${tag}`));\n\n  return { contents, start, end };\n}\n\nexport type MergeResults = {\n  contents: string;\n  didClear: boolean;\n  didMerge: boolean;\n};\n\n/**\n * Merge the contents of two files together and add a generated header.\n *\n * @param src contents of the original file\n * @param newSrc new contents to merge into the original file\n * @param identifier used to update and remove merges\n * @param anchor regex to where the merge should begin\n * @param offset line offset to start merging at (<1 for behind the anchor)\n * @param comment comment style `//` or `#`\n */\nexport function mergeContents({\n  src,\n  newSrc,\n  tag,\n  anchor,\n  offset,\n  comment,\n}: {\n  src: string;\n  newSrc: string;\n  tag: string;\n  anchor: string | RegExp;\n  offset: number;\n  comment: string;\n}): MergeResults {\n  const header = createGeneratedHeaderComment(newSrc, tag, comment);\n  if (!src.includes(header)) {\n    // Ensure the old generated contents are removed.\n    const sanitizedTarget = removeGeneratedContents(src, tag);\n    return {\n      contents: addLines(sanitizedTarget ?? src, anchor, offset, [\n        header,\n        ...newSrc.split('\\n'),\n        `${comment} @generated end ${tag}`,\n      ]),\n      didMerge: true,\n      didClear: !!sanitizedTarget,\n    };\n  }\n  return { contents: src, didClear: false, didMerge: false };\n}\n\nexport function removeContents({ src, tag }: { src: string; tag: string }): MergeResults {\n  // Ensure the old generated contents are removed.\n  const sanitizedTarget = removeGeneratedContents(src, tag);\n  return {\n    contents: sanitizedTarget ?? src,\n    didMerge: false,\n    didClear: !!sanitizedTarget,\n  };\n}\n\nfunction addLines(content: string, find: string | RegExp, offset: number, toAdd: string[]) {\n  const lines = content.split('\\n');\n\n  let lineIndex = lines.findIndex(line => line.match(find));\n  if (lineIndex < 0) {\n    const error = new Error(`Failed to match \"${find}\" in contents:\\n${content}`);\n    // @ts-ignore\n    error.code = 'ERR_NO_MATCH';\n    throw error;\n  }\n  for (const newLine of toAdd) {\n    lines.splice(lineIndex + offset, 0, newLine);\n    lineIndex++;\n  }\n\n  return lines.join('\\n');\n}\n\n/**\n * Removes the generated section from a file, returns null when nothing can be removed.\n * This sways heavily towards not removing lines unless it's certain that modifications were not made manually.\n *\n * @param src\n */\nexport function removeGeneratedContents(src: string, tag: string): string | null {\n  const { contents, start, end } = getGeneratedSectionIndexes(src, tag);\n  if (start > -1 && end > -1 && start < end) {\n    contents.splice(start, end - start + 1);\n    // TODO: We could in theory check that the contents we're removing match the hash used in the header,\n    // this would ensure that we don't accidentally remove lines that someone added or removed from the generated section.\n    return contents.join('\\n');\n  }\n  return null;\n}\n\nexport function createGeneratedHeaderComment(\n  contents: string,\n  tag: string,\n  comment: string\n): string {\n  const hashKey = createHash(contents);\n\n  // Everything after the `${tag} ` is unversioned and can be freely modified without breaking changes.\n  return `${comment} @generated begin ${tag} - expo prebuild (DO NOT MODIFY) ${hashKey}`;\n}\n\nexport function createHash(src: string): string {\n  // this doesn't need to be secure, the shorter the better.\n  const hash = crypto.createHash('sha1').update(src).digest('hex');\n  return `sync-${hash}`;\n}\n"],"file":"generateCode.js"}