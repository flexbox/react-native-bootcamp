{"version":3,"sources":["../../../src/commands/bundle/buildBundle.ts"],"names":["buildBundle","args","ctx","output","outputBundle","config","maxWorkers","resetCache","resolver","platforms","indexOf","platform","logger","error","chalk","bold","info","map","x","join","Error","process","env","NODE_ENV","dev","sourceMapUrl","sourcemapOutput","sourcemapUseAbsolutePath","path","basename","requestOpts","entryFile","minify","undefined","unstable_transformProfile","unstableTransformProfile","server","Server","bundle","build","save","outputAssets","getAssets","DEFAULT_BUNDLE_OPTIONS","bundleType","assetsDest","end"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// @ts-ignore - no typed definition for the package\nimport Server from 'metro/src/Server';\n// @ts-ignore - no typed definition for the package\nimport outputBundle from 'metro/src/shared/output/bundle';\nimport path from 'path';\nimport chalk from 'chalk';\nimport {CommandLineArgs} from './bundleCommandLineArgs';\nimport {Config} from '@react-native-community/cli-types';\nimport saveAssets from './saveAssets';\nimport loadMetroConfig from '../../tools/loadMetroConfig';\nimport {logger} from '@react-native-community/cli-tools';\n\ninterface RequestOptions {\n  entryFile: string;\n  sourceMapUrl: string | undefined;\n  dev: boolean;\n  minify: boolean;\n  platform: string | undefined;\n  unstable_transformProfile: string | undefined;\n}\n\nexport interface AssetData {\n  __packager_asset: boolean;\n  fileSystemLocation: string;\n  hash: string;\n  height: number | null;\n  httpServerLocation: string;\n  name: string;\n  scales: number[];\n  type: string;\n  width: number | null;\n  files: string[];\n}\n\nasync function buildBundle(\n  args: CommandLineArgs,\n  ctx: Config,\n  output: typeof outputBundle = outputBundle,\n) {\n  const config = await loadMetroConfig(ctx, {\n    maxWorkers: args.maxWorkers,\n    resetCache: args.resetCache,\n    config: args.config,\n  });\n\n  if (config.resolver.platforms.indexOf(args.platform) === -1) {\n    logger.error(\n      `Invalid platform ${\n        args.platform ? `\"${chalk.bold(args.platform)}\" ` : ''\n      }selected.`,\n    );\n\n    logger.info(\n      `Available platforms are: ${config.resolver.platforms\n        .map((x) => `\"${chalk.bold(x)}\"`)\n        .join(\n          ', ',\n        )}. If you are trying to bundle for an out-of-tree platform, it may not be installed.`,\n    );\n\n    throw new Error('Bundling failed');\n  }\n\n  // This is used by a bazillion of npm modules we don't control so we don't\n  // have other choice than defining it as an env variable here.\n  process.env.NODE_ENV = args.dev ? 'development' : 'production';\n\n  let sourceMapUrl = args.sourcemapOutput;\n  if (sourceMapUrl && !args.sourcemapUseAbsolutePath) {\n    sourceMapUrl = path.basename(sourceMapUrl);\n  }\n\n  const requestOpts: RequestOptions = {\n    entryFile: args.entryFile,\n    sourceMapUrl,\n    dev: args.dev,\n    minify: args.minify !== undefined ? args.minify : !args.dev,\n    platform: args.platform,\n    unstable_transformProfile: args.unstableTransformProfile,\n  };\n  const server = new Server(config);\n\n  try {\n    const bundle = await output.build(server, requestOpts);\n\n    await output.save(bundle, args, logger.info);\n\n    // Save the assets of the bundle\n    const outputAssets: AssetData[] = await server.getAssets({\n      ...Server.DEFAULT_BUNDLE_OPTIONS,\n      ...requestOpts,\n      bundleType: 'todo',\n    });\n\n    // When we're done saving bundle output and the assets, we're done.\n    return await saveAssets(outputAssets, args.platform, args.assetsDest);\n  } finally {\n    server.end();\n  }\n}\n\nexport default buildBundle;\n"]}