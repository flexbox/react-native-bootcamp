{"version":3,"sources":["../../../src/commands/init/initCompat.ts"],"names":["initCompat","projectDir","argsOrName","args","Array","isArray","concat","process","argv","slice","length","logger","error","newProjectName","options","info","generateProject","destinationRoot","pkgJson","require","reactVersion","peerDependencies","react","template","PackageManager","install","root","installDev","addJestToPackageJson","platform","projectName","packageJSONPath","path","join","packageJSON","JSON","parse","fs","readFileSync","toString","scripts","test","lint","jest","preset","writeFileSync","stringify"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport fs from 'fs';\nimport minimist from 'minimist';\nimport path from 'path';\nimport process from 'process';\nimport printRunInstructions from './printRunInstructions';\nimport {createProjectFromTemplate} from '../../tools/generator/templates';\nimport * as PackageManager from '../../tools/packageManager';\nimport {logger} from '@react-native-community/cli-tools';\nimport installPods from '../../tools/installPods';\n\n/**\n * Creates the template for a React Native project given the provided\n * parameters:\n * @param projectDir Templates will be copied here.\n * @param argsOrName Project name or full list of custom arguments\n *                   for the generator.\n * @param options Command line options passed from the react-native-cli directly.\n *                E.g. `{ version: '0.43.0', template: 'navigation' }`\n */\nasync function initCompat(projectDir: string, argsOrName: string | string[]) {\n  const args = Array.isArray(argsOrName)\n    ? argsOrName // argsOrName was e.g. ['AwesomeApp', '--verbose']\n    : [argsOrName].concat(process.argv.slice(4)); // argsOrName was e.g. 'AwesomeApp'\n\n  // args array is e.g. ['AwesomeApp', '--verbose', '--template', 'navigation']\n  if (!args || args.length === 0) {\n    logger.error('react-native init requires a project name.');\n    return;\n  }\n\n  const newProjectName = args[0];\n  const options = minimist(args);\n\n  logger.info(`Setting up new React Native app in ${projectDir}`);\n  await generateProject(projectDir, newProjectName, options);\n}\n\n/**\n * Generates a new React Native project based on the template.\n * @param Absolute path at which the project folder should be created.\n * @param options Command line arguments parsed by minimist.\n */\nasync function generateProject(\n  destinationRoot: string,\n  newProjectName: string,\n  options: any,\n) {\n  const pkgJson = require('react-native/package.json');\n  const reactVersion = pkgJson.peerDependencies.react;\n\n  await createProjectFromTemplate(\n    destinationRoot,\n    newProjectName,\n    options.template,\n  );\n\n  logger.info('Adding required dependencies');\n  await PackageManager.install([`react@${reactVersion}`], {\n    root: destinationRoot,\n  });\n\n  logger.info('Adding required dev dependencies');\n  await PackageManager.installDev(\n    [\n      '@babel/core',\n      '@babel/runtime',\n      '@react-native-community/eslint-config',\n      'eslint',\n      'jest',\n      'babel-jest',\n      'metro-react-native-babel-preset',\n      `react-test-renderer@${reactVersion}`,\n    ],\n    {\n      root: destinationRoot,\n    },\n  );\n\n  addJestToPackageJson(destinationRoot);\n\n  if (process.platform === 'darwin') {\n    logger.info('Installing required CocoaPods dependencies');\n\n    await installPods({projectName: newProjectName});\n  }\n\n  printRunInstructions(destinationRoot, newProjectName);\n}\n\n/**\n * Add Jest-related stuff to package.json, which was created by the react-native-cli.\n */\nfunction addJestToPackageJson(destinationRoot: string) {\n  const packageJSONPath = path.join(destinationRoot, 'package.json');\n  const packageJSON = JSON.parse(fs.readFileSync(packageJSONPath).toString());\n\n  packageJSON.scripts.test = 'jest';\n  packageJSON.scripts.lint = 'eslint .';\n  packageJSON.jest = {\n    preset: 'react-native',\n  };\n  fs.writeFileSync(\n    packageJSONPath,\n    `${JSON.stringify(packageJSON, null, 2)}\\n`,\n  );\n}\n\nexport default initCompat;\n"]}