{"version":3,"sources":["../src/devToolsMiddleware.ts"],"names":["launchDefaultDebugger","host","port","args","hostname","debuggerURL","logger","info","escapePath","pathname","launchDevTools","watchFolders","isDebuggerConnected","customDebugger","process","env","REACT_DEBUGGER","startCustomDebugger","folders","map","join","command","error","stack","getDevToolsMiddleware","options","devToolsMiddleware","_req","res","end"],"mappings":";;;;;;;AAOA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AARA;;;;;;AAUA,SAASA,qBAAT,CACEC,IADF,EAEEC,IAFF,EAGEC,IAAI,GAAG,EAHT,EAIE;AACA,QAAMC,QAAQ,GAAGH,IAAI,IAAI,WAAzB;AACA,QAAMI,WAAW,GAAI,UAASD,QAAS,IAAGF,IAAK,eAAcC,IAAK,EAAlE;;AACAG,qBAAOC,IAAP,CAAY,wBAAZ;;AACA,kCAAeF,WAAf;AACD;;AAED,SAASG,UAAT,CAAoBC,QAApB,EAAsC;AACpC;AACA,SAAQ,IAAGA,QAAS,GAApB;AACD;;AAQD,SAASC,cAAT,CACE;AAACT,EAAAA,IAAD;AAAOC,EAAAA,IAAP;AAAaS,EAAAA;AAAb,CADF,EAEEC,mBAFF,EAGE;AACA;AACA,QAAMC,cAAc,GAAGC,OAAO,CAACC,GAAR,CAAYC,cAAnC;;AACA,MAAIH,cAAJ,EAAoB;AAClBI,IAAAA,mBAAmB,CAAC;AAACN,MAAAA,YAAD;AAAeE,MAAAA;AAAf,KAAD,CAAnB;AACD,GAFD,MAEO,IAAI,CAACD,mBAAmB,EAAxB,EAA4B;AACjC;AACAZ,IAAAA,qBAAqB,CAACC,IAAD,EAAOC,IAAP,CAArB;AACD;AACF;;AAED,SAASe,mBAAT,CAA6B;AAC3BN,EAAAA,YAD2B;AAE3BE,EAAAA;AAF2B,CAA7B,EAMG;AACD,QAAMK,OAAO,GAAGP,YAAY,CAACQ,GAAb,CAAiBX,UAAjB,EAA6BY,IAA7B,CAAkC,GAAlC,CAAhB;AACA,QAAMC,OAAO,GAAI,GAAER,cAAe,IAAGK,OAAQ,EAA7C;;AACAZ,qBAAOC,IAAP,CAAY,wCAAZ,EAAsDc,OAAtD;;AACA,6BAAKA,OAAL,EAAc,UAAUC,KAAV,EAAiB;AAC7B,QAAIA,KAAK,KAAK,IAAd,EAAoB;AAClBhB,yBAAOgB,KAAP,CAAa,uCAAb,EAAsDA,KAAK,CAACC,KAAN,IAAe,EAArE;AACD;AACF,GAJD;AAKD;;AAEc,SAASC,qBAAT,CACbC,OADa,EAEbb,mBAFa,EAGb;AACA,SAAO,SAASc,kBAAT,CACLC,IADK,EAELC,GAFK,EAGL;AACAlB,IAAAA,cAAc,CAACe,OAAD,EAAUb,mBAAV,CAAd;AACAgB,IAAAA,GAAG,CAACC,GAAJ,CAAQ,IAAR;AACD,GAND;AAOD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport http from 'http';\nimport {launchDebugger, logger} from '@react-native-community/cli-tools';\nimport {exec} from 'child_process';\n\nfunction launchDefaultDebugger(\n  host: string | undefined,\n  port: number,\n  args = '',\n) {\n  const hostname = host || 'localhost';\n  const debuggerURL = `http://${hostname}:${port}/debugger-ui${args}`;\n  logger.info('Launching Dev Tools...');\n  launchDebugger(debuggerURL);\n}\n\nfunction escapePath(pathname: string) {\n  // \" Can escape paths with spaces in OS X, Windows, and *nix\n  return `\"${pathname}\"`;\n}\n\ntype LaunchDevToolsOptions = {\n  host?: string;\n  port: number;\n  watchFolders: ReadonlyArray<string>;\n};\n\nfunction launchDevTools(\n  {host, port, watchFolders}: LaunchDevToolsOptions,\n  isDebuggerConnected: () => boolean,\n) {\n  // Explicit config always wins\n  const customDebugger = process.env.REACT_DEBUGGER;\n  if (customDebugger) {\n    startCustomDebugger({watchFolders, customDebugger});\n  } else if (!isDebuggerConnected()) {\n    // Debugger is not yet open; we need to open a session\n    launchDefaultDebugger(host, port);\n  }\n}\n\nfunction startCustomDebugger({\n  watchFolders,\n  customDebugger,\n}: {\n  watchFolders: ReadonlyArray<string>;\n  customDebugger: string;\n}) {\n  const folders = watchFolders.map(escapePath).join(' ');\n  const command = `${customDebugger} ${folders}`;\n  logger.info('Starting custom debugger by executing:', command);\n  exec(command, function (error) {\n    if (error !== null) {\n      logger.error('Error while starting custom debugger:', error.stack || '');\n    }\n  });\n}\n\nexport default function getDevToolsMiddleware(\n  options: LaunchDevToolsOptions,\n  isDebuggerConnected: () => boolean,\n) {\n  return function devToolsMiddleware(\n    _req: http.IncomingMessage,\n    res: http.ServerResponse,\n  ) {\n    launchDevTools(options, isDebuggerConnected);\n    res.end('OK');\n  };\n}\n"]}