{"version":3,"sources":["eventReceiver.ts"],"names":["gestureHandlerEventSubscription","gestureHandlerStateChangeEventSubscription","dummyStateManager","begin","console","warn","activate","end","fail","lastUpdateEvent","isStateChangeEvent","event","oldState","isTouchEvent","eventType","onGestureHandlerEvent","handler","handlerTag","State","UNDETERMINED","state","BEGAN","handlers","onBegin","ACTIVE","onStart","END","onEnd","onFinalize","undefined","FAILED","CANCELLED","EventType","TOUCHES_DOWN","onTouchesDown","TOUCHES_MOVE","onTouchesMove","TOUCHES_UP","onTouchesUp","TOUCHES_CANCELLED","onTouchesCancelled","onUpdate","onChange","changeEventCalculator","startListening","stopListening","DeviceEventEmitter","addListener","removeSubscription"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AAOA;;AAGA,IAAIA,+BAA2D,GAAG,IAAlE;AACA,IAAIC,0CAAsE,GAAG,IAA7E;AAEA,MAAMC,iBAA0C,GAAG;AACjDC,EAAAA,KAAK,EAAE,MAAM;AACXC,IAAAA,OAAO,CAACC,IAAR,CACE,uFADF;AAGD,GALgD;AAMjDC,EAAAA,QAAQ,EAAE,MAAM;AACdF,IAAAA,OAAO,CAACC,IAAR,CACE,uFADF;AAGD,GAVgD;AAWjDE,EAAAA,GAAG,EAAE,MAAM;AACTH,IAAAA,OAAO,CAACC,IAAR,CACE,uFADF;AAGD,GAfgD;AAgBjDG,EAAAA,IAAI,EAAE,MAAM;AACVJ,IAAAA,OAAO,CAACC,IAAR,CACE,uFADF;AAGD;AApBgD,CAAnD;AAuBA,MAAMI,eAAmD,GAAG,EAA5D;;AAEA,SAASC,kBAAT,CACEC,KADF,EAEoC;AAClC;AACA,SAAOA,KAAK,CAACC,QAAN,IAAkB,IAAzB;AACD;;AAED,SAASC,YAAT,CACEF,KADF,EAE8B;AAC5B,SAAOA,KAAK,CAACG,SAAN,IAAmB,IAA1B;AACD;;AAED,SAASC,qBAAT,CACEJ,KADF,EAEE;AAAA;;AACA,QAAMK,OAAO,GAAG,mCAAYL,KAAK,CAACM,UAAlB,CAAhB;;AAIA,MAAID,OAAJ,EAAa;AACX,QAAIN,kBAAkB,CAACC,KAAD,CAAtB,EAA+B;AAC7B,UACEA,KAAK,CAACC,QAAN,KAAmBM,aAAMC,YAAzB,IACAR,KAAK,CAACS,KAAN,KAAgBF,aAAMG,KAFxB,EAGE;AAAA;;AACA,sDAAAL,OAAO,CAACM,QAAR,EAAiBC,OAAjB,wGAA2BZ,KAA3B;AACD,OALD,MAKO,IACL,CAACA,KAAK,CAACC,QAAN,KAAmBM,aAAMG,KAAzB,IACCV,KAAK,CAACC,QAAN,KAAmBM,aAAMC,YAD3B,KAEAR,KAAK,CAACS,KAAN,KAAgBF,aAAMM,MAHjB,EAIL;AAAA;;AACA,uDAAAR,OAAO,CAACM,QAAR,EAAiBG,OAAjB,yGAA2Bd,KAA3B;AACAF,QAAAA,eAAe,CAACO,OAAO,CAACM,QAAR,CAAiBL,UAAlB,CAAf,GAA+CN,KAA/C;AACD,OAPM,MAOA,IAAIA,KAAK,CAACC,QAAN,KAAmBD,KAAK,CAACS,KAAzB,IAAkCT,KAAK,CAACS,KAAN,KAAgBF,aAAMQ,GAA5D,EAAiE;AAAA;;AACtE,YAAIf,KAAK,CAACC,QAAN,KAAmBM,aAAMM,MAA7B,EAAqC;AAAA;;AACnC,yDAAAR,OAAO,CAACM,QAAR,EAAiBK,KAAjB,yGAAyBhB,KAAzB,EAAgC,IAAhC;AACD;;AACD,uDAAAK,OAAO,CAACM,QAAR,EAAiBM,UAAjB,yGAA8BjB,KAA9B,EAAqC,IAArC;AACAF,QAAAA,eAAe,CAACO,OAAO,CAACM,QAAR,CAAiBL,UAAlB,CAAf,GAA+CY,SAA/C;AACD,OANM,MAMA,IACL,CAAClB,KAAK,CAACS,KAAN,KAAgBF,aAAMY,MAAtB,IAAgCnB,KAAK,CAACS,KAAN,KAAgBF,aAAMa,SAAvD,KACApB,KAAK,CAACC,QAAN,KAAmBD,KAAK,CAACS,KAFpB,EAGL;AAAA;;AACA,YAAIT,KAAK,CAACC,QAAN,KAAmBM,aAAMM,MAA7B,EAAqC;AAAA;;AACnC,0DAAAR,OAAO,CAACM,QAAR,EAAiBK,KAAjB,2GAAyBhB,KAAzB,EAAgC,KAAhC;AACD;;AACD,wDAAAK,OAAO,CAACM,QAAR,EAAiBM,UAAjB,2GAA8BjB,KAA9B,EAAqC,KAArC;AACAF,QAAAA,eAAe,CAACO,OAAO,CAACM,QAAR,CAAiBL,UAAlB,CAAf,GAA+CY,SAA/C;AACD;AACF,KA7BD,MA6BO,IAAIhB,YAAY,CAACF,KAAD,CAAhB,EAAyB;AAC9B,cAAQA,KAAK,CAACG,SAAd;AACE,aAAKkB,qBAAUC,YAAf;AACE,gCAAAjB,OAAO,CAACM,QAAR,mGAAkBY,aAAlB,yGAAkCvB,KAAlC,EAAyCT,iBAAzC;AACA;;AACF,aAAK8B,qBAAUG,YAAf;AACE,gCAAAnB,OAAO,CAACM,QAAR,mGAAkBc,aAAlB,yGAAkCzB,KAAlC,EAAyCT,iBAAzC;AACA;;AACF,aAAK8B,qBAAUK,UAAf;AACE,gCAAArB,OAAO,CAACM,QAAR,mGAAkBgB,WAAlB,yGAAgC3B,KAAhC,EAAuCT,iBAAvC;AACA;;AACF,aAAK8B,qBAAUO,iBAAf;AACE,iCAAAvB,OAAO,CAACM,QAAR,qGAAkBkB,kBAAlB,0GAAuC7B,KAAvC,EAA8CT,iBAA9C;AACA;AAZJ;AAcD,KAfM,MAeA;AAAA;;AACL,sDAAAc,OAAO,CAACM,QAAR,EAAiBmB,QAAjB,0GAA4B9B,KAA5B;;AAEA,UAAIK,OAAO,CAACM,QAAR,CAAiBoB,QAAjB,IAA6B1B,OAAO,CAACM,QAAR,CAAiBqB,qBAAlD,EAAyE;AAAA;;AACvE,wDAAA3B,OAAO,CAACM,QAAR,EAAiBoB,QAAjB,mIACE,uBAAA1B,OAAO,CAACM,QAAR,EAAiBqB,qBADnB,0DACE,gDACEhC,KADF,EAEEF,eAAe,CAACO,OAAO,CAACM,QAAR,CAAiBL,UAAlB,CAFjB,CADF;AAOAR,QAAAA,eAAe,CAACO,OAAO,CAACM,QAAR,CAAiBL,UAAlB,CAAf,GAA+CN,KAA/C;AACD;AACF;AACF;AACF;;AAEM,SAASiC,cAAT,GAA0B;AAC/BC,EAAAA,aAAa;AAEb7C,EAAAA,+BAA+B,GAAG8C,gCAAmBC,WAAnB,CAChC,uBADgC,EAEhChC,qBAFgC,CAAlC;AAKAd,EAAAA,0CAA0C,GAAG6C,gCAAmBC,WAAnB,CAC3C,6BAD2C,EAE3ChC,qBAF2C,CAA7C;AAID;;AAEM,SAAS8B,aAAT,GAAyB;AAC9B,MAAI7C,+BAAJ,EAAqC;AACnC8C,oCAAmBE,kBAAnB,CAAsChD,+BAAtC;;AAEAA,IAAAA,+BAA+B,GAAG,IAAlC;AACD;;AAED,MAAIC,0CAAJ,EAAgD;AAC9C6C,oCAAmBE,kBAAnB,CACE/C,0CADF;;AAIAA,IAAAA,0CAA0C,GAAG,IAA7C;AACD;AACF","sourcesContent":["import { DeviceEventEmitter, EmitterSubscription } from 'react-native';\nimport { State } from '../../State';\nimport { EventType } from '../../EventType';\nimport {\n  GestureTouchEvent,\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport { GestureStateManagerType } from './gestureStateManager';\nimport { findHandler } from '../handlersRegistry';\nimport { BaseGesture } from './gesture';\n\nlet gestureHandlerEventSubscription: EmitterSubscription | null = null;\nlet gestureHandlerStateChangeEventSubscription: EmitterSubscription | null = null;\n\nconst dummyStateManager: GestureStateManagerType = {\n  begin: () => {\n    console.warn(\n      'You have to use react-native-reanimated in order to control the state of the gesture.'\n    );\n  },\n  activate: () => {\n    console.warn(\n      'You have to use react-native-reanimated in order to control the state of the gesture.'\n    );\n  },\n  end: () => {\n    console.warn(\n      'You have to use react-native-reanimated in order to control the state of the gesture.'\n    );\n  },\n  fail: () => {\n    console.warn(\n      'You have to use react-native-reanimated in order to control the state of the gesture.'\n    );\n  },\n};\n\nconst lastUpdateEvent: (GestureUpdateEvent | undefined)[] = [];\n\nfunction isStateChangeEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureStateChangeEvent {\n  // @ts-ignore oldState doesn't exist on GestureTouchEvent and that's the point\n  return event.oldState != null;\n}\n\nfunction isTouchEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureTouchEvent {\n  return event.eventType != null;\n}\n\nfunction onGestureHandlerEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n) {\n  const handler = findHandler(event.handlerTag) as BaseGesture<\n    Record<string, unknown>\n  >;\n\n  if (handler) {\n    if (isStateChangeEvent(event)) {\n      if (\n        event.oldState === State.UNDETERMINED &&\n        event.state === State.BEGAN\n      ) {\n        handler.handlers.onBegin?.(event);\n      } else if (\n        (event.oldState === State.BEGAN ||\n          event.oldState === State.UNDETERMINED) &&\n        event.state === State.ACTIVE\n      ) {\n        handler.handlers.onStart?.(event);\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      } else if (event.oldState !== event.state && event.state === State.END) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, true);\n        }\n        handler.handlers.onFinalize?.(event, true);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      } else if (\n        (event.state === State.FAILED || event.state === State.CANCELLED) &&\n        event.oldState !== event.state\n      ) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, false);\n        }\n        handler.handlers.onFinalize?.(event, false);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      }\n    } else if (isTouchEvent(event)) {\n      switch (event.eventType) {\n        case EventType.TOUCHES_DOWN:\n          handler.handlers?.onTouchesDown?.(event, dummyStateManager);\n          break;\n        case EventType.TOUCHES_MOVE:\n          handler.handlers?.onTouchesMove?.(event, dummyStateManager);\n          break;\n        case EventType.TOUCHES_UP:\n          handler.handlers?.onTouchesUp?.(event, dummyStateManager);\n          break;\n        case EventType.TOUCHES_CANCELLED:\n          handler.handlers?.onTouchesCancelled?.(event, dummyStateManager);\n          break;\n      }\n    } else {\n      handler.handlers.onUpdate?.(event);\n\n      if (handler.handlers.onChange && handler.handlers.changeEventCalculator) {\n        handler.handlers.onChange?.(\n          handler.handlers.changeEventCalculator?.(\n            event,\n            lastUpdateEvent[handler.handlers.handlerTag]\n          )\n        );\n\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      }\n    }\n  }\n}\n\nexport function startListening() {\n  stopListening();\n\n  gestureHandlerEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerEvent',\n    onGestureHandlerEvent\n  );\n\n  gestureHandlerStateChangeEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerStateChange',\n    onGestureHandlerEvent\n  );\n}\n\nexport function stopListening() {\n  if (gestureHandlerEventSubscription) {\n    DeviceEventEmitter.removeSubscription(gestureHandlerEventSubscription);\n\n    gestureHandlerEventSubscription = null;\n  }\n\n  if (gestureHandlerStateChangeEventSubscription) {\n    DeviceEventEmitter.removeSubscription(\n      gestureHandlerStateChangeEventSubscription\n    );\n\n    gestureHandlerStateChangeEventSubscription = null;\n  }\n}\n"]}