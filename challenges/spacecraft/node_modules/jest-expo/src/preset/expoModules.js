module.exports = {
  AIRGoogleMapCalloutManager: {},
  AIRGoogleMapCalloutSubviewManager: {},
  AIRGoogleMapCircleManager: {},
  AIRGoogleMapHeatmapManager: {},
  AIRGoogleMapManager: {
    animateCamera: { type: 'function', functionType: 'async' },
    animateToBearing: { type: 'function', functionType: 'async' },
    animateToCoordinate: { type: 'function', functionType: 'async' },
    animateToNavigation: { type: 'function', functionType: 'async' },
    animateToRegion: { type: 'function', functionType: 'async' },
    animateToViewingAngle: { type: 'function', functionType: 'async' },
    coordinateForPoint: { type: 'function', functionType: 'promise' },
    fitToCoordinates: { type: 'function', functionType: 'async' },
    fitToElements: { type: 'function', functionType: 'async' },
    fitToSuppliedMarkers: { type: 'function', functionType: 'async' },
    getCamera: { type: 'function', functionType: 'promise' },
    getConstants: { type: 'function' },
    getMapBoundaries: { type: 'function', functionType: 'promise' },
    getMarkersFrames: { type: 'function', functionType: 'promise' },
    legalNotice: { type: 'string' },
    pointForCoordinate: { type: 'function', functionType: 'promise' },
    setCamera: { type: 'function', functionType: 'async' },
    setIndoorActiveLevelIndex: { type: 'function', functionType: 'async' },
    setMapBoundaries: { type: 'function', functionType: 'async' },
    takeSnapshot: { type: 'function', functionType: 'async' },
  },
  AIRGoogleMapMarkerManager: {
    getConstants: { type: 'function' },
    hideCallout: { type: 'function', functionType: 'async' },
    redraw: { type: 'function', functionType: 'async' },
    redrawCallout: { type: 'function', functionType: 'async' },
    showCallout: { type: 'function', functionType: 'async' },
  },
  AIRGoogleMapOverlayManager: {},
  AIRGoogleMapPolygonManager: {},
  AIRGoogleMapPolylineManager: {},
  AIRGoogleMapUrlTileManager: {},
  AIRGoogleMapWMSTileManager: {},
  AIRMapCalloutManager: {},
  AIRMapCalloutSubviewManager: {},
  AIRMapCircleManager: {},
  AIRMapLocalTileManager: {},
  AIRMapManager: {
    animateCamera: { type: 'function', functionType: 'async' },
    animateToBearing: { type: 'function', functionType: 'async' },
    animateToCoordinate: { type: 'function', functionType: 'async' },
    animateToNavigation: { type: 'function', functionType: 'async' },
    animateToRegion: { type: 'function', functionType: 'async' },
    animateToViewingAngle: { type: 'function', functionType: 'async' },
    coordinateForPoint: { type: 'function', functionType: 'promise' },
    fitToCoordinates: { type: 'function', functionType: 'async' },
    fitToElements: { type: 'function', functionType: 'async' },
    fitToSuppliedMarkers: { type: 'function', functionType: 'async' },
    getAddressFromCoordinates: { type: 'function', functionType: 'promise' },
    getCamera: { type: 'function', functionType: 'promise' },
    getConstants: { type: 'function' },
    getMapBoundaries: { type: 'function', functionType: 'promise' },
    getMarkersFrames: { type: 'function', functionType: 'promise' },
    pointForCoordinate: { type: 'function', functionType: 'promise' },
    setCamera: { type: 'function', functionType: 'async' },
    takeSnapshot: { type: 'function', functionType: 'async' },
  },
  AIRMapMarkerManager: {
    getConstants: { type: 'function' },
    hideCallout: { type: 'function', functionType: 'async' },
    redrawCallout: { type: 'function', functionType: 'async' },
    showCallout: { type: 'function', functionType: 'async' },
  },
  AIRMapOverlayManager: {},
  AIRMapPolygonManager: {},
  AIRMapPolylineManager: {},
  AIRMapUrlTileManager: {},
  AIRMapWMSTileManager: {},
  'ExpoModulesCore.ViewModuleWrapper': {},
  ExpoNativeModuleIntrospection: {
    getConstants: { type: 'function' },
    getNativeModuleNamesAsync: { type: 'function', functionType: 'promise' },
    introspectNativeModuleAsync: { type: 'function', functionType: 'promise' },
  },
  ExpoRandom: {
    getConstants: { type: 'function' },
    getRandomBase64String: { type: 'function', functionType: 'sync' },
    getRandomBase64StringAsync: { type: 'function', functionType: 'promise' },
  },
  ExponentAV: { Qualities: { type: 'object' }, getConstants: { type: 'function' } },
  ExponentNotifications: {
    cancelAllScheduledNotificationsAsync: { type: 'function', functionType: 'promise' },
    cancelScheduledNotificationAsync: { type: 'function', functionType: 'promise' },
    createCategoryAsync: { type: 'function', functionType: 'promise' },
    deleteCategoryAsync: { type: 'function', functionType: 'promise' },
    getBadgeNumberAsync: { type: 'function', functionType: 'promise' },
    getConstants: { type: 'function' },
    getDevicePushTokenAsync: { type: 'function', functionType: 'promise' },
    getExponentPushTokenAsync: { type: 'function', functionType: 'promise' },
    legacyScheduleLocalRepeatingNotification: { type: 'function', functionType: 'promise' },
    presentLocalNotification: { type: 'function', functionType: 'promise' },
    scheduleLocalNotification: { type: 'function', functionType: 'promise' },
    scheduleNotificationWithCalendar: { type: 'function', functionType: 'promise' },
    scheduleNotificationWithTimer: { type: 'function', functionType: 'promise' },
    setBadgeNumberAsync: { type: 'function', functionType: 'promise' },
  },
  ExponentScopedModuleRegistry: {},
  ExponentTest: {
    action: { type: 'function', functionType: 'promise' },
    completed: { type: 'function', functionType: 'async' },
    getConstants: { type: 'function' },
    isInCI: { type: 'number', mock: 0 },
    log: { type: 'function', functionType: 'async' },
    shouldSkipTestsRequiringPermissionsAsync: { type: 'function', functionType: 'promise' },
  },
  ExponentUtil: {},
  LottieAnimationView: {
    VERSION: { type: 'number', mock: 1 },
    getConstants: { type: 'function' },
    pause: { type: 'function', functionType: 'async' },
    play: { type: 'function', functionType: 'async' },
    reset: { type: 'function', functionType: 'async' },
    resume: { type: 'function', functionType: 'async' },
  },
  NativeUnimoduleProxy: {
    callMethod: { type: 'function', functionType: 'promise' },
    exportedMethods: {
      type: 'object',
      mock: {
        '': [],
        AdIconViewManager: [],
        AdOptionsViewManager: [],
        CTKAdSettingsManager: [
          { key: 0, argumentsCount: 1, name: 'setIsChildDirected' },
          { key: 1, argumentsCount: 0, name: 'getPermissionsAsync' },
          { key: 2, argumentsCount: 1, name: 'addTestDevice' },
          { key: 3, argumentsCount: 1, name: 'setLogLevel' },
          { key: 4, argumentsCount: 0, name: 'clearTestDevices' },
          { key: 5, argumentsCount: 1, name: 'setUrlPrefix' },
          { key: 6, argumentsCount: 0, name: 'requestPermissionsAsync' },
          { key: 7, argumentsCount: 1, name: 'setMeditationService' },
          { key: 8, argumentsCount: 1, name: 'setAdvertiserTrackingEnabled' },
        ],
        CTKBannerViewManager: [],
        CTKInterstitialAdManager: [{ key: 0, argumentsCount: 1, name: 'showAd' }],
        CTKNativeAdManager: [
          { key: 0, argumentsCount: 1, name: 'disableAutoRefresh' },
          { key: 1, argumentsCount: 2, name: 'setMediaCachePolicy' },
          { key: 2, argumentsCount: 4, name: 'registerViewsForInteraction' },
          { key: 3, argumentsCount: 2, name: 'init' },
        ],
        ExpoAdsAdMob: [
          { key: 0, argumentsCount: 0, name: 'getPermissionsAsync' },
          { key: 1, argumentsCount: 1, name: 'setTestDeviceIDAsync' },
          { key: 2, argumentsCount: 0, name: 'requestPermissionsAsync' },
        ],
        ExpoAdsAdMobBannerView: [],
        ExpoAdsAdMobInterstitialManager: [
          { key: 0, argumentsCount: 1, name: 'requestAd' },
          { key: 1, argumentsCount: 0, name: 'showAd' },
          { key: 2, argumentsCount: 0, name: 'dismissAd' },
          { key: 3, argumentsCount: 1, name: 'setAdUnitID' },
          { key: 4, argumentsCount: 0, name: 'getIsReady' },
        ],
        ExpoAdsAdMobRewardedVideoAdManager: [
          { key: 0, argumentsCount: 1, name: 'requestAd' },
          { key: 1, argumentsCount: 0, name: 'showAd' },
          { key: 2, argumentsCount: 0, name: 'dismissAd' },
          { key: 3, argumentsCount: 1, name: 'setAdUnitID' },
          { key: 4, argumentsCount: 0, name: 'getIsReady' },
        ],
        ExpoAmplitude: [
          { key: 0, argumentsCount: 1, name: 'initializeAsync' },
          { key: 1, argumentsCount: 1, name: 'setTrackingOptionsAsync' },
          { key: 2, argumentsCount: 2, name: 'setGroupAsync' },
          { key: 3, argumentsCount: 2, name: 'logEventWithPropertiesAsync' },
          { key: 4, argumentsCount: 1, name: 'setUserPropertiesAsync' },
          { key: 5, argumentsCount: 1, name: 'logEventAsync' },
          { key: 6, argumentsCount: 1, name: 'setUserIdAsync' },
          { key: 7, argumentsCount: 0, name: 'clearUserPropertiesAsync' },
        ],
        ExpoAppAuth: [{ key: 0, argumentsCount: 1, name: 'executeAsync' }],
        ExpoAppleAuthentication: [
          { key: 0, argumentsCount: 0, name: 'isAvailableAsync' },
          { key: 1, argumentsCount: 1, name: 'requestAsync' },
          { key: 2, argumentsCount: 1, name: 'getCredentialStateAsync' },
        ],
        ExpoAppleAuthenticationButtonContinueBlack: [],
        ExpoAppleAuthenticationButtonContinueWhite: [],
        ExpoAppleAuthenticationButtonContinueWhiteOutline: [],
        ExpoAppleAuthenticationButtonSignInBlack: [],
        ExpoAppleAuthenticationButtonSignInWhite: [],
        ExpoAppleAuthenticationButtonSignInWhiteOutline: [],
        ExpoAppleAuthenticationButtonSignUpBlack: [],
        ExpoAppleAuthenticationButtonSignUpWhite: [],
        ExpoAppleAuthenticationButtonSignUpWhiteOutline: [],
        ExpoApplication: [
          { key: 0, argumentsCount: 0, name: 'getIosIdForVendorAsync' },
          { key: 1, argumentsCount: 0, name: 'getPushNotificationServiceEnvironmentAsync' },
          { key: 2, argumentsCount: 0, name: 'getApplicationReleaseTypeAsync' },
          { key: 3, argumentsCount: 0, name: 'getInstallationTimeAsync' },
        ],
        ExpoBackgroundFetch: [
          { key: 0, argumentsCount: 1, name: 'unregisterTaskAsync' },
          { key: 1, argumentsCount: 1, name: 'setMinimumIntervalAsync' },
          { key: 2, argumentsCount: 0, name: 'getStatusAsync' },
          { key: 3, argumentsCount: 2, name: 'registerTaskAsync' },
        ],
        ExpoBackgroundNotificationTasksModule: [
          { key: 0, argumentsCount: 1, name: 'unregisterTaskAsync' },
          { key: 1, argumentsCount: 1, name: 'registerTaskAsync' },
        ],
        ExpoBadgeModule: [
          { key: 0, argumentsCount: 1, name: 'setBadgeCountAsync' },
          { key: 1, argumentsCount: 0, name: 'getBadgeCountAsync' },
        ],
        ExpoBarCodeScannerModule: [
          { key: 0, argumentsCount: 0, name: 'getPermissionsAsync' },
          { key: 1, argumentsCount: 2, name: 'scanFromURLAsync' },
          { key: 2, argumentsCount: 0, name: 'requestPermissionsAsync' },
        ],
        ExpoBarCodeScannerView: [],
        ExpoBarometer: [
          { key: 0, argumentsCount: 0, name: 'isAvailableAsync' },
          { key: 1, argumentsCount: 1, name: 'setUpdateInterval' },
        ],
        ExpoBattery: [
          { key: 0, argumentsCount: 0, name: 'getBatteryLevelAsync' },
          { key: 1, argumentsCount: 0, name: 'isLowPowerModeEnabledAsync' },
          { key: 2, argumentsCount: 0, name: 'getBatteryStateAsync' },
        ],
        ExpoBlurViewManager: [{ key: 0, argumentsCount: 2, name: 'setNativeProps' }],
        ExpoBrightness: [
          { key: 0, argumentsCount: 0, name: 'getPermissionsAsync' },
          { key: 1, argumentsCount: 0, name: 'getSystemBrightnessAsync' },
          { key: 2, argumentsCount: 0, name: 'setSystemBrightnessAsync' },
          { key: 3, argumentsCount: 0, name: 'useSystemBrightnessAsync' },
          { key: 4, argumentsCount: 0, name: 'isUsingSystemBrightnessAsync' },
          { key: 5, argumentsCount: 0, name: 'getSystemBrightnessModeAsync' },
          { key: 6, argumentsCount: 0, name: 'requestPermissionsAsync' },
          { key: 7, argumentsCount: 1, name: 'setBrightnessAsync' },
          { key: 8, argumentsCount: 0, name: 'getBrightnessAsync' },
          { key: 9, argumentsCount: 0, name: 'setSystemBrightnessModeAsync' },
        ],
        ExpoCalendar: [
          { key: 0, argumentsCount: 1, name: 'deleteCalendarAsync' },
          { key: 1, argumentsCount: 1, name: 'deleteReminderAsync' },
          { key: 2, argumentsCount: 0, name: 'getCalendarPermissionsAsync' },
          { key: 3, argumentsCount: 2, name: 'deleteEventAsync' },
          { key: 4, argumentsCount: 0, name: 'requestRemindersPermissionsAsync' },
          { key: 5, argumentsCount: 3, name: 'getEventsAsync' },
          { key: 6, argumentsCount: 0, name: 'getSourcesAsync' },
          { key: 7, argumentsCount: 1, name: 'getReminderByIdAsync' },
          { key: 8, argumentsCount: 0, name: 'requestCalendarPermissionsAsync' },
          { key: 9, argumentsCount: 1, name: 'getAttendeesForEventAsync' },
          { key: 10, argumentsCount: 4, name: 'getRemindersAsync' },
          { key: 11, argumentsCount: 0, name: 'getRemindersPermissionsAsync' },
          { key: 12, argumentsCount: 2, name: 'saveEventAsync' },
          { key: 13, argumentsCount: 1, name: 'getCalendarsAsync' },
          { key: 14, argumentsCount: 2, name: 'getEventByIdAsync' },
          { key: 15, argumentsCount: 0, name: 'getDefaultCalendarAsync' },
          { key: 16, argumentsCount: 1, name: 'saveCalendarAsync' },
          { key: 17, argumentsCount: 1, name: 'saveReminderAsync' },
          { key: 18, argumentsCount: 1, name: 'getSourceByIdAsync' },
        ],
        ExpoCellular: [
          { key: 'allowsVoipAsync', argumentsCount: 0, name: 'allowsVoipAsync' },
          {
            name: 'getCellularGenerationAsync',
            argumentsCount: 0,
            key: 'getCellularGenerationAsync',
          },
          {
            name: 'getMobileNetworkCodeAsync',
            argumentsCount: 0,
            key: 'getMobileNetworkCodeAsync',
          },
          { name: 'getCarrierNameAsync', key: 'getCarrierNameAsync', argumentsCount: 0 },
          {
            key: 'getMobileCountryCodeAsync',
            argumentsCount: 0,
            name: 'getMobileCountryCodeAsync',
          },
          { key: 'getIsoCountryCodeAsync', name: 'getIsoCountryCodeAsync', argumentsCount: 0 },
        ],
        ExpoClipboard: [
          { key: 'startObserving', name: 'startObserving', argumentsCount: 0 },
          { argumentsCount: 0, key: 'getStringAsync', name: 'getStringAsync' },
          { key: 'setString', name: 'setString', argumentsCount: 1 },
          { argumentsCount: 0, name: 'stopObserving', key: 'stopObserving' },
        ],
        ExpoContacts: [
          { key: 0, argumentsCount: 0, name: 'getDefaultContainerIdentifierAsync' },
          { key: 1, argumentsCount: 2, name: 'addExistingGroupToContainerAsync' },
          { key: 2, argumentsCount: 2, name: 'createGroupAsync' },
          { key: 3, argumentsCount: 2, name: 'addContactAsync' },
          { key: 4, argumentsCount: 1, name: 'removeGroupAsync' },
          { key: 5, argumentsCount: 2, name: 'removeContactFromGroupAsync' },
          { key: 6, argumentsCount: 1, name: 'removeContactAsync' },
          { key: 7, argumentsCount: 0, name: 'getPermissionsAsync' },
          { key: 8, argumentsCount: 1, name: 'updateContactAsync' },
          { key: 9, argumentsCount: 1, name: 'getGroupsAsync' },
          { key: 10, argumentsCount: 2, name: 'addExistingContactToGroupAsync' },
          { key: 11, argumentsCount: 1, name: 'getContainersAsync' },
          { key: 12, argumentsCount: 0, name: 'requestPermissionsAsync' },
          { key: 13, argumentsCount: 2, name: 'updateGroupNameAsync' },
          { key: 14, argumentsCount: 1, name: 'getContactsAsync' },
          { key: 15, argumentsCount: 3, name: 'presentFormAsync' },
          { key: 16, argumentsCount: 1, name: 'writeContactToFileAsync' },
          { key: 17, argumentsCount: 0, name: 'dismissFormAsync' },
        ],
        ExpoCrypto: [{ key: 0, argumentsCount: 3, name: 'digestStringAsync' }],
        ExpoDevice: [
          { key: 0, argumentsCount: 0, name: 'getDeviceTypeAsync' },
          { key: 1, argumentsCount: 0, name: 'isRootedExperimentalAsync' },
          { key: 2, argumentsCount: 0, name: 'getUptimeAsync' },
        ],
        ExpoDocumentPicker: [{ key: 0, argumentsCount: 1, name: 'getDocumentAsync' }],
        ExpoErrorRecovery: [{ key: 0, argumentsCount: 1, name: 'saveRecoveryProps' }],
        ExpoFaceDetector: [{ key: 0, argumentsCount: 1, name: 'detectFaces' }],
        ExpoFirebaseAnalytics: [
          { key: 0, argumentsCount: 2, name: 'logEvent' },
          { key: 1, argumentsCount: 1, name: 'setUserId' },
          { key: 2, argumentsCount: 0, name: 'resetAnalyticsData' },
          { key: 3, argumentsCount: 2, name: 'setCurrentScreen' },
          { key: 4, argumentsCount: 1, name: 'setUserProperties' },
          { key: 5, argumentsCount: 1, name: 'setSessionTimeoutDuration' },
          { key: 6, argumentsCount: 1, name: 'setAnalyticsCollectionEnabled' },
        ],
        ExpoFirebaseCore: [],
        ExpoFontLoader: [{ key: 0, argumentsCount: 2, name: 'loadAsync' }],
        ExpoGoogleSignIn: [
          { key: 0, argumentsCount: 1, name: 'getTokensAsync' },
          { key: 1, argumentsCount: 1, name: 'getPhotoAsync' },
          { key: 2, argumentsCount: 0, name: 'getCurrentUserAsync' },
          { key: 3, argumentsCount: 0, name: 'disconnectAsync' },
          { key: 4, argumentsCount: 0, name: 'signOutAsync' },
          { key: 5, argumentsCount: 1, name: 'initAsync' },
          { key: 6, argumentsCount: 0, name: 'signInAsync' },
          { key: 7, argumentsCount: 0, name: 'signInSilentlyAsync' },
          { key: 8, argumentsCount: 0, name: 'isConnectedAsync' },
        ],
        ExpoHaptics: [
          { argumentsCount: 1, name: 'impactAsync', key: 'impactAsync' },
          { key: 'selectionAsync', name: 'selectionAsync', argumentsCount: 0 },
          { key: 'notificationAsync', name: 'notificationAsync', argumentsCount: 1 },
        ],
        ExpoImageManipulator: [{ key: 0, argumentsCount: 3, name: 'manipulateAsync' }],
        ExpoKeepAwake: [
          { key: 0, argumentsCount: 1, name: 'activate' },
          { key: 1, argumentsCount: 1, name: 'deactivate' },
        ],
        ExpoLinearGradient: [],
        ExpoLocalAuthentication: [
          { key: 0, argumentsCount: 0, name: 'supportedAuthenticationTypesAsync' },
          { key: 1, argumentsCount: 0, name: 'isEnrolledAsync' },
          { key: 2, argumentsCount: 0, name: 'getEnrolledLevelAsync' },
          { key: 3, argumentsCount: 0, name: 'hasHardwareAsync' },
          { key: 4, argumentsCount: 1, name: 'authenticateAsync' },
        ],
        ExpoLocalization: [
          { argumentsCount: 0, key: 'getLocalizationAsync', name: 'getLocalizationAsync' },
        ],
        ExpoLocation: [
          { key: 0, argumentsCount: 2, name: 'watchPositionImplAsync' },
          { key: 1, argumentsCount: 1, name: 'watchDeviceHeading' },
          { key: 2, argumentsCount: 0, name: 'requestForegroundPermissionsAsync' },
          { key: 3, argumentsCount: 0, name: 'hasServicesEnabledAsync' },
          { key: 4, argumentsCount: 1, name: 'removeWatchAsync' },
          { key: 5, argumentsCount: 0, name: 'requestPermissionsAsync' },
          { key: 6, argumentsCount: 1, name: 'reverseGeocodeAsync' },
          { key: 7, argumentsCount: 1, name: 'hasStartedGeofencingAsync' },
          { key: 8, argumentsCount: 2, name: 'startLocationUpdatesAsync' },
          { key: 9, argumentsCount: 0, name: 'getPermissionsAsync' },
          { key: 10, argumentsCount: 1, name: 'stopGeofencingAsync' },
          { key: 11, argumentsCount: 1, name: 'hasStartedLocationUpdatesAsync' },
          { key: 12, argumentsCount: 0, name: 'getProviderStatusAsync' },
          { key: 13, argumentsCount: 0, name: 'getBackgroundPermissionsAsync' },
          { key: 14, argumentsCount: 1, name: 'geocodeAsync' },
          { key: 15, argumentsCount: 1, name: 'stopLocationUpdatesAsync' },
          { key: 16, argumentsCount: 1, name: 'getLastKnownPositionAsync' },
          { key: 17, argumentsCount: 0, name: 'getForegroundPermissionsAsync' },
          { key: 18, argumentsCount: 1, name: 'getCurrentPositionAsync' },
          { key: 19, argumentsCount: 2, name: 'startGeofencingAsync' },
          { key: 20, argumentsCount: 0, name: 'requestBackgroundPermissionsAsync' },
        ],
        ExpoMailComposer: [
          { key: 0, argumentsCount: 0, name: 'isAvailableAsync' },
          { key: 1, argumentsCount: 1, name: 'composeAsync' },
        ],
        ExpoNetwork: [
          { key: 0, argumentsCount: 0, name: 'getIpAddressAsync' },
          { key: 1, argumentsCount: 0, name: 'getNetworkStateAsync' },
        ],
        ExpoNotificationCategoriesModule: [
          { key: 0, argumentsCount: 1, name: 'deleteNotificationCategoryAsync' },
          { key: 1, argumentsCount: 0, name: 'getNotificationCategoriesAsync' },
          { key: 2, argumentsCount: 3, name: 'setNotificationCategoryAsync' },
        ],
        ExpoNotificationPermissionsModule: [
          { key: 0, argumentsCount: 0, name: 'getPermissionsAsync' },
          { key: 1, argumentsCount: 1, name: 'requestPermissionsAsync' },
        ],
        ExpoNotificationPresenter: [
          { key: 0, argumentsCount: 2, name: 'presentNotificationAsync' },
          { key: 1, argumentsCount: 1, name: 'dismissNotificationAsync' },
          { key: 2, argumentsCount: 0, name: 'getPresentedNotificationsAsync' },
          { key: 3, argumentsCount: 0, name: 'dismissAllNotificationsAsync' },
        ],
        ExpoNotificationScheduler: [
          { key: 0, argumentsCount: 0, name: 'cancelAllScheduledNotificationsAsync' },
          { key: 1, argumentsCount: 1, name: 'getNextTriggerDateAsync' },
          { key: 2, argumentsCount: 0, name: 'getAllScheduledNotificationsAsync' },
          { key: 3, argumentsCount: 3, name: 'scheduleNotificationAsync' },
          { key: 4, argumentsCount: 1, name: 'cancelScheduledNotificationAsync' },
        ],
        ExpoNotificationsEmitter: [
          { key: 0, argumentsCount: 0, name: 'getLastNotificationResponseAsync' },
        ],
        ExpoNotificationsHandlerModule: [
          { key: 0, argumentsCount: 2, name: 'handleNotificationAsync' },
        ],
        ExpoPermissions: [
          { key: 0, argumentsCount: 1, name: 'getAsync' },
          { key: 1, argumentsCount: 1, name: 'askAsync' },
        ],
        ExpoPublisherBannerView: [],
        ExpoPushTokenManager: [{ key: 0, argumentsCount: 0, name: 'getDevicePushTokenAsync' }],
        ExpoSMS: [
          { key: 0, argumentsCount: 0, name: 'isAvailableAsync' },
          { key: 1, argumentsCount: 3, name: 'sendSMSAsync' },
        ],
        ExpoScreenCapture: [
          { key: 0, argumentsCount: 0, name: 'preventScreenCapture' },
          { key: 1, argumentsCount: 0, name: 'allowScreenCapture' },
        ],
        ExpoScreenOrientation: [
          { key: 0, argumentsCount: 1, name: 'lockAsync' },
          { key: 1, argumentsCount: 1, name: 'supportsOrientationLockAsync' },
          { key: 2, argumentsCount: 0, name: 'getOrientationAsync' },
          { key: 3, argumentsCount: 1, name: 'lockPlatformAsync' },
          { key: 4, argumentsCount: 0, name: 'getOrientationLockAsync' },
          { key: 5, argumentsCount: 0, name: 'getPlatformOrientationLockAsync' },
        ],
        ExpoSecureStore: [
          { key: 0, argumentsCount: 2, name: 'getValueWithKeyAsync' },
          { key: 1, argumentsCount: 2, name: 'deleteValueWithKeyAsync' },
          { key: 2, argumentsCount: 3, name: 'setValueWithKeyAsync' },
        ],
        ExpoSharing: [{ key: 0, argumentsCount: 2, name: 'shareAsync' }],
        ExpoSplashScreen: [
          { key: 0, argumentsCount: 0, name: 'hideAsync' },
          { key: 1, argumentsCount: 0, name: 'preventAutoHideAsync' },
        ],
        ExpoStoreReview: [
          { key: 0, argumentsCount: 0, name: 'isAvailableAsync' },
          { key: 1, argumentsCount: 0, name: 'requestReview' },
        ],
        ExpoSystemUI: [
          { name: 'setBackgroundColorAsync', argumentsCount: 1, key: 'setBackgroundColorAsync' },
          { argumentsCount: 0, name: 'getBackgroundColorAsync', key: 'getBackgroundColorAsync' },
        ],
        ExpoTaskManager: [
          { key: 0, argumentsCount: 0, name: 'isAvailableAsync' },
          { key: 1, argumentsCount: 2, name: 'notifyTaskFinishedAsync' },
          { key: 2, argumentsCount: 1, name: 'unregisterTaskAsync' },
          { key: 3, argumentsCount: 1, name: 'getTaskOptionsAsync' },
          { key: 4, argumentsCount: 0, name: 'unregisterAllTasksAsync' },
          { key: 5, argumentsCount: 1, name: 'isTaskRegisteredAsync' },
          { key: 6, argumentsCount: 0, name: 'getRegisteredTasksAsync' },
        ],
        ExpoTrackingTransparency: [
          { name: 'requestPermissionsAsync', key: 'requestPermissionsAsync', argumentsCount: 0 },
          { argumentsCount: 0, name: 'getPermissionsAsync', key: 'getPermissionsAsync' },
        ],
        ExpoUpdates: [
          { key: 0, argumentsCount: 0, name: 'checkForUpdateAsync' },
          { key: 1, argumentsCount: 0, name: 'reload' },
          { key: 2, argumentsCount: 0, name: 'fetchUpdateAsync' },
        ],
        ExpoVideoManager: [{ key: 0, argumentsCount: 2, name: 'setFullscreen' }],
        ExpoVideoThumbnails: [{ key: 0, argumentsCount: 2, name: 'getThumbnail' }],
        ExpoWebBrowser: [
          { key: 0, argumentsCount: 1, name: 'coolDownAsync' },
          { key: 1, argumentsCount: 0, name: 'dismissBrowser' },
          { key: 2, argumentsCount: 2, name: 'openBrowserAsync' },
          { key: 3, argumentsCount: 2, name: 'mayInitWithUrlAsync' },
          { key: 4, argumentsCount: 0, name: 'dismissAuthSession' },
          { key: 5, argumentsCount: 1, name: 'warmUpAsync' },
          { key: 6, argumentsCount: 0, name: 'getCustomTabsSupportingBrowsers' },
          { key: 7, argumentsCount: 2, name: 'openAuthSessionAsync' },
        ],
        ExponentAV: [
          { key: 0, argumentsCount: 1, name: 'getStatusForVideo' },
          { key: 1, argumentsCount: 1, name: 'setAudioMode' },
          { key: 2, argumentsCount: 0, name: 'unloadAudioRecorder' },
          { key: 3, argumentsCount: 0, name: 'stopAudioRecording' },
          { key: 4, argumentsCount: 0, name: 'requestPermissionsAsync' },
          { key: 5, argumentsCount: 3, name: 'loadForVideo' },
          { key: 6, argumentsCount: 1, name: 'setAudioIsEnabled' },
          { key: 7, argumentsCount: 1, name: 'prepareAudioRecorder' },
          { key: 8, argumentsCount: 2, name: 'replayVideo' },
          { key: 9, argumentsCount: 0, name: 'getPermissionsAsync' },
          { key: 10, argumentsCount: 1, name: 'unloadForSound' },
          { key: 11, argumentsCount: 2, name: 'setStatusForSound' },
          { key: 12, argumentsCount: 1, name: 'unloadForVideo' },
          { key: 13, argumentsCount: 2, name: 'replaySound' },
          { key: 14, argumentsCount: 0, name: 'getAudioRecordingStatus' },
          { key: 15, argumentsCount: 2, name: 'setStatusForVideo' },
          { key: 16, argumentsCount: 2, name: 'loadForSound' },
          { key: 17, argumentsCount: 0, name: 'pauseAudioRecording' },
          { key: 18, argumentsCount: 1, name: 'getStatusForSound' },
          { key: 19, argumentsCount: 0, name: 'startAudioRecording' },
        ],
        ExponentAccelerometer: [
          { key: 0, argumentsCount: 0, name: 'isAvailableAsync' },
          { key: 1, argumentsCount: 1, name: 'setUpdateInterval' },
        ],
        ExponentCameraManager: [
          { key: 0, argumentsCount: 0, name: 'requestCameraPermissionsAsync' },
          { key: 1, argumentsCount: 2, name: 'record' },
          { key: 2, argumentsCount: 1, name: 'stopRecording' },
          { key: 3, argumentsCount: 2, name: 'takePicture' },
          { key: 4, argumentsCount: 1, name: 'pausePreview' },
          { key: 5, argumentsCount: 0, name: 'getMicrophonePermissionsAsync' },
          { key: 6, argumentsCount: 0, name: 'getPermissionsAsync' },
          { key: 7, argumentsCount: 0, name: 'getAvailableVideoCodecsAsync' },
          { key: 8, argumentsCount: 1, name: 'resumePreview' },
          { key: 9, argumentsCount: 0, name: 'requestPermissionsAsync' },
          { key: 10, argumentsCount: 2, name: 'getAvailablePictureSizes' },
          { key: 11, argumentsCount: 0, name: 'getCameraPermissionsAsync' },
          { key: 12, argumentsCount: 0, name: 'requestMicrophonePermissionsAsync' },
        ],
        ExponentConstants: [{ key: 0, argumentsCount: 0, name: 'getWebViewUserAgentAsync' }],
        ExponentDeviceMotion: [
          { key: 0, argumentsCount: 0, name: 'isAvailableAsync' },
          { key: 1, argumentsCount: 1, name: 'setUpdateInterval' },
        ],
        ExponentFacebook: [
          { key: 0, argumentsCount: 0, name: 'flushAsync' },
          { key: 1, argumentsCount: 1, name: 'setAutoLogAppEventsEnabledAsync' },
          { key: 2, argumentsCount: 3, name: 'logEventAsync' },
          { key: 3, argumentsCount: 0, name: 'getUserIDAsync' },
          { key: 4, argumentsCount: 1, name: 'setAdvertiserIDCollectionEnabledAsync' },
          { key: 5, argumentsCount: 0, name: 'getPermissionsAsync' },
          { key: 6, argumentsCount: 1, name: 'initializeAsync' },
          { key: 7, argumentsCount: 0, name: 'logOutAsync' },
          { key: 8, argumentsCount: 0, name: 'requestPermissionsAsync' },
          { key: 9, argumentsCount: 1, name: 'logInWithReadPermissionsAsync' },
          { key: 10, argumentsCount: 0, name: 'getAdvertiserIDAsync' },
          { key: 11, argumentsCount: 1, name: 'setUserDataAsync' },
          { key: 12, argumentsCount: 1, name: 'setFlushBehaviorAsync' },
          { key: 13, argumentsCount: 3, name: 'logPurchaseAsync' },
          { key: 14, argumentsCount: 1, name: 'logPushNotificationOpenAsync' },
          { key: 15, argumentsCount: 1, name: 'setAdvertiserTrackingEnabledAsync' },
          { key: 16, argumentsCount: 1, name: 'setUserIDAsync' },
          { key: 17, argumentsCount: 0, name: 'getAuthenticationCredentialAsync' },
          { key: 18, argumentsCount: 0, name: 'getAnonymousIDAsync' },
        ],
        ExponentFileSystem: [
          { key: 0, argumentsCount: 3, name: 'uploadAsync' },
          { key: 1, argumentsCount: 2, name: 'readDirectoryAsync' },
          { key: 2, argumentsCount: 0, name: 'getTotalDiskCapacityAsync' },
          { key: 3, argumentsCount: 2, name: 'getInfoAsync' },
          { key: 4, argumentsCount: 3, name: 'downloadAsync' },
          { key: 5, argumentsCount: 3, name: 'writeAsStringAsync' },
          { key: 6, argumentsCount: 2, name: 'deleteAsync' },
          { key: 7, argumentsCount: 1, name: 'moveAsync' },
          { key: 8, argumentsCount: 0, name: 'getFreeDiskStorageAsync' },
          { key: 9, argumentsCount: 2, name: 'readAsStringAsync' },
          { key: 10, argumentsCount: 5, name: 'downloadResumableStartAsync' },
          { key: 11, argumentsCount: 2, name: 'makeDirectoryAsync' },
          { key: 12, argumentsCount: 4, name: 'uploadTaskStartAsync' },
          { key: 13, argumentsCount: 1, name: 'copyAsync' },
          { key: 14, argumentsCount: 1, name: 'networkTaskCancelAsync' },
          { key: 15, argumentsCount: 1, name: 'downloadResumablePauseAsync' },
        ],
        ExponentGLObjectManager: [
          { key: 0, argumentsCount: 0, name: 'createContextAsync' },
          { key: 1, argumentsCount: 1, name: 'destroyContextAsync' },
          { key: 2, argumentsCount: 1, name: 'destroyObjectAsync' },
          { key: 3, argumentsCount: 2, name: 'createCameraTextureAsync' },
          { key: 4, argumentsCount: 2, name: 'takeSnapshotAsync' },
        ],
        ExponentGLViewManager: [],
        ExponentGyroscope: [
          { key: 0, argumentsCount: 0, name: 'isAvailableAsync' },
          { key: 1, argumentsCount: 1, name: 'setUpdateInterval' },
        ],
        ExponentImagePicker: [
          { key: 0, argumentsCount: 1, name: 'getMediaLibraryPermissionsAsync' },
          { key: 1, argumentsCount: 0, name: 'requestCameraPermissionsAsync' },
          { key: 2, argumentsCount: 1, name: 'requestMediaLibraryPermissionsAsync' },
          { key: 3, argumentsCount: 1, name: 'launchCameraAsync' },
          { key: 4, argumentsCount: 0, name: 'getCameraPermissionsAsync' },
          { key: 5, argumentsCount: 1, name: 'launchImageLibraryAsync' },
        ],
        ExponentMagnetometer: [
          { key: 0, argumentsCount: 0, name: 'isAvailableAsync' },
          { key: 1, argumentsCount: 1, name: 'setUpdateInterval' },
        ],
        ExponentMagnetometerUncalibrated: [
          { key: 0, argumentsCount: 0, name: 'isAvailableAsync' },
          { key: 1, argumentsCount: 1, name: 'setUpdateInterval' },
        ],
        ExponentMediaLibrary: [
          { key: 0, argumentsCount: 1, name: 'createAssetAsync' },
          { key: 1, argumentsCount: 1, name: 'deleteAssetsAsync' },
          { key: 2, argumentsCount: 1, name: 'getPermissionsAsync' },
          { key: 3, argumentsCount: 2, name: 'removeAssetsFromAlbumAsync' },
          { key: 4, argumentsCount: 1, name: 'saveToLibraryAsync' },
          { key: 5, argumentsCount: 1, name: 'requestPermissionsAsync' },
          { key: 6, argumentsCount: 1, name: 'getAlbumsAsync' },
          { key: 7, argumentsCount: 1, name: 'getAssetsAsync' },
          { key: 8, argumentsCount: 2, name: 'createAlbumAsync' },
          { key: 9, argumentsCount: 2, name: 'deleteAlbumsAsync' },
          { key: 10, argumentsCount: 0, name: 'getMomentsAsync' },
          { key: 11, argumentsCount: 0, name: 'presentPermissionsPickerAsync' },
          { key: 12, argumentsCount: 2, name: 'addAssetsToAlbumAsync' },
          { key: 13, argumentsCount: 2, name: 'getAssetInfoAsync' },
          { key: 14, argumentsCount: 1, name: 'getAlbumAsync' },
        ],
        ExponentPedometer: [
          { key: 0, argumentsCount: 0, name: 'requestPermissionsAsync' },
          { key: 1, argumentsCount: 0, name: 'getPermissionsAsync' },
          { key: 2, argumentsCount: 0, name: 'isAvailableAsync' },
          { key: 3, argumentsCount: 2, name: 'getStepCountAsync' },
        ],
        ExponentPrint: [
          { key: 0, argumentsCount: 1, name: 'print' },
          { key: 1, argumentsCount: 0, name: 'selectPrinter' },
          { key: 2, argumentsCount: 1, name: 'printToFileAsync' },
        ],
        ExponentSQLite: [
          { key: 0, argumentsCount: 1, name: 'close' },
          { key: 1, argumentsCount: 3, name: 'exec' },
        ],
        ExponentSegment: [
          { key: 0, argumentsCount: 1, name: 'setEnabledAsync' },
          { key: 1, argumentsCount: 3, name: 'screenWithProperties' },
          { key: 2, argumentsCount: 0, name: 'flush' },
          { key: 3, argumentsCount: 1, name: 'screen' },
          { key: 4, argumentsCount: 1, name: 'identify' },
          { key: 5, argumentsCount: 3, name: 'identifyWithTraits' },
          { key: 6, argumentsCount: 3, name: 'trackWithProperties' },
          { key: 7, argumentsCount: 3, name: 'groupWithTraits' },
          { key: 8, argumentsCount: 1, name: 'initialize' },
          { key: 9, argumentsCount: 0, name: 'getEnabledAsync' },
          { key: 10, argumentsCount: 2, name: 'alias' },
          { key: 11, argumentsCount: 1, name: 'group' },
          { key: 12, argumentsCount: 1, name: 'track' },
          { key: 13, argumentsCount: 0, name: 'reset' },
        ],
        ExponentSpeech: [
          { key: 0, argumentsCount: 3, name: 'speak' },
          { key: 1, argumentsCount: 0, name: 'stop' },
          { key: 2, argumentsCount: 0, name: 'pause' },
          { key: 3, argumentsCount: 0, name: 'resume' },
          { key: 4, argumentsCount: 0, name: 'isSpeaking' },
          { key: 5, argumentsCount: 0, name: 'getVoices' },
        ],
        MediaViewManager: [],
        NotificationsServerRegistrationModule: [
          { key: 0, argumentsCount: 0, name: 'getRegistrationInfoAsync' },
          { key: 1, argumentsCount: 1, name: 'setRegistrationInfoAsync' },
          { key: 2, argumentsCount: 0, name: 'getInstallationIdAsync' },
        ],
      },
    },
    getConstants: { type: 'function' },
    modulesConstants: {
      type: 'mock',
      mockDefinition: {
        CTKAdSettingsManager: {
          addListener: { type: 'function' },
          addTestDevice: { type: 'function' },
          clearTestDevices: { type: 'function' },
          currentDeviceHash: { type: 'string' },
          getPermissionsAsync: { type: 'function' },
          removeListeners: { type: 'function' },
          requestPermissionsAsync: { type: 'function' },
          setAdvertiserTrackingEnabled: { type: 'function' },
          setIsChildDirected: { type: 'function' },
          setLogLevel: { type: 'function' },
          setMeditationService: { type: 'function' },
          setUrlPrefix: { type: 'function' },
        },
        ExpoAppAuth: {
          OAuthRedirect: { type: 'array' },
          URLSchemes: { type: 'array' },
          addListener: { type: 'function' },
          executeAsync: { type: 'function' },
          removeListeners: { type: 'function' },
        },
        ExpoApplication: {
          addListener: { type: 'function' },
          applicationId: { type: 'string' },
          applicationName: { type: 'string' },
          getApplicationReleaseTypeAsync: { type: 'function' },
          getInstallationTimeAsync: { type: 'function' },
          getIosIdForVendorAsync: { type: 'function' },
          getPushNotificationServiceEnvironmentAsync: { type: 'function' },
          nativeApplicationVersion: { type: 'string' },
          nativeBuildVersion: { type: 'string' },
          removeListeners: { type: 'function' },
        },
        ExpoBarCodeScannerModule: {
          BarCodeType: { type: 'object' },
          Type: { type: 'object' },
          addListener: { type: 'function' },
          getPermissionsAsync: { type: 'function' },
          removeListeners: { type: 'function' },
          requestPermissionsAsync: { type: 'function' },
          scanFromURLAsync: { type: 'function' },
        },
        ExpoBattery: {
          addListener: { type: 'function' },
          getBatteryLevelAsync: { type: 'function' },
          getBatteryStateAsync: { type: 'function' },
          isLowPowerModeEnabledAsync: { type: 'function' },
          isSupported: { type: 'boolean', mock: true },
          removeListeners: { type: 'function' },
        },
        ExpoCellular: {
          addListener: { type: 'function' },
          allowsVoip: { type: 'boolean', mock: true },
          allowsVoipAsync: { type: 'function' },
          carrier: { type: 'string' },
          generation: { type: 'number', mock: 0 },
          getCarrierNameAsync: { type: 'function' },
          getCellularGenerationAsync: { type: 'function' },
          getIsoCountryCodeAsync: { type: 'function' },
          getMobileCountryCodeAsync: { type: 'function' },
          getMobileNetworkCodeAsync: { type: 'function' },
          isoCountryCode: { type: 'object', mock: null },
          mobileCountryCode: { type: 'object', mock: null },
          mobileNetworkCode: { type: 'object', mock: null },
          removeListeners: { type: 'function' },
        },
        ExpoClipboard: {
          addListener: { type: 'function' },
          getStringAsync: { type: 'function' },
          removeListeners: { type: 'function' },
          setString: { type: 'function' },
          startObserving: { type: 'function' },
          stopObserving: { type: 'function' },
        },
        ExpoDevice: {
          addListener: { type: 'function' },
          brand: { type: 'string' },
          deviceName: { type: 'string' },
          deviceYearClass: { type: 'number', mock: 2020 },
          getDeviceTypeAsync: { type: 'function' },
          getUptimeAsync: { type: 'function' },
          isDevice: { type: 'boolean', mock: true },
          isRootedExperimentalAsync: { type: 'function' },
          manufacturer: { type: 'string' },
          modelId: { type: 'string' },
          osBuildId: { type: 'string' },
          osInternalBuildId: { type: 'string' },
          osName: { type: 'string' },
          osVersion: { type: 'string' },
          removeListeners: { type: 'function' },
          supportedCpuArchitectures: { type: 'array' },
          totalMemory: { type: 'number', mock: 3108814848 },
        },
        ExpoErrorRecovery: {
          addListener: { type: 'function' },
          recoveredProps: { type: 'object', mock: null },
          removeListeners: { type: 'function' },
          saveRecoveryProps: { type: 'function' },
        },
        ExpoFaceDetector: {
          Classifications: { type: 'object' },
          Landmarks: { type: 'object' },
          Mode: { type: 'object' },
          addListener: { type: 'function' },
          detectFaces: { type: 'function' },
          removeListeners: { type: 'function' },
        },
        ExpoFirebaseCore: {
          DEFAULT_APP_NAME: { type: 'string' },
          addListener: { type: 'function' },
          removeListeners: { type: 'function' },
        },
        ExpoGoogleSignIn: {
          ERRORS: { type: 'object' },
          SCOPES: { type: 'object' },
          TYPES: { type: 'object' },
          addListener: { type: 'function' },
          disconnectAsync: { type: 'function' },
          getCurrentUserAsync: { type: 'function' },
          getPhotoAsync: { type: 'function' },
          getTokensAsync: { type: 'function' },
          initAsync: { type: 'function' },
          isConnectedAsync: { type: 'function' },
          removeListeners: { type: 'function' },
          signInAsync: { type: 'function' },
          signInSilentlyAsync: { type: 'function' },
          signOutAsync: { type: 'function' },
        },
        ExpoHaptics: {
          addListener: { type: 'function' },
          impactAsync: { type: 'function' },
          notificationAsync: { type: 'function' },
          removeListeners: { type: 'function' },
          selectionAsync: { type: 'function' },
        },
        ExpoLinearGradient: {
          addListener: { type: 'function' },
          removeListeners: { type: 'function' },
        },
        ExpoLocalization: {
          addListener: { type: 'function' },
          currency: { type: 'string' },
          decimalSeparator: { type: 'string' },
          digitGroupingSeparator: { type: 'string' },
          getLocalizationAsync: { type: 'function' },
          isMetric: { type: 'boolean', mock: true },
          isRTL: { type: 'boolean', mock: false },
          isoCurrencyCodes: { type: 'array' },
          locale: { type: 'string' },
          locales: { type: 'array' },
          region: { type: 'string' },
          removeListeners: { type: 'function' },
          timezone: { type: 'string' },
        },
        ExpoSecureStore: {
          AFTER_FIRST_UNLOCK: { type: 'number', mock: 0 },
          AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY: { type: 'number', mock: 1 },
          ALWAYS: { type: 'number', mock: 2 },
          ALWAYS_THIS_DEVICE_ONLY: { type: 'number', mock: 4 },
          WHEN_PASSCODE_SET_THIS_DEVICE_ONLY: { type: 'number', mock: 3 },
          WHEN_UNLOCKED: { type: 'number', mock: 5 },
          WHEN_UNLOCKED_THIS_DEVICE_ONLY: { type: 'number', mock: 6 },
          addListener: { type: 'function' },
          deleteValueWithKeyAsync: { type: 'function' },
          getValueWithKeyAsync: { type: 'function' },
          removeListeners: { type: 'function' },
          setValueWithKeyAsync: { type: 'function' },
        },
        ExpoSystemUI: {
          addListener: { type: 'function' },
          getBackgroundColorAsync: { type: 'function' },
          removeListeners: { type: 'function' },
          setBackgroundColorAsync: { type: 'function' },
        },
        ExpoTaskManager: {
          EVENT_NAME: { type: 'string' },
          addListener: { type: 'function' },
          getRegisteredTasksAsync: { type: 'function' },
          getTaskOptionsAsync: { type: 'function' },
          isAvailableAsync: { type: 'function' },
          isTaskRegisteredAsync: { type: 'function' },
          notifyTaskFinishedAsync: { type: 'function' },
          removeListeners: { type: 'function' },
          unregisterAllTasksAsync: { type: 'function' },
          unregisterTaskAsync: { type: 'function' },
        },
        ExpoTrackingTransparency: {
          addListener: { type: 'function' },
          getPermissionsAsync: { type: 'function' },
          removeListeners: { type: 'function' },
          requestPermissionsAsync: { type: 'function' },
        },
        ExpoUpdates: {
          addListener: { type: 'function' },
          checkForUpdateAsync: { type: 'function' },
          fetchUpdateAsync: { type: 'function' },
          isEnabled: { type: 'boolean', mock: false },
          isMissingRuntimeVersion: { type: 'boolean', mock: false },
          reload: { type: 'function' },
          removeListeners: { type: 'function' },
        },
        ExpoVideoManager: {
          ScaleAspectFill: { type: 'string' },
          ScaleAspectFit: { type: 'string' },
          ScaleNone: { type: 'string' },
          ScaleToFill: { type: 'string' },
          addListener: { type: 'function' },
          removeListeners: { type: 'function' },
          setFullscreen: { type: 'function' },
        },
        ExponentAV: {
          Qualities: { type: 'object' },
          addListener: { type: 'function' },
          getAudioRecordingStatus: { type: 'function' },
          getPermissionsAsync: { type: 'function' },
          getStatusForSound: { type: 'function' },
          getStatusForVideo: { type: 'function' },
          loadForSound: { type: 'function' },
          loadForVideo: { type: 'function' },
          pauseAudioRecording: { type: 'function' },
          prepareAudioRecorder: { type: 'function' },
          removeListeners: { type: 'function' },
          replaySound: { type: 'function' },
          replayVideo: { type: 'function' },
          requestPermissionsAsync: { type: 'function' },
          setAudioIsEnabled: { type: 'function' },
          setAudioMode: { type: 'function' },
          setStatusForSound: { type: 'function' },
          setStatusForVideo: { type: 'function' },
          startAudioRecording: { type: 'function' },
          stopAudioRecording: { type: 'function' },
          unloadAudioRecorder: { type: 'function' },
          unloadForSound: { type: 'function' },
          unloadForVideo: { type: 'function' },
        },
        ExponentCameraManager: {
          AutoFocus: { type: 'object' },
          FlashMode: { type: 'object' },
          Type: { type: 'object' },
          VideoCodec: { type: 'object' },
          VideoQuality: { type: 'object' },
          VideoStabilization: { type: 'object' },
          WhiteBalance: { type: 'object' },
          addListener: { type: 'function' },
          getAvailablePictureSizes: { type: 'function' },
          getAvailableVideoCodecsAsync: { type: 'function' },
          getCameraPermissionsAsync: { type: 'function' },
          getMicrophonePermissionsAsync: { type: 'function' },
          getPermissionsAsync: { type: 'function' },
          pausePreview: { type: 'function' },
          record: { type: 'function' },
          removeListeners: { type: 'function' },
          requestCameraPermissionsAsync: { type: 'function' },
          requestMicrophonePermissionsAsync: { type: 'function' },
          requestPermissionsAsync: { type: 'function' },
          resumePreview: { type: 'function' },
          stopRecording: { type: 'function' },
          takePicture: { type: 'function' },
        },
        ExponentConstants: {
          addListener: { type: 'function' },
          appOwnership: { type: 'string' },
          debugMode: { type: 'boolean', mock: true },
          deviceName: { type: 'string' },
          deviceYearClass: { type: 'number', mock: 2021 },
          executionEnvironment: { type: 'string' },
          experienceUrl: { type: 'string' },
          expoRuntimeVersion: { type: 'string' },
          expoVersion: { type: 'string' },
          getWebViewUserAgentAsync: { type: 'function' },
          installationId: { type: 'string' },
          isDetached: { type: 'boolean', mock: false },
          isDevice: { type: 'boolean', mock: true },
          isHeadless: { type: 'boolean', mock: false },
          linkingUri: { type: 'string' },
          manifest: { type: 'object' },
          nativeAppVersion: { type: 'string' },
          nativeBuildVersion: { type: 'string' },
          platform: { type: 'object' },
          removeListeners: { type: 'function' },
          sessionId: { type: 'string' },
          statusBarHeight: { type: 'number', mock: 20 },
          supportedExpoSdks: { type: 'array' },
          systemFonts: { type: 'array' },
        },
        ExponentDeviceMotion: {
          Gravity: { type: 'number', mock: 9.8100004196167 },
          addListener: { type: 'function' },
          isAvailableAsync: { type: 'function' },
          removeListeners: { type: 'function' },
          setUpdateInterval: { type: 'function' },
        },
        ExponentFileSystem: {
          addListener: { type: 'function' },
          bundleDirectory: { type: 'object', mock: null },
          bundledAssets: { type: 'object', mock: null },
          cacheDirectory: { type: 'string' },
          copyAsync: { type: 'function' },
          deleteAsync: { type: 'function' },
          documentDirectory: { type: 'string' },
          downloadAsync: { type: 'function' },
          downloadResumablePauseAsync: { type: 'function' },
          downloadResumableStartAsync: { type: 'function' },
          getFreeDiskStorageAsync: { type: 'function' },
          getInfoAsync: { type: 'function' },
          getTotalDiskCapacityAsync: { type: 'function' },
          makeDirectoryAsync: { type: 'function' },
          moveAsync: { type: 'function' },
          networkTaskCancelAsync: { type: 'function' },
          readAsStringAsync: { type: 'function' },
          readDirectoryAsync: { type: 'function' },
          removeListeners: { type: 'function' },
          uploadAsync: { type: 'function' },
          uploadTaskStartAsync: { type: 'function' },
          writeAsStringAsync: { type: 'function' },
        },
        ExponentMediaLibrary: {
          CHANGE_LISTENER_NAME: { type: 'string' },
          MediaType: { type: 'object' },
          SortBy: { type: 'object' },
          addAssetsToAlbumAsync: { type: 'function' },
          addListener: { type: 'function' },
          createAlbumAsync: { type: 'function' },
          createAssetAsync: { type: 'function' },
          deleteAlbumsAsync: { type: 'function' },
          deleteAssetsAsync: { type: 'function' },
          getAlbumAsync: { type: 'function' },
          getAlbumsAsync: { type: 'function' },
          getAssetInfoAsync: { type: 'function' },
          getAssetsAsync: { type: 'function' },
          getMomentsAsync: { type: 'function' },
          getPermissionsAsync: { type: 'function' },
          presentPermissionsPickerAsync: { type: 'function' },
          removeAssetsFromAlbumAsync: { type: 'function' },
          removeListeners: { type: 'function' },
          requestPermissionsAsync: { type: 'function' },
          saveToLibraryAsync: { type: 'function' },
        },
        ExponentPrint: {
          Orientation: { type: 'object' },
          addListener: { type: 'function' },
          print: { type: 'function' },
          printToFileAsync: { type: 'function' },
          removeListeners: { type: 'function' },
          selectPrinter: { type: 'function' },
        },
      },
    },
    viewManagersNames: {
      type: 'array',
      mock: [
        'AdIconView',
        'AdOptionsView',
        'CTKBannerView',
        'CTKNativeAd',
        'ExpoAdsAdMobBannerView',
        'ExpoAdsPublisherBannerView',
        'ExpoAppleAuthenticationButtonContinueBlack',
        'ExpoAppleAuthenticationButtonContinueWhite',
        'ExpoAppleAuthenticationButtonContinueWhiteOutline',
        'ExpoAppleAuthenticationButtonSignInBlack',
        'ExpoAppleAuthenticationButtonSignInWhite',
        'ExpoAppleAuthenticationButtonSignInWhiteOutline',
        'ExpoAppleAuthenticationButtonSignUpBlack',
        'ExpoAppleAuthenticationButtonSignUpWhite',
        'ExpoAppleAuthenticationButtonSignUpWhiteOutline',
        'ExpoBarCodeScannerView',
        'ExpoBlurView',
        'ExpoLinearGradient',
        'ExpoVideoView',
        'ExponentCamera',
        'ExponentGLView',
        'MediaView',
      ],
    },
  },
  RNAWSCognito: {
    computeModPow: { type: 'function', functionType: 'async' },
    computeS: { type: 'function', functionType: 'async' },
    getConstants: { type: 'function' },
    getRandomBase64: { type: 'function', functionType: 'sync' },
  },
  RNBranch: {
    INIT_SESSION_ERROR: { type: 'string' },
    INIT_SESSION_START: { type: 'string' },
    INIT_SESSION_SUCCESS: { type: 'string' },
    STANDARD_EVENT_ACHIEVE_LEVEL: { type: 'string' },
    STANDARD_EVENT_ADD_PAYMENT_INFO: { type: 'string' },
    STANDARD_EVENT_ADD_TO_CART: { type: 'string' },
    STANDARD_EVENT_ADD_TO_WISHLIST: { type: 'string' },
    STANDARD_EVENT_CLICK_AD: { type: 'string' },
    STANDARD_EVENT_COMPLETE_REGISTRATION: { type: 'string' },
    STANDARD_EVENT_COMPLETE_TUTORIAL: { type: 'string' },
    STANDARD_EVENT_INITIATE_PURCHASE: { type: 'string' },
    STANDARD_EVENT_INVITE: { type: 'string' },
    STANDARD_EVENT_LOGIN: { type: 'string' },
    STANDARD_EVENT_PURCHASE: { type: 'string' },
    STANDARD_EVENT_RATE: { type: 'string' },
    STANDARD_EVENT_RESERVE: { type: 'string' },
    STANDARD_EVENT_SEARCH: { type: 'string' },
    STANDARD_EVENT_SHARE: { type: 'string' },
    STANDARD_EVENT_SPEND_CREDITS: { type: 'string' },
    STANDARD_EVENT_START_TRIAL: { type: 'string' },
    STANDARD_EVENT_SUBSCRIBE: { type: 'string' },
    STANDARD_EVENT_UNLOCK_ACHIEVEMENT: { type: 'string' },
    STANDARD_EVENT_VIEW_AD: { type: 'string' },
    STANDARD_EVENT_VIEW_CART: { type: 'string' },
    STANDARD_EVENT_VIEW_ITEM: { type: 'string' },
    STANDARD_EVENT_VIEW_ITEMS: { type: 'string' },
    createUniversalObject: { type: 'function', functionType: 'promise' },
    disableTracking: { type: 'function', functionType: 'async' },
    generateShortUrl: { type: 'function', functionType: 'promise' },
    getConstants: { type: 'function' },
    getCreditHistory: { type: 'function', functionType: 'promise' },
    getFirstReferringParams: { type: 'function', functionType: 'promise' },
    getLatestReferringParams: { type: 'function', functionType: 'promise' },
    getShortUrl: { type: 'function', functionType: 'promise' },
    initializeBranch: { type: 'function', functionType: 'promise' },
    isTrackingDisabled: { type: 'function', functionType: 'promise' },
    listOnSpotlight: { type: 'function', functionType: 'promise' },
    loadRewards: { type: 'function', functionType: 'promise' },
    logEvent: { type: 'function', functionType: 'promise' },
    logout: { type: 'function', functionType: 'async' },
    openURL: { type: 'function', functionType: 'async' },
    redeemInitSessionResult: { type: 'function', functionType: 'promise' },
    redeemRewards: { type: 'function', functionType: 'promise' },
    registerView: { type: 'function', functionType: 'promise' },
    releaseUniversalObject: { type: 'function', functionType: 'async' },
    sendCommerceEvent: { type: 'function', functionType: 'promise' },
    setIdentity: { type: 'function', functionType: 'async' },
    setRequestMetadataKey: { type: 'function', functionType: 'async' },
    showShareSheet: { type: 'function', functionType: 'promise' },
    userCompletedAction: { type: 'function', functionType: 'async' },
    userCompletedActionOnUniversalObject: { type: 'function', functionType: 'promise' },
  },
  RNBranchEventEmitter: {
    addListener: { type: 'function', functionType: 'async' },
    getConstants: { type: 'function' },
    removeListeners: { type: 'function', functionType: 'async' },
  },
  RNCAppearance: {
    addListener: { type: 'function', functionType: 'async' },
    getConstants: { type: 'function' },
    initialPreferences: { type: 'object' },
    removeListeners: { type: 'function', functionType: 'async' },
  },
  RNCAppearanceProvider: {},
  RNCMaskedViewManager: {},
  RNCNetInfo: {
    addListener: { type: 'function', functionType: 'async' },
    getConstants: { type: 'function' },
    getCurrentState: { type: 'function', functionType: 'promise' },
    removeListeners: { type: 'function', functionType: 'async' },
  },
  RNCPickerManager: {},
  RNCSafeAreaProvider: {
    getConstants: { type: 'function' },
    initialWindowMetrics: { type: 'object' },
  },
  RNCSafeAreaView: {},
  RNCSegmentedControlManager: {},
  RNCSliderManager: {},
  RNCViewPager: {
    getConstants: { type: 'function' },
    setPage: { type: 'function', functionType: 'async' },
    setPageWithoutAnimation: { type: 'function', functionType: 'async' },
    setScrollEnabled: { type: 'function', functionType: 'async' },
  },
  RNCWebViewManager: {
    getConstants: { type: 'function' },
    goBack: { type: 'function', functionType: 'async' },
    goForward: { type: 'function', functionType: 'async' },
    injectJavaScript: { type: 'function', functionType: 'async' },
    postMessage: { type: 'function', functionType: 'async' },
    reload: { type: 'function', functionType: 'async' },
    startLoadWithResult: { type: 'function', functionType: 'async' },
    stopLoading: { type: 'function', functionType: 'async' },
  },
  RNDateTimePickerManager: {
    getConstants: { type: 'function' },
    getDefaultDisplayValue: { type: 'function', functionType: 'promise' },
  },
  RNGestureHandlerButton: {},
  RNGestureHandlerModule: {
    Direction: { type: 'object' },
    State: { type: 'object' },
    addListener: { type: 'function', functionType: 'async' },
    attachGestureHandler: { type: 'function', functionType: 'async' },
    createGestureHandler: { type: 'function', functionType: 'async' },
    dropGestureHandler: { type: 'function', functionType: 'async' },
    getConstants: { type: 'function' },
    handleClearJSResponder: { type: 'function', functionType: 'async' },
    handleSetJSResponder: { type: 'function', functionType: 'async' },
    removeListeners: { type: 'function', functionType: 'async' },
    updateGestureHandler: { type: 'function', functionType: 'async' },
  },
  RNSFullWindowOverlayManager: {},
  RNSScreenContainerManager: {},
  RNSScreenManager: {},
  RNSScreenNavigationContainerManager: {},
  RNSScreenStackHeaderConfigManager: {},
  RNSScreenStackHeaderSubviewManager: {},
  RNSScreenStackManager: {},
  RNSSearchBarManager: {},
  RNSVGCircleManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSVGClipPathManager: {},
  RNSVGDefsManager: {},
  RNSVGEllipseManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSVGForeignObjectManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSVGGroupManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSVGImageManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSVGLineManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSVGLinearGradientManager: {},
  RNSVGMarkerManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSVGMaskManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSVGNodeManager: {},
  RNSVGPathManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSVGPatternManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSVGRadialGradientManager: {},
  RNSVGRectManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSVGRenderableManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSVGSvgViewManager: {
    getConstants: { type: 'function' },
    toDataURL: { type: 'function', functionType: 'async' },
  },
  RNSVGSymbolManager: {},
  RNSVGTSpanManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSVGTextManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSVGTextPathManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSVGUseManager: {
    getBBox: { type: 'function', functionType: 'sync' },
    getCTM: { type: 'function', functionType: 'sync' },
    getConstants: { type: 'function' },
    getPointAtLength: { type: 'function', functionType: 'sync' },
    getScreenCTM: { type: 'function', functionType: 'sync' },
    getTotalLength: { type: 'function', functionType: 'sync' },
    isPointInFill: { type: 'function', functionType: 'sync' },
    isPointInStroke: { type: 'function', functionType: 'sync' },
  },
  RNSharedElementTransition: {
    configure: { type: 'function', functionType: 'promise' },
    getConstants: { type: 'function' },
  },
  RNViewShot: {
    captureRef: { type: 'function', functionType: 'promise' },
    captureScreen: { type: 'function', functionType: 'promise' },
    getConstants: { type: 'function' },
    releaseCapture: { type: 'function', functionType: 'async' },
  },
  ReanimatedModule: {
    addListener: { type: 'function', functionType: 'async' },
    animateNextTransition: { type: 'function', functionType: 'async' },
    attachEvent: { type: 'function', functionType: 'async' },
    configureProps: { type: 'function', functionType: 'async' },
    connectNodeToView: { type: 'function', functionType: 'async' },
    connectNodes: { type: 'function', functionType: 'async' },
    createNode: { type: 'function', functionType: 'async' },
    detachEvent: { type: 'function', functionType: 'async' },
    disconnectNodeFromView: { type: 'function', functionType: 'async' },
    disconnectNodes: { type: 'function', functionType: 'async' },
    dropNode: { type: 'function', functionType: 'async' },
    getConstants: { type: 'function' },
    getValue: { type: 'function', functionType: 'async' },
    removeListeners: { type: 'function', functionType: 'async' },
    setValue: { type: 'function', functionType: 'async' },
    triggerRender: { type: 'function', functionType: 'async' },
  },
};
