{"version":3,"sources":["MaterialBottomTabView.tsx"],"names":["SafeAreaProviderCompat","CommonActions","Link","useLinkBuilder","useTheme","React","Platform","StyleSheet","Text","BottomNavigation","DarkTheme","DefaultTheme","useSafeAreaInsets","MaterialCommunityIcons","require","default","e","isErrorLogged","name","color","size","selectionColor","_0","onLayout","_1","rest","test","message","console","error","warn","styles","icon","undefined","fontSize","MaterialBottomTabViewInner","state","navigation","descriptors","insets","dark","colors","buildLink","theme","useMemo","t","surface","card","index","dispatch","navigate","routes","merge","target","key","route","render","OS","onPress","accessibilityRole","borderless","centered","_2","rippleColor","_3","style","params","metaKey","altKey","ctrlKey","shiftKey","button","preventDefault","touchable","focused","options","tabBarIcon","tabBarLabel","title","tabBarColor","tabBarBadge","tabBarAccessibilityLabel","tabBarTestID","event","emit","type","canPreventDefault","defaultPrevented","MaterialBottomTabView","props","create","backgroundColor","display","justifyContent"],"mappings":"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","sourcesContent":["import { SafeAreaProviderCompat } from '@react-navigation/elements';\nimport {\n  CommonActions,\n  Link,\n  ParamListBase,\n  Route,\n  TabNavigationState,\n  useLinkBuilder,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { Platform, StyleSheet, Text } from 'react-native';\nimport { BottomNavigation, DarkTheme, DefaultTheme } from 'react-native-paper';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nimport type {\n  MaterialBottomTabDescriptorMap,\n  MaterialBottomTabNavigationConfig,\n  MaterialBottomTabNavigationHelpers,\n} from '../types';\n\ntype Props = MaterialBottomTabNavigationConfig & {\n  state: TabNavigationState<ParamListBase>;\n  navigation: MaterialBottomTabNavigationHelpers;\n  descriptors: MaterialBottomTabDescriptorMap;\n};\n\ntype Scene = { route: { key: string } };\n\n// Optionally require vector-icons referenced from react-native-paper:\n// https://github.com/callstack/react-native-paper/blob/4b26429c49053eaa4c3e0fae208639e01093fa87/src/components/MaterialCommunityIcon.tsx#L14\nlet MaterialCommunityIcons: React.ComponentType<\n  React.ComponentProps<\n    typeof import('react-native-vector-icons/MaterialCommunityIcons').default\n  >\n>;\n\ntry {\n  // Optionally require vector-icons\n  MaterialCommunityIcons =\n    require('react-native-vector-icons/MaterialCommunityIcons').default;\n} catch (e: any) {\n  let isErrorLogged = false;\n\n  // Fallback component for icons\n  MaterialCommunityIcons = ({\n    name,\n    color,\n    size,\n    selectionColor: _0,\n    onLayout: _1,\n    ...rest\n  }) => {\n    if (!isErrorLogged) {\n      if (\n        !/(Cannot find module|Module not found|Cannot resolve module)/.test(\n          e.message\n        )\n      ) {\n        console.error(e);\n      }\n\n      console.warn(\n        `Tried to use the icon '${name}' in a component from '@react-navigation/material-bottom-tabs', but 'react-native-vector-icons/MaterialCommunityIcons' could not be loaded.`,\n        `To remove this warning, try installing 'react-native-vector-icons' or use another method to specify icon: https://reactnavigation.org/docs/material-bottom-tab-navigator/#tabbaricon.`\n      );\n\n      isErrorLogged = true;\n    }\n\n    return (\n      // @ts-expect-error: we're passing icon props to text, but we don't care about it since it's just fallback\n      <Text\n        {...rest}\n        style={[\n          styles.icon,\n          {\n            color: typeof color !== 'number' ? color : undefined,\n            fontSize: size,\n          },\n        ]}\n      >\n        â–¡\n      </Text>\n    );\n  };\n}\n\nfunction MaterialBottomTabViewInner({\n  state,\n  navigation,\n  descriptors,\n  ...rest\n}: Props) {\n  const insets = useSafeAreaInsets();\n  const { dark, colors } = useTheme();\n  const buildLink = useLinkBuilder();\n\n  const theme = React.useMemo(() => {\n    const t = dark ? DarkTheme : DefaultTheme;\n\n    return {\n      ...t,\n      colors: {\n        ...t.colors,\n        ...colors,\n        surface: colors.card,\n      },\n    };\n  }, [colors, dark]);\n\n  return (\n    <BottomNavigation\n      {...rest}\n      theme={theme}\n      navigationState={state}\n      onIndexChange={(index: number) =>\n        navigation.dispatch({\n          ...CommonActions.navigate({\n            name: state.routes[index].name,\n            merge: true,\n          }),\n          target: state.key,\n        })\n      }\n      renderScene={({ route }) => descriptors[route.key].render()}\n      renderTouchable={\n        Platform.OS === 'web'\n          ? ({\n              onPress,\n              route,\n              accessibilityRole: _0,\n              borderless: _1,\n              centered: _2,\n              rippleColor: _3,\n              style,\n              ...rest\n            }) => {\n              return (\n                <Link\n                  {...rest}\n                  // @ts-expect-error: to could be undefined, but it doesn't affect functionality\n                  to={buildLink(route.name, route.params)}\n                  accessibilityRole=\"link\"\n                  onPress={(e: any) => {\n                    if (\n                      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n                      (e.button == null || e.button === 0) // ignore everything but left clicks\n                    ) {\n                      e.preventDefault();\n                      onPress?.(e);\n                    }\n                  }}\n                  style={[styles.touchable, style]}\n                />\n              );\n            }\n          : undefined\n      }\n      renderIcon={({ route, focused, color }) => {\n        const { options } = descriptors[route.key];\n\n        if (typeof options.tabBarIcon === 'string') {\n          return (\n            <MaterialCommunityIcons\n              name={options.tabBarIcon}\n              color={color}\n              size={24}\n              style={styles.icon}\n            />\n          );\n        }\n\n        if (typeof options.tabBarIcon === 'function') {\n          return options.tabBarIcon({ focused, color });\n        }\n\n        return null;\n      }}\n      getLabelText={({ route }: Scene) => {\n        const { options } = descriptors[route.key];\n\n        return options.tabBarLabel !== undefined\n          ? options.tabBarLabel\n          : options.title !== undefined\n          ? options.title\n          : (route as Route<string>).name;\n      }}\n      getColor={({ route }) => descriptors[route.key].options.tabBarColor}\n      getBadge={({ route }) => descriptors[route.key].options.tabBarBadge}\n      getAccessibilityLabel={({ route }) =>\n        descriptors[route.key].options.tabBarAccessibilityLabel\n      }\n      getTestID={({ route }) => descriptors[route.key].options.tabBarTestID}\n      onTabPress={({ route, preventDefault }) => {\n        const event = navigation.emit({\n          type: 'tabPress',\n          target: route.key,\n          canPreventDefault: true,\n        });\n\n        if (event.defaultPrevented) {\n          preventDefault();\n        }\n      }}\n      safeAreaInsets={insets}\n    />\n  );\n}\n\nexport default function MaterialBottomTabView(props: Props) {\n  return (\n    <SafeAreaProviderCompat>\n      <MaterialBottomTabViewInner {...props} />\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    backgroundColor: 'transparent',\n  },\n  touchable: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n});\n"]}