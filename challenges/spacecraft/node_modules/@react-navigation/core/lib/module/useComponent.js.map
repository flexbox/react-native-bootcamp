{"version":3,"sources":["useComponent.tsx"],"names":["React","useComponent","Component","props","propsRef","useRef","current","useEffect","rest","Error"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,eAAe,SAASC,YAAT,CAGbC,SAHa,EAGCC,KAHD,EAGW;AACxB,QAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAAN,CAAuBF,KAAvB,CAAjB,CADwB,CAGxB;AACA;AACA;;AACAC,EAAAA,QAAQ,CAACE,OAAT,GAAmBH,KAAnB;AAEAH,EAAAA,KAAK,CAACO,SAAN,CAAgB,MAAM;AACpBH,IAAAA,QAAQ,CAACE,OAAT,GAAmB,IAAnB;AACD,GAFD;AAIA,SAAON,KAAK,CAACK,MAAN,CAAcG,IAAD,IAAkD;AACpE,UAAML,KAAK,GAAGC,QAAQ,CAACE,OAAvB;;AAEA,QAAIH,KAAK,KAAK,IAAd,EAAoB;AAClB,YAAM,IAAIM,KAAJ,CACJ,+EADI,CAAN;AAGD,KAPmE,CASpE;;;AACA,wBAAO,oBAAC,SAAD,eAAeN,KAAf,EAA0BK,IAA1B,EAAP;AACD,GAXM,EAWJF,OAXH;AAYD","sourcesContent":["import * as React from 'react';\n\nexport default function useComponent<\n  T extends React.ComponentType<any>,\n  P extends {}\n>(Component: T, props: P) {\n  const propsRef = React.useRef<P | null>(props);\n\n  // Normally refs shouldn't be mutated in render\n  // But we return a component which will be rendered\n  // So it's just for immediate consumption\n  propsRef.current = props;\n\n  React.useEffect(() => {\n    propsRef.current = null;\n  });\n\n  return React.useRef((rest: Omit<React.ComponentProps<T>, keyof P>) => {\n    const props = propsRef.current;\n\n    if (props === null) {\n      throw new Error(\n        'The returned component must be rendered in the same render phase as the hook.'\n      );\n    }\n\n    // @ts-expect-error: the props should be fine here\n    return <Component {...props} {...rest} />;\n  }).current;\n}\n"]}