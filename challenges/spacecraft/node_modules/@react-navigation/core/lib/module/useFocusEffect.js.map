{"version":3,"sources":["useFocusEffect.tsx"],"names":["React","useNavigation","useFocusEffect","effect","navigation","arguments","undefined","message","console","error","useEffect","isFocused","cleanup","callback","destroy","process","env","NODE_ENV","then","JSON","stringify","unsubscribeFocus","addListener","unsubscribeBlur"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,aAAP,MAA0B,iBAA1B;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,cAAT,CAAwBC,MAAxB,EAAgD;AAC7D,QAAMC,UAAU,GAAGH,aAAa,EAAhC;;AAEA,MAAII,SAAS,CAAC,CAAD,CAAT,KAAiBC,SAArB,EAAgC;AAC9B,UAAMC,OAAO,GACX,yFACA,8EADA,GAEA,mBAFA,GAGA,+BAHA,GAIA,yBAJA,GAKA,sBALA,GAMA,QANA,GAOA,oEARF;AAUAC,IAAAA,OAAO,CAACC,KAAR,CAAcF,OAAd;AACD;;AAEDP,EAAAA,KAAK,CAACU,SAAN,CAAgB,MAAM;AACpB,QAAIC,SAAS,GAAG,KAAhB;AACA,QAAIC,OAAJ;;AAEA,UAAMC,QAAQ,GAAG,MAAM;AACrB,YAAMC,OAAO,GAAGX,MAAM,EAAtB;;AAEA,UAAIW,OAAO,KAAKR,SAAZ,IAAyB,OAAOQ,OAAP,KAAmB,UAAhD,EAA4D;AAC1D,eAAOA,OAAP;AACD;;AAED,UAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,YAAIV,OAAO,GACT,6FADF;;AAGA,YAAIO,OAAO,KAAK,IAAhB,EAAsB;AACpBP,UAAAA,OAAO,IACL,kGADF;AAED,SAHD,MAGO,IAAI,OAAQO,OAAD,CAAiBI,IAAxB,KAAiC,UAArC,EAAiD;AACtDX,UAAAA,OAAO,IACL,0FACA,uDADA,GAEA,8BAFA,GAGA,mBAHA,GAIA,8BAJA,GAKA,oCALA,GAMA,+BANA,GAOA,uDAPA,GAQA,gBARA,GASA,WATA,GAUA,oBAVA,GAWA,kBAXA,GAYA,QAZA,GAaA,oEAdF;AAeD,SAhBM,MAgBA;AACLA,UAAAA,OAAO,IAAK,kBAAiBY,IAAI,CAACC,SAAL,CAAeN,OAAf,CAAwB,IAArD;AACD;;AAEDN,QAAAA,OAAO,CAACC,KAAR,CAAcF,OAAd;AACD;AACF,KApCD,CAJoB,CA0CpB;;;AACA,QAAIH,UAAU,CAACO,SAAX,EAAJ,EAA4B;AAC1BC,MAAAA,OAAO,GAAGC,QAAQ,EAAlB;AACAF,MAAAA,SAAS,GAAG,IAAZ;AACD;;AAED,UAAMU,gBAAgB,GAAGjB,UAAU,CAACkB,WAAX,CAAuB,OAAvB,EAAgC,MAAM;AAC7D;AACA;AACA,UAAIX,SAAJ,EAAe;AACb;AACD;;AAED,UAAIC,OAAO,KAAKN,SAAhB,EAA2B;AACzBM,QAAAA,OAAO;AACR;;AAEDA,MAAAA,OAAO,GAAGC,QAAQ,EAAlB;AACAF,MAAAA,SAAS,GAAG,IAAZ;AACD,KAbwB,CAAzB;AAeA,UAAMY,eAAe,GAAGnB,UAAU,CAACkB,WAAX,CAAuB,MAAvB,EAA+B,MAAM;AAC3D,UAAIV,OAAO,KAAKN,SAAhB,EAA2B;AACzBM,QAAAA,OAAO;AACR;;AAEDA,MAAAA,OAAO,GAAGN,SAAV;AACAK,MAAAA,SAAS,GAAG,KAAZ;AACD,KAPuB,CAAxB;AASA,WAAO,MAAM;AACX,UAAIC,OAAO,KAAKN,SAAhB,EAA2B;AACzBM,QAAAA,OAAO;AACR;;AAEDS,MAAAA,gBAAgB;AAChBE,MAAAA,eAAe;AAChB,KAPD;AAQD,GAhFD,EAgFG,CAACpB,MAAD,EAASC,UAAT,CAhFH;AAiFD","sourcesContent":["import * as React from 'react';\n\nimport useNavigation from './useNavigation';\n\ntype EffectCallback = () => undefined | void | (() => void);\n\n/**\n * Hook to run an effect in a focused screen, similar to `React.useEffect`.\n * This can be used to perform side-effects such as fetching data or subscribing to events.\n * The passed callback should be wrapped in `React.useCallback` to avoid running the effect too often.\n *\n * @param callback Memoized callback containing the effect, should optionally return a cleanup function.\n */\nexport default function useFocusEffect(effect: EffectCallback) {\n  const navigation = useNavigation();\n\n  if (arguments[1] !== undefined) {\n    const message =\n      \"You passed a second argument to 'useFocusEffect', but it only accepts one argument. \" +\n      \"If you want to pass a dependency array, you can use 'React.useCallback':\\n\\n\" +\n      'useFocusEffect(\\n' +\n      '  React.useCallback(() => {\\n' +\n      '    // Your code here\\n' +\n      '  }, [depA, depB])\\n' +\n      ');\\n\\n' +\n      'See usage guide: https://reactnavigation.org/docs/use-focus-effect';\n\n    console.error(message);\n  }\n\n  React.useEffect(() => {\n    let isFocused = false;\n    let cleanup: undefined | void | (() => void);\n\n    const callback = () => {\n      const destroy = effect();\n\n      if (destroy === undefined || typeof destroy === 'function') {\n        return destroy;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        let message =\n          'An effect function must not return anything besides a function, which is used for clean-up.';\n\n        if (destroy === null) {\n          message +=\n            \" You returned 'null'. If your effect does not require clean-up, return 'undefined' (or nothing).\";\n        } else if (typeof (destroy as any).then === 'function') {\n          message +=\n            \"\\n\\nIt looks like you wrote 'useFocusEffect(async () => ...)' or returned a Promise. \" +\n            'Instead, write the async function inside your effect ' +\n            'and call it immediately:\\n\\n' +\n            'useFocusEffect(\\n' +\n            '  React.useCallback() => {\\n' +\n            '    async function fetchData() {\\n' +\n            '      // You can await here\\n' +\n            '      const response = await MyAPI.getData(someId);\\n' +\n            '      // ...\\n' +\n            '    }\\n\\n' +\n            '    fetchData();\\n' +\n            '  }, [someId])\\n' +\n            ');\\n\\n' +\n            'See usage guide: https://reactnavigation.org/docs/use-focus-effect';\n        } else {\n          message += ` You returned '${JSON.stringify(destroy)}'.`;\n        }\n\n        console.error(message);\n      }\n    };\n\n    // We need to run the effect on intial render/dep changes if the screen is focused\n    if (navigation.isFocused()) {\n      cleanup = callback();\n      isFocused = true;\n    }\n\n    const unsubscribeFocus = navigation.addListener('focus', () => {\n      // If callback was already called for focus, avoid calling it again\n      // The focus event may also fire on intial render, so we guard against runing the effect twice\n      if (isFocused) {\n        return;\n      }\n\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = callback();\n      isFocused = true;\n    });\n\n    const unsubscribeBlur = navigation.addListener('blur', () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = undefined;\n      isFocused = false;\n    });\n\n    return () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [effect, navigation]);\n}\n"]}