{"version":3,"sources":["useNavigationBuilder.tsx"],"names":["CommonActions","React","isValidElementType","Group","isArrayEqual","isRecordEqual","NavigationHelpersContext","NavigationRouteContext","NavigationStateContext","Screen","PrivateValueStore","useChildListeners","useComponent","useCurrentRender","useDescriptors","useEventEmitter","useFocusedListenersChildrenAdapter","useFocusEvents","useKeyedChildListeners","useNavigationHelpers","useOnAction","useOnGetState","useOnRouteFocus","useRegisterNavigator","useScheduleUpdate","isValidKey","key","undefined","getRouteConfigsFromChildren","children","groupKey","groupOptions","configs","Children","toArray","reduce","acc","child","isValidElement","type","props","navigationKey","Error","JSON","stringify","name","push","keys","options","Fragment","screenOptions","String","process","env","NODE_ENV","forEach","config","component","getComponent","console","warn","test","useNavigationBuilder","createRouter","navigatorKey","route","useContext","screenListeners","rest","current","router","useRef","params","state","initial","screen","initialRouteName","routeConfigs","screens","routeNames","map","routeKeyList","curr","join","routeParamList","initialParams","routeGetIdList","Object","assign","getId","length","isStateValid","useCallback","isStateInitialized","stale","currentState","getState","getCurrentState","setState","setCurrentState","setKey","getKey","getIsInitial","stateCleanedUp","cleanUpState","initializedState","isFirstStateInitialization","useMemo","initialRouteParamList","initialParamsFromParams","getInitialState","getRehydratedState","previousRouteKeyListRef","useEffect","previousRouteKeyList","nextState","getStateForRouteNamesChange","routeKeyChanges","filter","hasOwnProperty","previousNestedParamsRef","previousParams","action","reset","navigate","path","updatedState","getStateForAction","shouldUpdate","setTimeout","initializedStateRef","emitter","e","target","routes","find","index","navigation","descriptors","listeners","concat","cb","i","self","lastIndexOf","listener","emit","data","childListeners","addListener","keyedListeners","addKeyedListener","onAction","actionListeners","beforeRemoveListeners","beforeRemove","routerConfigOptions","onRouteFocus","id","focusedListeners","focus","getStateListeners","defaultScreenOptions","NavigationContent","Provider","value"],"mappings":"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","sourcesContent":["import {\n  CommonActions,\n  DefaultRouterOptions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n  Router,\n  RouterConfigOptions,\n  RouterFactory,\n} from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\n\nimport Group from './Group';\nimport isArrayEqual from './isArrayEqual';\nimport isRecordEqual from './isRecordEqual';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport Screen from './Screen';\nimport {\n  DefaultNavigatorOptions,\n  EventMapBase,\n  EventMapCore,\n  NavigatorScreenParams,\n  PrivateValueStore,\n  RouteConfig,\n} from './types';\nimport useChildListeners from './useChildListeners';\nimport useComponent from './useComponent';\nimport useCurrentRender from './useCurrentRender';\nimport useDescriptors, { ScreenConfigWithParent } from './useDescriptors';\nimport useEventEmitter from './useEventEmitter';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport useFocusEvents from './useFocusEvents';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useOnGetState from './useOnGetState';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useScheduleUpdate from './useScheduleUpdate';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype NavigatorRoute<State extends NavigationState> = {\n  key: string;\n  params?: NavigatorScreenParams<ParamListBase, State>;\n};\n\nconst isValidKey = (key: unknown) =>\n  key === undefined || (typeof key === 'string' && key !== '');\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>(\n  children: React.ReactNode,\n  groupKey?: string,\n  groupOptions?: ScreenConfigWithParent<\n    State,\n    ScreenOptions,\n    EventMap\n  >['options']\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the screen '${\n              child.props.name\n            }'. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          props: child.props as RouteConfig<\n            ParamListBase,\n            string,\n            State,\n            ScreenOptions,\n            EventMap\n          >,\n        });\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the group. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        // When we encounter a fragment or group, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\n            child.props.children,\n            child.props.navigationKey,\n            child.type !== Group\n              ? groupOptions\n              : groupOptions != null\n              ? [...groupOptions, child.props.screenOptions]\n              : [child.props.screenOptions]\n          )\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${\n        React.isValidElement(child)\n          ? `'${\n              typeof child.type === 'string' ? child.type : child.type?.name\n            }'${\n              child.props?.name ? ` for the screen '${child.props.name}'` : ''\n            }`\n          : typeof child === 'object'\n          ? JSON.stringify(child)\n          : `'${String(child)}'`\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach((config) => {\n      const { name, children, component, getComponent } = config.props;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (\n        children != null ||\n        component !== undefined ||\n        getComponent !== undefined\n      ) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\n          );\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\n          );\n        }\n\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            // Inline anonymous functions passed in the `component` prop will have the name of the prop\n            // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n            // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n            console.warn(\n              `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n            );\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(\n              `Got a component with the name '${component.name}' for the screen '${name}'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.`\n            );\n          }\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<\n    ParamListBase,\n    State,\n    ScreenOptions,\n    EventMap\n  > &\n    RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute<State>\n    | undefined;\n\n  const { children, screenListeners, ...rest } = options;\n  const { current: router } = React.useRef<Router<State, any>>(\n    createRouter({\n      ...(rest as unknown as RouterOptions),\n      ...(route?.params &&\n      route.params.state == null &&\n      route.params.initial !== false &&\n      typeof route.params.screen === 'string'\n        ? { initialRouteName: route.params.screen }\n        : null),\n    })\n  );\n\n  const routeConfigs = getRouteConfigsFromChildren<\n    State,\n    ScreenOptions,\n    EventMap\n  >(children);\n\n  const screens = routeConfigs.reduce<\n    Record<string, ScreenConfigWithParent<State, ScreenOptions, EventMap>>\n  >((acc, config) => {\n    if (config.props.name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`\n      );\n    }\n\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n\n  const routeNames = routeConfigs.map((config) => config.props.name);\n  const routeKeyList = routeNames.reduce<Record<string, React.Key | undefined>>(\n    (acc, curr) => {\n      acc[curr] = screens[curr].keys.map((key) => key ?? '').join(':');\n      return acc;\n    },\n    {}\n  );\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      acc[curr] = initialParams;\n      return acc;\n    },\n    {}\n  );\n  const routeGetIdList = routeNames.reduce<\n    RouterConfigOptions['routeGetIdList']\n  >(\n    (acc, curr) =>\n      Object.assign(acc, {\n        [curr]: screens[curr].props.getId,\n      }),\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    (state) => state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    (state) =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial,\n  } = React.useContext(NavigationStateContext);\n\n  const stateCleanedUp = React.useRef(false);\n\n  const cleanUpState = React.useCallback(() => {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n\n  const setState = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) => {\n      if (stateCleanedUp.current) {\n        // State might have been already cleaned up due to unmount\n        // We do not want to expose API allowing to override this\n        // This would lead to old data preservation on main navigator unmount\n        return;\n      }\n      setCurrentState(state);\n    },\n    [setCurrentState]\n  );\n\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    const initialRouteParamList = routeNames.reduce<\n      Record<string, object | undefined>\n    >((acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      const initialParamsFromParams =\n        route?.params?.state == null &&\n        route?.params?.initial !== false &&\n        route?.params?.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    }, {});\n\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if (\n      (currentState === undefined || !isStateValid(currentState)) &&\n      route?.params?.state == null\n    ) {\n      return [\n        router.getInitialState({\n          routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList,\n        }),\n        true,\n      ];\n    } else {\n      return [\n        router.getRehydratedState(\n          route?.params?.state ?? (currentState as PartialState<State>),\n          {\n            routeNames,\n            routeParamList: initialRouteParamList,\n            routeGetIdList,\n          }\n        ),\n        false,\n      ];\n    }\n    // We explicitly don't include routeNames, route.params etc. in the dep list\n    // below. We want to avoid forcing a new state to be calculated in those cases\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n\n  const previousRouteKeyListRef = React.useRef(routeKeyList);\n\n  React.useEffect(() => {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n\n  const previousRouteKeyList = previousRouteKeyListRef.current;\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initalized locally\n    // So it'll be `undefined` or stale until the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedState as State);\n\n  let nextState: State = state;\n\n  if (\n    !isArrayEqual(state.routeNames, routeNames) ||\n    !isRecordEqual(routeKeyList, previousRouteKeyList)\n  ) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(\n        (name) =>\n          previousRouteKeyList.hasOwnProperty(name) &&\n          routeKeyList[name] !== previousRouteKeyList[name]\n      ),\n    });\n  }\n\n  const previousNestedParamsRef = React.useRef(route?.params);\n\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n\n    let action: CommonActions.Action | undefined;\n\n    if (\n      typeof route.params.state === 'object' &&\n      route.params.state != null &&\n      route.params !== previousParams\n    ) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (\n      typeof route.params.screen === 'string' &&\n      ((route.params.initial === false && isFirstStateInitialization) ||\n        route.params !== previousParams)\n    ) {\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path,\n      });\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action\n      ? router.getStateForAction(nextState, action, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        })\n      : null;\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n            routeGetIdList,\n          })\n        : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n  const initializedStateRef = React.useRef<State>();\n  initializedStateRef.current = initializedState;\n\n  const getState = React.useCallback((): State => {\n    const currentState = getCurrentState();\n\n    return isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n  }, [getCurrentState, isStateInitialized]);\n\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\n    let routeNames = [];\n\n    let route: Route<string> | undefined;\n\n    if (e.target) {\n      route = state.routes.find((route) => route.key === e.target);\n\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(\n        ...Object.keys(screens).filter((name) => route?.name === name)\n      );\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n\n    const listeners = ([] as (((e: any) => void) | undefined)[])\n      .concat(\n        // Get an array of listeners for all screens + common listeners on navigator\n        ...[\n          screenListeners,\n          ...routeNames.map((name) => {\n            const { listeners } = screens[name].props;\n            return listeners;\n          }),\n        ].map((listeners) => {\n          const map =\n            typeof listeners === 'function'\n              ? listeners({ route: route as any, navigation })\n              : listeners;\n\n          return map\n            ? Object.keys(map)\n                .filter((type) => type === e.type)\n                .map((type) => map?.[type])\n            : undefined;\n        })\n      )\n      // We don't want same listener to be called multiple times for same event\n      // So we remove any duplicate functions from the array\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n\n    listeners.forEach((listener) => listener?.(e));\n  });\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const { listeners: childListeners, addListener } = useChildListeners();\n\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    },\n    emitter,\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<\n    State,\n    ActionHelpers,\n    NavigationAction,\n    EventMap\n  >({\n    id: options.id,\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus,\n  });\n\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState,\n  });\n\n  const descriptors = useDescriptors<\n    State,\n    ActionHelpers,\n    ScreenOptions,\n    EventMap\n  >({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\n    emitter,\n  });\n\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors,\n  });\n\n  const NavigationContent = useComponent(NavigationHelpersContext.Provider, {\n    value: navigation,\n  });\n\n  return {\n    state,\n    navigation,\n    descriptors,\n    NavigationContent,\n  };\n}\n"]}