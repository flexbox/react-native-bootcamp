{"version":3,"sources":["PlatformPressable.tsx"],"names":["useTheme","React","Animated","Easing","Platform","Pressable","AnimatedPressable","createAnimatedComponent","ANDROID_VERSION_LOLLIPOP","ANDROID_SUPPORTS_RIPPLE","OS","Version","PlatformPressable","onPressIn","onPressOut","android_ripple","pressColor","pressOpacity","style","rest","dark","opacity","useState","Value","animateTo","toValue","duration","timing","easing","inOut","quad","useNativeDriver","start","handlePressIn","e","handlePressOut","color","undefined"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,0BAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SACEC,QADF,EAEEC,MAFF,EAIEC,QAJF,EAKEC,SALF,QASO,cATP;AAkBA,MAAMC,iBAAiB,GAAGJ,QAAQ,CAACK,uBAAT,CAAiCF,SAAjC,CAA1B;AAEA,MAAMG,wBAAwB,GAAG,EAAjC;AACA,MAAMC,uBAAuB,GAC3BL,QAAQ,CAACM,EAAT,KAAgB,SAAhB,IAA6BN,QAAQ,CAACO,OAAT,IAAoBH,wBADnD;AAGA;AACA;AACA;;AACA,eAAe,SAASI,iBAAT,OAQL;AAAA,MARgC;AACxCC,IAAAA,SADwC;AAExCC,IAAAA,UAFwC;AAGxCC,IAAAA,cAHwC;AAIxCC,IAAAA,UAJwC;AAKxCC,IAAAA,YAAY,GAAG,GALyB;AAMxCC,IAAAA,KANwC;AAOxC,OAAGC;AAPqC,GAQhC;AACR,QAAM;AAAEC,IAAAA;AAAF,MAAWpB,QAAQ,EAAzB;AACA,QAAM,CAACqB,OAAD,IAAYpB,KAAK,CAACqB,QAAN,CAAe,MAAM,IAAIpB,QAAQ,CAACqB,KAAb,CAAmB,CAAnB,CAArB,CAAlB;;AAEA,QAAMC,SAAS,GAAG,CAACC,OAAD,EAAkBC,QAAlB,KAAuC;AACvD,QAAIjB,uBAAJ,EAA6B;AAC3B;AACD;;AAEDP,IAAAA,QAAQ,CAACyB,MAAT,CAAgBN,OAAhB,EAAyB;AACvBI,MAAAA,OADuB;AAEvBC,MAAAA,QAFuB;AAGvBE,MAAAA,MAAM,EAAEzB,MAAM,CAAC0B,KAAP,CAAa1B,MAAM,CAAC2B,IAApB,CAHe;AAIvBC,MAAAA,eAAe,EAAE;AAJM,KAAzB,EAKGC,KALH;AAMD,GAXD;;AAaA,QAAMC,aAAa,GAAIC,CAAD,IAA8B;AAClDV,IAAAA,SAAS,CAACP,YAAD,EAAe,CAAf,CAAT;AACAJ,IAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAGqB,CAAH,CAAT;AACD,GAHD;;AAKA,QAAMC,cAAc,GAAID,CAAD,IAA8B;AACnDV,IAAAA,SAAS,CAAC,CAAD,EAAI,GAAJ,CAAT;AACAV,IAAAA,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAGoB,CAAH,CAAV;AACD,GAHD;;AAKA,sBACE,oBAAC,iBAAD;AACE,IAAA,SAAS,EAAED,aADb;AAEE,IAAA,UAAU,EAAEE,cAFd;AAGE,IAAA,cAAc,EACZ1B,uBAAuB,GACnB;AACE2B,MAAAA,KAAK,EACHpB,UAAU,KAAKqB,SAAf,GACIrB,UADJ,GAEII,IAAI,GACJ,0BADI,GAEJ,oBANR;AAOE,SAAGL;AAPL,KADmB,GAUnBsB,SAdR;AAgBE,IAAA,KAAK,EAAE,CAAC;AAAEhB,MAAAA,OAAO,EAAE,CAACZ,uBAAD,GAA2BY,OAA3B,GAAqC;AAAhD,KAAD,EAAsDH,KAAtD;AAhBT,KAiBMC,IAjBN,EADF;AAqBD","sourcesContent":["import { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport {\n  Animated,\n  Easing,\n  GestureResponderEvent,\n  Platform,\n  Pressable,\n  PressableProps,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nexport type Props = Omit<PressableProps, 'style'> & {\n  pressColor?: string;\n  pressOpacity?: number;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  children: React.ReactNode;\n};\n\nconst AnimatedPressable = Animated.createAnimatedComponent(Pressable);\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\nconst ANDROID_SUPPORTS_RIPPLE =\n  Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\n\n/**\n * PlatformPressable provides an abstraction on top of Pressable to handle platform differences.\n */\nexport default function PlatformPressable({\n  onPressIn,\n  onPressOut,\n  android_ripple,\n  pressColor,\n  pressOpacity = 0.3,\n  style,\n  ...rest\n}: Props) {\n  const { dark } = useTheme();\n  const [opacity] = React.useState(() => new Animated.Value(1));\n\n  const animateTo = (toValue: number, duration: number) => {\n    if (ANDROID_SUPPORTS_RIPPLE) {\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue,\n      duration,\n      easing: Easing.inOut(Easing.quad),\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const handlePressIn = (e: GestureResponderEvent) => {\n    animateTo(pressOpacity, 0);\n    onPressIn?.(e);\n  };\n\n  const handlePressOut = (e: GestureResponderEvent) => {\n    animateTo(1, 200);\n    onPressOut?.(e);\n  };\n\n  return (\n    <AnimatedPressable\n      onPressIn={handlePressIn}\n      onPressOut={handlePressOut}\n      android_ripple={\n        ANDROID_SUPPORTS_RIPPLE\n          ? {\n              color:\n                pressColor !== undefined\n                  ? pressColor\n                  : dark\n                  ? 'rgba(255, 255, 255, .32)'\n                  : 'rgba(0, 0, 0, .32)',\n              ...android_ripple,\n            }\n          : undefined\n      }\n      style={[{ opacity: !ANDROID_SUPPORTS_RIPPLE ? opacity : 1 }, style]}\n      {...rest}\n    />\n  );\n}\n"]}