{"version":3,"sources":["getNamedContext.tsx"],"names":["contexts","global","Map","getNamedContext","name","initialValue","context","get","React","createContext","displayName","set"],"mappings":";;;;;;;AAAA;;;;;;;;AAEA,MAAMA,QAAQ,GAAG,uCAAjB;AAMA;AACAC,MAAM,CAACD,QAAD,CAAN,uBAAmBC,MAAM,CAACD,QAAD,CAAzB,+DAAuC,IAAIE,GAAJ,EAAvC;;AAEe,SAASC,eAAT,CACbC,IADa,EAEbC,YAFa,EAGK;AAClB,MAAIC,OAAO,GAAGL,MAAM,CAACD,QAAD,CAAN,CAAiBO,GAAjB,CAAqBH,IAArB,CAAd;;AAEA,MAAIE,OAAJ,EAAa;AACX,WAAOA,OAAP;AACD;;AAEDA,EAAAA,OAAO,gBAAGE,KAAK,CAACC,aAAN,CAAuBJ,YAAvB,CAAV;AACAC,EAAAA,OAAO,CAACI,WAAR,GAAsBN,IAAtB;AAEAH,EAAAA,MAAM,CAACD,QAAD,CAAN,CAAiBW,GAAjB,CAAqBP,IAArB,EAA2BE,OAA3B;AAEA,SAAOA,OAAP;AACD","sourcesContent":["import * as React from 'react';\n\nconst contexts = '__react_navigation__elements_contexts';\n\ndeclare global {\n  var __react_navigation__elements_contexts: Map<string, React.Context<any>>;\n}\n\n// We use a global variable to keep our contexts so that we can reuse same contexts across packages\nglobal[contexts] = global[contexts] ?? new Map<string, React.Context<any>>();\n\nexport default function getNamedContext<T>(\n  name: string,\n  initialValue: T\n): React.Context<T> {\n  let context = global[contexts].get(name);\n\n  if (context) {\n    return context;\n  }\n\n  context = React.createContext<T>(initialValue);\n  context.displayName = name;\n\n  global[contexts].set(name, context);\n\n  return context;\n}\n"]}