"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeQueries = makeQueries;

var _waitFor = _interopRequireDefault(require("../waitFor"));

var _errors = require("./errors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// The WaitForOptions has been moved to the second option param of findBy* methods with the adding of TextMatchOptions
// To make the migration easier and avoid a breaking change, keep reading this options from the first param but warn
const deprecatedKeys = ['timeout', 'interval', 'stackTraceError'];

const extractDeprecatedWaitForOptionUsage = queryOptions => {
  if (queryOptions) {
    const waitForOptions = {
      timeout: queryOptions.timeout,
      interval: queryOptions.interval,
      stackTraceError: queryOptions.stackTraceError
    };
    deprecatedKeys.forEach(key => {
      if (queryOptions[key]) {
        // eslint-disable-next-line no-console
        console.warn(`Use of option "${key}" in a findBy* query's second parameter, TextMatchOptions, is deprecated. Please pass this option in the third, WaitForOptions, parameter. 
Example: 

  findByText(text, {}, { ${key}: ${queryOptions[key].toString()} })`);
      }
    });
    return waitForOptions;
  }
};

function makeQueries(queryAllByQuery, getMissingError, getMultipleError) {
  function getAllByQuery(instance) {
    return function getAllFn(args, queryOptions) {
      const results = queryAllByQuery(instance)(args, queryOptions);

      if (results.length === 0) {
        throw new _errors.ErrorWithStack(getMissingError(args), getAllFn);
      }

      return results;
    };
  }

  function queryByQuery(instance) {
    return function singleQueryFn(args, queryOptions) {
      const results = queryAllByQuery(instance)(args, queryOptions);

      if (results.length > 1) {
        throw new _errors.ErrorWithStack(getMultipleError(args), singleQueryFn);
      }

      if (results.length === 0) {
        return null;
      }

      return results[0];
    };
  }

  function getByQuery(instance) {
    return function getFn(args, queryOptions) {
      const results = queryAllByQuery(instance)(args, queryOptions);

      if (results.length > 1) {
        throw new _errors.ErrorWithStack(getMultipleError(args), getFn);
      }

      if (results.length === 0) {
        throw new _errors.ErrorWithStack(getMissingError(args), getFn);
      }

      return results[0];
    };
  }

  function findAllByQuery(instance) {
    return function findAllFn(args, queryOptions, waitForOptions = {}) {
      const deprecatedWaitForOptions = extractDeprecatedWaitForOptionUsage(queryOptions);
      return (0, _waitFor.default)(() => getAllByQuery(instance)(args, queryOptions), { ...deprecatedWaitForOptions,
        ...waitForOptions
      });
    };
  }

  function findByQuery(instance) {
    return function findFn(args, queryOptions, waitForOptions = {}) {
      const deprecatedWaitForOptions = extractDeprecatedWaitForOptionUsage(queryOptions);
      return (0, _waitFor.default)(() => getByQuery(instance)(args, queryOptions), { ...deprecatedWaitForOptions,
        ...waitForOptions
      });
    };
  }

  return {
    getBy: getByQuery,
    getAllBy: getAllByQuery,
    queryBy: queryByQuery,
    findBy: findByQuery,
    findAllBy: findAllByQuery
  };
}