{"version":3,"file":"RemoteConsole.js","sourceRoot":"","sources":["../../src/logs/RemoteConsole.ts"],"names":[],"mappings":"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","sourcesContent":["import RemoteLogging, { LogEntryFields, LogLevel } from './RemoteLogging';\n\n/**\n * Creates a console object that delegates calls to the specified underlying console and also sends\n * the messages to the development environment over a remote connection.\n */\nexport function createRemoteConsole(originalConsole: Console): Console {\n  let groupDepth = 0;\n\n  const enhancedConsole: typeof originalConsole = Object.create(originalConsole);\n\n  // https://console.spec.whatwg.org/#debug\n  // Don't use a level below \"info\" because \"debug\" is intended for messages that shouldn't be shown\n  // to the developer\n  _defineConsoleLogMethod('debug', 'info');\n\n  // https://console.spec.whatwg.org/#log\n  _defineConsoleLogMethod('log', 'info');\n\n  // https://console.spec.whatwg.org/#info\n  _defineConsoleLogMethod('info', 'info');\n\n  // https://console.spec.whatwg.org/#warn\n  _defineConsoleLogMethod('warn', 'warn');\n\n  // https://console.spec.whatwg.org/#error\n  _defineConsoleLogMethod('error', 'error');\n\n  // https://console.spec.whatwg.org/#assert\n  enhancedConsole.assert = function assert(condition: unknown, ...data: unknown[]): void {\n    if (originalConsole.assert) {\n      // @ts-ignore\n      originalConsole.assert(!!condition, ...data);\n    }\n\n    if (condition) {\n      return;\n    }\n\n    const assertionMessage = 'Assertion failed';\n    if (!data.length) {\n      data.push(assertionMessage);\n    } else {\n      if (typeof data[0] !== 'string') {\n        data.unshift(assertionMessage);\n      } else {\n        data[0] = `${assertionMessage}: ${data[0]}`;\n      }\n    }\n\n    _enqueueRemoteLog('error', {}, data);\n  };\n\n  // https://console.spec.whatwg.org/#group\n  enhancedConsole.group = function group(...data: unknown[]): void {\n    if (originalConsole.group) {\n      // @ts-ignore\n      originalConsole.group(...data);\n    }\n\n    _enqueueRemoteLog('info', {}, data);\n    groupDepth++;\n  };\n\n  // https://console.spec.whatwg.org/#groupcollapsed\n  enhancedConsole.groupCollapsed = function groupCollapsed(...data: unknown[]): void {\n    if (originalConsole.groupCollapsed) {\n      // @ts-ignore\n      originalConsole.groupCollapsed(...data);\n    }\n\n    _enqueueRemoteLog('info', { groupCollapsed: true }, data);\n    groupDepth++;\n  };\n\n  // https://console.spec.whatwg.org/#groupend\n  enhancedConsole.groupEnd = function groupEnd(): void {\n    if (originalConsole.groupEnd) {\n      originalConsole.groupEnd();\n    }\n\n    if (groupDepth > 0) {\n      groupDepth--;\n    }\n\n    _enqueueRemoteLog('info', { shouldHide: true }, []);\n  };\n\n  /**\n   * Defines a method in the `console.log()` family on the enhanced console\n   * instance\n   */\n  function _defineConsoleLogMethod(name: keyof typeof console, level: LogLevel): void {\n    enhancedConsole[name] = function __expoConsoleLog(...data: unknown[]): void {\n      const originalMethod = originalConsole[name];\n      if (typeof originalMethod === 'function') {\n        originalMethod.apply(originalConsole, data);\n      }\n\n      _enqueueRemoteLog(level, {}, data);\n    };\n  }\n\n  /**\n   * Schedules the given log entry to be sent remotely in a safe way that handles all errors. This\n   * function is responsible for error handling because the console methods are synchronous but\n   * sending log messages is asynchronous, so this code (instead of the console methods) needs to be\n   * responsible for asynchronous errors.\n   */\n  function _enqueueRemoteLog(\n    level: LogLevel,\n    additionalFields: LogEntryFields,\n    data: unknown[]\n  ): void {\n    RemoteLogging.enqueueRemoteLogAsync(level, { groupDepth, ...additionalFields }, data).catch(\n      (error) => {\n        originalConsole.error(\n          `There was a problem sending log messages to your development environment`,\n          error\n        );\n      }\n    );\n  }\n\n  return enhancedConsole;\n}\n"]}