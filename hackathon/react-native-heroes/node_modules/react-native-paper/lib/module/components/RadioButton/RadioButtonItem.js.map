{"version":3,"sources":["RadioButtonItem.tsx"],"names":["React","View","StyleSheet","withTheme","RadioButtonContext","handlePress","TouchableRipple","RadioButton","Text","RadioButtonAndroid","RadioButtonIOS","RadioButtonItem","value","label","style","labelStyle","onPress","disabled","color","uncheckedColor","status","theme","colors","accessibilityLabel","testID","mode","position","radioButtonProps","isLeading","radioButton","context","undefined","onValueChange","styles","container","text","textAlign","displayName","RadioButtonItemWithTheme","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","fontSize","flexShrink","flexGrow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress } from './utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport RadioButton from './RadioButton';\nimport Text from '../Typography/Text';\nimport RadioButtonAndroid from './RadioButtonAndroid';\nimport RadioButtonIOS from './RadioButtonIOS';\n\nexport type Props = {\n  /**\n   * Value of the radio button.\n   */\n  value: string;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Whether `<RadioButton.Android />` or `<RadioButton.IOS />` should be used.\n   * Left undefined `<RadioButton />` will be used.\n   */\n  mode?: 'android' | 'ios';\n  /**\n   * Radio button control position.\n   */\n  position?: 'leading' | 'trailing';\n};\n\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-item.ios.png\" />\n *     <figcaption>Pressed</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { RadioButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('first');\n *\n *   return (\n *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>\n *       <RadioButton.Item label=\"First item\" value=\"first\" />\n *       <RadioButton.Item label=\"Second item\" value=\"second\" />\n *     </RadioButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst RadioButtonItem = ({\n  value,\n  label,\n  style,\n  labelStyle,\n  onPress,\n  disabled,\n  color,\n  uncheckedColor,\n  status,\n  theme: { colors },\n  accessibilityLabel,\n  testID,\n  mode,\n  position = 'trailing',\n}: Props) => {\n  const radioButtonProps = { value, disabled, status, color, uncheckedColor };\n  const isLeading = position === 'leading';\n  let radioButton: any;\n\n  if (mode === 'android') {\n    radioButton = <RadioButtonAndroid {...radioButtonProps} />;\n  } else if (mode === 'ios') {\n    radioButton = <RadioButtonIOS {...radioButtonProps} />;\n  } else {\n    radioButton = <RadioButton {...radioButtonProps} />;\n  }\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        return (\n          <TouchableRipple\n            onPress={\n              disabled\n                ? undefined\n                : () =>\n                    handlePress({\n                      onPress: onPress,\n                      onValueChange: context?.onValueChange,\n                      value,\n                    })\n            }\n            accessibilityLabel={accessibilityLabel}\n            testID={testID}\n          >\n            <View style={[styles.container, style]} pointerEvents=\"none\">\n              {isLeading && radioButton}\n              <Text\n                style={[\n                  styles.label,\n                  {\n                    color: colors.text,\n                    textAlign: isLeading ? 'right' : 'left',\n                  },\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n              {!isLeading && radioButton}\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonItem.displayName = 'RadioButton.Item';\n\nexport default withTheme(RadioButtonItem);\n\n// @component-docs ignore-next-line\nconst RadioButtonItemWithTheme = withTheme(RadioButtonItem);\n// @component-docs ignore-next-line\nexport { RadioButtonItemWithTheme as RadioButtonItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n});\n"]}