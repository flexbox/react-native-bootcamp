{"version":3,"sources":["Button.tsx"],"names":["Button","disabled","compact","mode","dark","loading","icon","color","buttonColor","children","uppercase","accessibilityLabel","accessibilityHint","onPress","onLongPress","style","theme","contentStyle","labelStyle","testID","accessible","rest","current","elevation","React","useRef","Animated","Value","useEffect","setValue","handlePressIn","scale","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","colors","roundness","font","fonts","medium","backgroundColor","borderColor","textColor","borderWidth","white","black","alpha","rgb","string","primary","StyleSheet","hairlineWidth","isDark","isLight","rippleColor","buttonStyle","borderRadius","touchableStyle","flatten","customLabelColor","fontSize","customLabelSize","textStyle","elevationRes","iconStyle","flexDirection","styles","iconReverse","button","content","label","compactLabel","uppercaseLabel","create","minWidth","borderStyle","alignItems","justifyContent","marginLeft","marginRight","textAlign","letterSpacing","marginVertical","marginHorizontal","textTransform"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport ActivityIndicator from './ActivityIndicator';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline (low emphasis)\n   * - `outlined` - button with an outline (medium emphasis)\n   * - `contained` - button with a background color and elevation shadow (high emphasis)\n   */\n  mode?: 'text' | 'outlined' | 'contained';\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.\n   */\n  dark?: boolean;\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean;\n  /**\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Label text of the button.\n   */\n  children: React.ReactNode;\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility hint for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityHint?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width and to set the icon on the right with `flexDirection: 'row-reverse'`.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the button text.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Button = ({\n  disabled,\n  compact,\n  mode = 'text',\n  dark,\n  loading,\n  icon,\n  color: buttonColor,\n  children,\n  uppercase = true,\n  accessibilityLabel,\n  accessibilityHint,\n  onPress,\n  onLongPress,\n  style,\n  theme,\n  contentStyle,\n  labelStyle,\n  testID,\n  accessible,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(mode === 'contained' ? 2 : 0)\n  );\n  React.useEffect(() => {\n    elevation.setValue(mode === 'contained' ? 2 : 0);\n  }, [mode, elevation]);\n\n  const handlePressIn = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 8,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const handlePressOut = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 2,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const { colors, roundness } = theme;\n  const font = theme.fonts.medium;\n\n  let backgroundColor: string,\n    borderColor: string,\n    textColor: string,\n    borderWidth: number;\n\n  if (mode === 'contained') {\n    if (disabled) {\n      backgroundColor = color(theme.dark ? white : black)\n        .alpha(0.12)\n        .rgb()\n        .string();\n    } else if (buttonColor) {\n      backgroundColor = buttonColor;\n    } else {\n      backgroundColor = colors.primary;\n    }\n  } else {\n    backgroundColor = 'transparent';\n  }\n\n  if (mode === 'outlined') {\n    borderColor = color(theme.dark ? white : black)\n      .alpha(0.29)\n      .rgb()\n      .string();\n    borderWidth = StyleSheet.hairlineWidth;\n  } else {\n    borderColor = 'transparent';\n    borderWidth = 0;\n  }\n\n  if (disabled) {\n    textColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  } else if (mode === 'contained') {\n    let isDark;\n\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark =\n        backgroundColor === 'transparent'\n          ? false\n          : !color(backgroundColor).isLight();\n    }\n\n    textColor = isDark ? white : black;\n  } else if (buttonColor) {\n    textColor = buttonColor;\n  } else {\n    textColor = colors.primary;\n  }\n\n  const rippleColor = color(textColor).alpha(0.32).rgb().string();\n  const buttonStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius: roundness,\n  };\n  const touchableStyle = {\n    borderRadius: style\n      ? ((StyleSheet.flatten(style) || {}) as ViewStyle).borderRadius ||\n        roundness\n      : roundness,\n  };\n\n  const { color: customLabelColor, fontSize: customLabelSize } =\n    StyleSheet.flatten(labelStyle) || {};\n\n  const textStyle = { color: textColor, ...font };\n  const elevationRes = disabled || mode !== 'contained' ? 0 : elevation;\n  const iconStyle =\n    StyleSheet.flatten(contentStyle)?.flexDirection === 'row-reverse'\n      ? styles.iconReverse\n      : styles.icon;\n\n  return (\n    <Surface\n      {...rest}\n      style={[\n        styles.button,\n        compact && styles.compact,\n        { elevation: elevationRes } as ViewStyle,\n        buttonStyle,\n        style,\n      ]}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityHint={accessibilityHint}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled }}\n        accessible={accessible}\n        disabled={disabled}\n        rippleColor={rippleColor}\n        style={touchableStyle}\n        testID={testID}\n      >\n        <View style={[styles.content, contentStyle]}>\n          {icon && loading !== true ? (\n            <View style={iconStyle}>\n              <Icon\n                source={icon}\n                size={customLabelSize ?? 16}\n                color={\n                  typeof customLabelColor === 'string'\n                    ? customLabelColor\n                    : textColor\n                }\n              />\n            </View>\n          ) : null}\n          {loading ? (\n            <ActivityIndicator\n              size={customLabelSize ?? 16}\n              color={\n                typeof customLabelColor === 'string'\n                  ? customLabelColor\n                  : textColor\n              }\n              style={iconStyle}\n            />\n          ) : null}\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              styles.label,\n              compact && styles.compactLabel,\n              uppercase && styles.uppercaseLabel,\n              textStyle,\n              font,\n              labelStyle,\n            ]}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4,\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n});\n\nexport default withTheme(Button);\n"]}