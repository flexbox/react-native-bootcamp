{"version":3,"sources":["TextInputAdornment.tsx"],"names":["getAdornmentConfig","left","right","adornmentConfig","side","AdornmentSide","Left","adornment","Right","forEach","React","isValidElement","type","TextInputAffix","AdornmentType","Affix","TextInputIcon","Icon","push","getAdornmentStyleAdjustmentForNativeInput","leftAffixWidth","rightAffixWidth","paddingHorizontal","inputOffset","mode","length","adornmentStyleAdjustmentForNativeInput","map","isLeftSide","inputModeAdornemntOffset","InputMode","Outlined","ADORNMENT_OFFSET","OUTLINED_INPUT_OFFSET","paddingKey","captalize","affixWidth","padding","offset","isAffix","marginKey","allStyleAdjustmentsMerged","reduce","mergedStyles","currentStyle","text","charAt","toUpperCase","slice","TextInputAdornment","onAffixChange","textStyle","visible","topPosition","isTextInputFocused","forceFocus","inputAdornmentComponent","commonProps","key","testID"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TextInputIcon, { IconAdornment } from './TextInputIcon';\nimport TextInputAffix, { AffixAdornment } from './TextInputAffix';\nimport { ADORNMENT_OFFSET, OUTLINED_INPUT_OFFSET } from '../constants';\nimport type {\n  LayoutChangeEvent,\n  TextStyle,\n  StyleProp,\n  Animated,\n} from 'react-native';\nimport type {\n  AdornmentConfig,\n  AdornmentStyleAdjustmentForNativeInput,\n} from './types';\nimport { AdornmentSide, AdornmentType, InputMode } from './enums';\n\nexport function getAdornmentConfig({\n  left,\n  right,\n}: {\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n}): Array<AdornmentConfig> {\n  let adornmentConfig: any[] = [];\n  if (left || right) {\n    [\n      { side: AdornmentSide.Left, adornment: left },\n      { side: AdornmentSide.Right, adornment: right },\n    ].forEach(({ side, adornment }) => {\n      if (adornment && React.isValidElement(adornment)) {\n        let type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side,\n          type,\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nexport function getAdornmentStyleAdjustmentForNativeInput({\n  adornmentConfig,\n  leftAffixWidth,\n  rightAffixWidth,\n  paddingHorizontal,\n  inputOffset = 0,\n  mode,\n}: {\n  inputOffset?: number;\n  adornmentConfig: AdornmentConfig[];\n  leftAffixWidth: number;\n  rightAffixWidth: number;\n  mode?: 'outlined' | 'flat';\n  paddingHorizontal?: number | string;\n}): AdornmentStyleAdjustmentForNativeInput | {} {\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(\n      ({ type, side }: AdornmentConfig) => {\n        const isLeftSide = side === AdornmentSide.Left;\n        const inputModeAdornemntOffset =\n          mode === InputMode.Outlined\n            ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET\n            : ADORNMENT_OFFSET;\n        const paddingKey = `padding${captalize(side)}`;\n        const affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n        const padding =\n          typeof paddingHorizontal === 'number'\n            ? paddingHorizontal\n            : inputModeAdornemntOffset;\n        const offset = affixWidth + padding;\n\n        const isAffix = type === AdornmentType.Affix;\n        const marginKey = `margin${captalize(side)}`;\n\n        return {\n          [marginKey]: isAffix ? 0 : offset,\n          [paddingKey]: isAffix ? offset : inputOffset,\n        };\n      }\n    );\n    const allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce(\n      (mergedStyles, currentStyle) => {\n        return {\n          ...mergedStyles,\n          ...currentStyle,\n        };\n      },\n      {}\n    );\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = (text: string) =>\n  text.charAt(0).toUpperCase() + text.slice(1);\n\nexport interface TextInputAdornmentProps {\n  forceFocus: () => void;\n  adornmentConfig: AdornmentConfig[];\n  topPosition: {\n    [AdornmentType.Affix]: {\n      [AdornmentSide.Left]: number | null;\n      [AdornmentSide.Right]: number | null;\n    };\n    [AdornmentType.Icon]: number;\n  };\n  onAffixChange: {\n    [AdornmentSide.Left]: (event: LayoutChangeEvent) => void;\n    [AdornmentSide.Right]: (event: LayoutChangeEvent) => void;\n  };\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  textStyle?: StyleProp<TextStyle>;\n  visible?: Animated.Value;\n  isTextInputFocused: boolean;\n  paddingHorizontal?: number | string;\n}\n\nconst TextInputAdornment: React.FunctionComponent<TextInputAdornmentProps> = ({\n  adornmentConfig,\n  left,\n  right,\n  onAffixChange,\n  textStyle,\n  visible,\n  topPosition,\n  isTextInputFocused,\n  forceFocus,\n  paddingHorizontal,\n}) => {\n  if (adornmentConfig.length) {\n    return (\n      <>\n        {adornmentConfig.map(({ type, side }: AdornmentConfig) => {\n          let inputAdornmentComponent;\n          if (side === AdornmentSide.Left) {\n            inputAdornmentComponent = left;\n          } else if (side === AdornmentSide.Right) {\n            inputAdornmentComponent = right;\n          }\n\n          const commonProps = {\n            key: side,\n            side: side,\n            testID: `${side}-${type}-adornment`,\n            isTextInputFocused,\n            paddingHorizontal,\n          };\n          if (type === AdornmentType.Icon) {\n            return (\n              <IconAdornment\n                {...commonProps}\n                icon={inputAdornmentComponent}\n                topPosition={topPosition[AdornmentType.Icon]}\n                forceFocus={forceFocus}\n              />\n            );\n          } else if (type === AdornmentType.Affix) {\n            return (\n              <AffixAdornment\n                {...commonProps}\n                topPosition={topPosition[AdornmentType.Affix][side]}\n                affix={inputAdornmentComponent}\n                textStyle={textStyle}\n                onLayout={onAffixChange[side]}\n                visible={visible}\n              />\n            );\n          } else {\n            return null;\n          }\n        })}\n      </>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;\n"]}