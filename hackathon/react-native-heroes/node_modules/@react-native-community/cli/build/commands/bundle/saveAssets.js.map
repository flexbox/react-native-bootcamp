{"version":3,"sources":["../../../src/commands/bundle/saveAssets.ts"],"names":["saveAssets","assets","platform","assetsDest","logger","warn","Promise","resolve","getAssetDestPath","getAssetDestPathAndroid","getAssetDestPathIOS","filesToCopy","Object","create","forEach","asset","validScales","Set","scales","scale","idx","has","src","files","dest","path","join","copyAll","queue","keys","length","info","reject","copyNext","error","shift","copy","callback","destDir","dirname","err","fs","createReadStream","pipe","createWriteStream","on"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport mkdirp from 'mkdirp';\nimport path from 'path';\nimport fs from 'fs';\n\nimport filterPlatformAssetScales from './filterPlatformAssetScales';\nimport getAssetDestPathAndroid from './getAssetDestPathAndroid';\nimport getAssetDestPathIOS from './getAssetDestPathIOS';\nimport {logger} from '@react-native-community/cli-tools';\nimport {AssetData} from './buildBundle';\n\ninterface CopiedFiles {\n  [src: string]: string;\n}\n\nfunction saveAssets(\n  assets: AssetData[],\n  platform: string,\n  assetsDest: string | undefined,\n) {\n  if (!assetsDest) {\n    logger.warn('Assets destination folder is not set, skipping...');\n    return Promise.resolve();\n  }\n\n  const getAssetDestPath =\n    platform === 'android' ? getAssetDestPathAndroid : getAssetDestPathIOS;\n\n  const filesToCopy: CopiedFiles = Object.create(null); // Map src -> dest\n  assets.forEach((asset) => {\n    const validScales = new Set(\n      filterPlatformAssetScales(platform, asset.scales),\n    );\n    asset.scales.forEach((scale, idx) => {\n      if (!validScales.has(scale)) {\n        return;\n      }\n      const src = asset.files[idx];\n      const dest = path.join(assetsDest, getAssetDestPath(asset, scale));\n      filesToCopy[src] = dest;\n    });\n  });\n\n  return copyAll(filesToCopy);\n}\n\nfunction copyAll(filesToCopy: CopiedFiles) {\n  const queue = Object.keys(filesToCopy);\n  if (queue.length === 0) {\n    return Promise.resolve();\n  }\n\n  logger.info(`Copying ${queue.length} asset files`);\n  return new Promise((resolve, reject) => {\n    const copyNext = (error?: NodeJS.ErrnoException) => {\n      if (error) {\n        reject(error);\n        return;\n      }\n      if (queue.length === 0) {\n        logger.info('Done copying assets');\n        resolve();\n      } else {\n        // queue.length === 0 is checked in previous branch, so this is string\n        const src = queue.shift() as string;\n        const dest = filesToCopy[src];\n        copy(src, dest, copyNext);\n      }\n    };\n    copyNext();\n  });\n}\n\nfunction copy(\n  src: string,\n  dest: string,\n  callback: (error: NodeJS.ErrnoException) => void,\n): void {\n  const destDir = path.dirname(dest);\n  mkdirp(destDir, (err?: NodeJS.ErrnoException) => {\n    if (err) {\n      callback(err);\n      return;\n    }\n    fs.createReadStream(src)\n      .pipe(fs.createWriteStream(dest))\n      .on('finish', callback);\n  });\n}\n\nexport default saveAssets;\n"]}