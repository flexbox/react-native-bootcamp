{"version":3,"sources":["../../../../src/commands/doctor/healthchecks/androidSDK.ts"],"names":["getBuildToolsVersion","projectRoot","logger","log","warn","gradleBuildFilePath","path","join","buildToolsVersionEntry","fs","existsSync","gradleBuildFile","readFileSync","buildToolsVersionIndex","indexOf","buildToolsVersion","substring","split","match","installMessage","chalk","dim","isSDKInstalled","environmentInfo","version","SDKs","label","description","getDiagnostics","requiredVersion","buildTools","isAndroidSDKInstalled","Array","isArray","isRequiredVersionInstalled","includes","versions","versionRange","needsToBeFixed","win32AutomaticFix","loader","cliToolsUrl","systemImage","componentsToInstall","androidSDKRoot","fail","downloadUrl","component","installPath","text","e","hypervisor","installed","succeed","runAutomaticFix","logManualInstallation","message","healthcheck","url"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport fs from 'fs';\nimport path from 'path';\nimport {logger} from '@react-native-community/cli-tools';\n\nimport {\n  HealthCheckInterface,\n  EnvironmentInfo,\n} from '@react-native-community/cli-types';\nimport findProjectRoot from '../../../tools/config/findProjectRoot';\nimport {\n  getAndroidSdkRootInstallation,\n  installComponent,\n  getBestHypervisor,\n  enableAMDH,\n  enableHAXM,\n  enableWHPX,\n  createAVD,\n} from '../../../tools/windows/androidWinHelpers';\nimport {downloadAndUnzip} from '../../../tools/downloadAndUnzip';\n\nimport {\n  setEnvironment,\n  updateEnvironment,\n} from '../../../tools/windows/environmentVariables';\n\nconst getBuildToolsVersion = (): string => {\n  let projectRoot = '';\n  try {\n    // doctor is a detached command, so we may not be in a RN project.\n    projectRoot = findProjectRoot();\n  } catch {\n    logger.log(); // for extra space\n    logger.warn(\n      \"We couldn't find a package.json in this directory. Android SDK checks may fail. Doctor works best in a React Native project root.\",\n    );\n  }\n  const gradleBuildFilePath = path.join(projectRoot, 'android/build.gradle');\n\n  const buildToolsVersionEntry = 'buildToolsVersion';\n\n  if (!fs.existsSync(gradleBuildFilePath)) {\n    return 'Not Found';\n  }\n\n  // Read the content of the `build.gradle` file\n  const gradleBuildFile = fs.readFileSync(gradleBuildFilePath, 'utf-8');\n\n  const buildToolsVersionIndex = gradleBuildFile.indexOf(\n    buildToolsVersionEntry,\n  );\n\n  const buildToolsVersion = (\n    gradleBuildFile\n      // Get only the portion of the declaration of `buildToolsVersion`\n      .substring(buildToolsVersionIndex)\n      .split('\\n')[0]\n      // Get only the the value of `buildToolsVersion`\n      .match(/\\d|\\../g) || []\n  ).join('');\n\n  return buildToolsVersion || 'Not Found';\n};\n\nconst installMessage = `Read more about how to update Android SDK at ${chalk.dim(\n  'https://developer.android.com/studio',\n)}`;\n\nconst isSDKInstalled = (environmentInfo: EnvironmentInfo) => {\n  const version = environmentInfo.SDKs['Android SDK'];\n  return version !== 'Not Found';\n};\n\nexport default {\n  label: 'Android SDK',\n  description: 'Required for building and installing your app on Android',\n  getDiagnostics: async ({SDKs}) => {\n    const requiredVersion = getBuildToolsVersion();\n    const buildTools =\n      typeof SDKs['Android SDK'] === 'string'\n        ? SDKs['Android SDK']\n        : SDKs['Android SDK']['Build Tools'];\n\n    const isAndroidSDKInstalled = Array.isArray(buildTools);\n\n    const isRequiredVersionInstalled = isAndroidSDKInstalled\n      ? buildTools.includes(requiredVersion)\n      : false;\n\n    return {\n      versions: isAndroidSDKInstalled ? buildTools : SDKs['Android SDK'],\n      versionRange: requiredVersion,\n      needsToBeFixed: !isRequiredVersionInstalled,\n    };\n  },\n  win32AutomaticFix: async ({loader}) => {\n    // Need a GitHub action to update automatically. See #1180\n    const cliToolsUrl =\n      'https://dl.google.com/android/repository/commandlinetools-win-6200805_latest.zip';\n\n    const systemImage = 'system-images;android-28;google_apis;x86_64';\n    // Installing 29 as well so Android Studio does not complain on first boot\n    const componentsToInstall = [\n      'platform-tools',\n      'build-tools;29.0.3',\n      'platforms;android-29',\n      // Is 28 still needed?\n      'build-tools;28.0.3',\n      'platforms;android-28',\n      'emulator',\n      systemImage,\n      '--licenses', // Accept any pending licenses at the end\n    ];\n\n    const androidSDKRoot = getAndroidSdkRootInstallation();\n\n    if (androidSDKRoot === '') {\n      loader.fail('There was an error finding the Android SDK root');\n\n      return;\n    }\n\n    await downloadAndUnzip({\n      loader,\n      downloadUrl: cliToolsUrl,\n      component: 'Android Command Line Tools',\n      installPath: androidSDKRoot,\n    });\n\n    for (const component of componentsToInstall) {\n      loader.text = `Installing \"${component}\" (this may take a few minutes)`;\n\n      try {\n        await installComponent(component, androidSDKRoot);\n      } catch (e) {\n        // Is there a way to persist a line in loader and continue the execution?\n      }\n    }\n\n    loader.text = 'Updating environment variables';\n\n    // Required for the emulator to work from the CLI\n    await setEnvironment('ANDROID_SDK_ROOT', androidSDKRoot);\n    await setEnvironment('ANDROID_HOME', androidSDKRoot);\n    await updateEnvironment('PATH', path.join(androidSDKRoot, 'tools'));\n    await updateEnvironment(\n      'PATH',\n      path.join(androidSDKRoot, 'platform-tools'),\n    );\n\n    loader.text =\n      'Configuring Hypervisor for faster emulation, this might prompt UAC';\n\n    const {hypervisor, installed} = await getBestHypervisor(androidSDKRoot);\n\n    if (!installed) {\n      if (hypervisor === 'none') {\n        loader.warn(\n          'Android SDK configured but virtualization could not be enabled.',\n        );\n        return;\n      }\n\n      if (hypervisor === 'AMDH') {\n        await enableAMDH(androidSDKRoot);\n      } else if (hypervisor === 'HAXM') {\n        await enableHAXM(androidSDKRoot);\n      } else if (hypervisor === 'WHPX') {\n        await enableWHPX();\n      }\n    }\n\n    loader.text = 'Creating AVD';\n    await createAVD(androidSDKRoot, 'pixel_9.0', 'pixel', systemImage);\n\n    loader.succeed(\n      'Android SDK configured. You might need to restart your PC for all changes to take effect.',\n    );\n  },\n  runAutomaticFix: async ({loader, logManualInstallation, environmentInfo}) => {\n    loader.fail();\n\n    if (isSDKInstalled(environmentInfo)) {\n      return logManualInstallation({\n        message: installMessage,\n      });\n    }\n\n    return logManualInstallation({\n      healthcheck: 'Android SDK',\n      url: 'https://reactnative.dev/docs/getting-started',\n    });\n  },\n} as HealthCheckInterface;\n"]}