{"version":3,"sources":["../../../../src/commands/doctor/healthchecks/packageManagers.ts"],"names":["packageManager","fs","existsSync","PACKAGE_MANAGERS","YARN","NPM","undefined","yarn","label","getDiagnostics","Binaries","needsToBeFixed","version","Yarn","versionRange","versionRanges","visible","runAutomaticFix","loader","pkg","url","npm"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;;AACA;;AAIA;;;;AAGA,MAAMA,cAAc,GAAG,CAAC,MAAM;AAC5B,MAAIC,cAAGC,UAAH,CAAc,WAAd,CAAJ,EAAgC;AAC9B,WAAOC,oCAAiBC,IAAxB;AACD;;AAED,MAAIH,cAAGC,UAAH,CAAc,mBAAd,CAAJ,EAAwC;AACtC,WAAOC,oCAAiBE,GAAxB;AACD;;AAED,SAAOC,SAAP;AACD,CAVsB,GAAvB;;;AAYA,MAAMC,IAA0B,GAAG;AACjCC,EAAAA,KAAK,EAAE,MAD0B;AAEjCC,EAAAA,cAAc,EAAE,OAAO;AAACC,IAAAA;AAAD,GAAP,MAAuB;AACrCC,IAAAA,cAAc,EAAE,kDAA0B;AACxCC,MAAAA,OAAO,EAAEF,QAAQ,CAACG,IAAT,CAAcD,OADiB;AAExCE,MAAAA,YAAY,EAAEC,uBAAcX;AAFY,KAA1B,CADqB;AAKrCQ,IAAAA,OAAO,EAAEF,QAAQ,CAACG,IAAT,CAAcD,OALc;AAMrCE,IAAAA,YAAY,EAAEC,uBAAcX;AANS,GAAvB,CAFiB;AAUjC;AACA;AACAY,EAAAA,OAAO,EACLhB,cAAc,KAAKG,oCAAiBC,IAApC,IAA4CJ,cAAc,KAAKM,SAbhC;AAcjCW,EAAAA,eAAe,EAAE,OAAO;AAACC,IAAAA;AAAD,GAAP,KACf,MAAM,sBAAQ;AACZC,IAAAA,GAAG,EAAE,MADO;AAEZX,IAAAA,KAAK,EAAE,MAFK;AAGZY,IAAAA,GAAG,EAAE,kCAHO;AAIZF,IAAAA;AAJY,GAAR;AAfyB,CAAnC;;AAuBA,MAAMG,GAAyB,GAAG;AAChCb,EAAAA,KAAK,EAAE,KADyB;AAEhCC,EAAAA,cAAc,EAAE,OAAO;AAACC,IAAAA;AAAD,GAAP,MAAuB;AACrCC,IAAAA,cAAc,EAAE,kDAA0B;AACxCC,MAAAA,OAAO,EAAEF,QAAQ,CAACW,GAAT,CAAaT,OADkB;AAExCE,MAAAA,YAAY,EAAEC,uBAAcV;AAFY,KAA1B,CADqB;AAKrCO,IAAAA,OAAO,EAAEF,QAAQ,CAACW,GAAT,CAAaT,OALe;AAMrCE,IAAAA,YAAY,EAAEC,uBAAcV;AANS,GAAvB,CAFgB;AAUhC;AACA;AACAW,EAAAA,OAAO,EACLhB,cAAc,KAAKG,oCAAiBE,GAApC,IAA2CL,cAAc,KAAKM,SAbhC;AAchCW,EAAAA,eAAe,EAAE,OAAO;AAACC,IAAAA;AAAD,GAAP,KACf,MAAM,sBAAQ;AACZC,IAAAA,GAAG,EAAE,MADO;AAEZX,IAAAA,KAAK,EAAE,MAFK;AAGZY,IAAAA,GAAG,EAAE,qBAHO;AAIZF,IAAAA;AAJY,GAAR;AAfwB,CAAlC","sourcesContent":["import fs from 'fs';\nimport versionRanges from '../versionRanges';\nimport {\n  PACKAGE_MANAGERS,\n  doesSoftwareNeedToBeFixed,\n} from '../checkInstallation';\nimport {install} from '../../../tools/install';\nimport {HealthCheckInterface} from '@react-native-community/cli-types';\n\nconst packageManager = (() => {\n  if (fs.existsSync('yarn.lock')) {\n    return PACKAGE_MANAGERS.YARN;\n  }\n\n  if (fs.existsSync('package-lock.json')) {\n    return PACKAGE_MANAGERS.NPM;\n  }\n\n  return undefined;\n})();\n\nconst yarn: HealthCheckInterface = {\n  label: 'yarn',\n  getDiagnostics: async ({Binaries}) => ({\n    needsToBeFixed: doesSoftwareNeedToBeFixed({\n      version: Binaries.Yarn.version,\n      versionRange: versionRanges.YARN,\n    }),\n    version: Binaries.Yarn.version,\n    versionRange: versionRanges.YARN,\n  }),\n  // Only show `yarn` if there's a `yarn.lock` file in the current directory\n  // or if we can't identify that the user uses yarn or npm\n  visible:\n    packageManager === PACKAGE_MANAGERS.YARN || packageManager === undefined,\n  runAutomaticFix: async ({loader}) =>\n    await install({\n      pkg: 'yarn',\n      label: 'yarn',\n      url: 'https://yarnpkg.com/docs/install',\n      loader,\n    }),\n};\n\nconst npm: HealthCheckInterface = {\n  label: 'npm',\n  getDiagnostics: async ({Binaries}) => ({\n    needsToBeFixed: doesSoftwareNeedToBeFixed({\n      version: Binaries.npm.version,\n      versionRange: versionRanges.NPM,\n    }),\n    version: Binaries.npm.version,\n    versionRange: versionRanges.NPM,\n  }),\n  // Only show `yarn` if there's a `package-lock.json` file in the current directory\n  // or if we can't identify that the user uses yarn or npm\n  visible:\n    packageManager === PACKAGE_MANAGERS.NPM || packageManager === undefined,\n  runAutomaticFix: async ({loader}) =>\n    await install({\n      pkg: 'node',\n      label: 'node',\n      url: 'https://nodejs.org/',\n      loader,\n    }),\n};\n\nexport {packageManager, yarn, npm};\n"]}