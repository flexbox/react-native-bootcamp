{"version":3,"sources":["../../src/tools/brewInstall.ts"],"names":["brewInstall","pkg","label","loader","onSuccess","onFail","start","succeed","error","healthcheck","command"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;;;;AAUA,eAAeA,WAAf,CAA2B;AACzBC,EAAAA,GADyB;AAEzBC,EAAAA,KAFyB;AAGzBC,EAAAA,MAHyB;AAIzBC,EAAAA,SAJyB;AAKzBC,EAAAA;AALyB,CAA3B,EAMgB;AACdF,EAAAA,MAAM,CAACG,KAAP,CAAaJ,KAAb;;AAEA,MAAI;AACF,UAAM,sBAAM,MAAN,EAAc,CAAC,SAAD,EAAYD,GAAZ,CAAd,CAAN;;AAEA,QAAI,OAAOG,SAAP,KAAqB,UAAzB,EAAqC;AACnC,aAAOA,SAAS,EAAhB;AACD;;AAED,WAAOD,MAAM,CAACI,OAAP,EAAP;AACD,GARD,CAQE,OAAOC,KAAP,EAAc;AACd,QAAI,OAAOH,MAAP,KAAkB,UAAtB,EAAkC;AAChC,aAAOA,MAAM,EAAb;AACD;;AAED,0BAAS;AACPI,MAAAA,WAAW,EAAEP,KAAK,IAAID,GADf;AAEPE,MAAAA,MAFO;AAGPK,MAAAA,KAHO;AAIPE,MAAAA,OAAO,EAAG,gBAAeT,GAAI;AAJtB,KAAT;AAMD;AACF","sourcesContent":["import execa from 'execa';\nimport ora from 'ora';\nimport {logError} from '../commands/doctor/healthchecks/common';\n\ntype InstallArgs = {\n  pkg: string;\n  label?: string;\n  loader: ora.Ora;\n  onSuccess?: () => void;\n  onFail?: () => void;\n};\n\nasync function brewInstall({\n  pkg,\n  label,\n  loader,\n  onSuccess,\n  onFail,\n}: InstallArgs) {\n  loader.start(label);\n\n  try {\n    await execa('brew', ['install', pkg]);\n\n    if (typeof onSuccess === 'function') {\n      return onSuccess();\n    }\n\n    return loader.succeed();\n  } catch (error) {\n    if (typeof onFail === 'function') {\n      return onFail();\n    }\n\n    logError({\n      healthcheck: label || pkg,\n      loader,\n      error,\n      command: `brew install ${pkg}`,\n    });\n  }\n}\n\nexport {brewInstall};\n"]}