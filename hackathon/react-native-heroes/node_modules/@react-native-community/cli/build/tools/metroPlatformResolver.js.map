{"version":3,"sources":["../../src/tools/metroPlatformResolver.ts"],"names":["reactNativePlatformResolver","platformImplementations","context","_realModuleName","platform","moduleName","backupResolveRequest","resolveRequest","modifiedModuleName","startsWith","slice","length","result","e"],"mappings":";;;;;;;AAeA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAfA;;;;;;;;;;;;;;AAcA;AAGO,SAASA,2BAAT,CAAqCC,uBAArC,EAEJ;AACD,SAAO,CACLC,OADK,EAELC,eAFK,EAGLC,QAHK,EAILC,UAJK,KAKF;AACH,QAAIC,oBAAoB,GAAGJ,OAAO,CAACK,cAAnC;AACA,WAAOL,OAAO,CAACK,cAAf;;AAEA,QAAI;AACF,UAAIC,kBAAkB,GAAGH,UAAzB;;AACA,UAAIJ,uBAAuB,CAACG,QAAD,CAA3B,EAAuC;AACrC,YAAIC,UAAU,KAAK,cAAnB,EAAmC;AACjCG,UAAAA,kBAAkB,GAAGP,uBAAuB,CAACG,QAAD,CAA5C;AACD,SAFD,MAEO,IAAIC,UAAU,CAACI,UAAX,CAAsB,eAAtB,CAAJ,EAA4C;AACjDD,UAAAA,kBAAkB,GAAI,GACpBP,uBAAuB,CAACG,QAAD,CACxB,IAAGI,kBAAkB,CAACE,KAAnB,CAAyB,gBAAgBC,MAAzC,CAAiD,EAFrD;AAGD;AACF;;AACD,UAAIC,MAAM,GAAG,8BAAQV,OAAR,EAAiBM,kBAAjB,EAAqCJ,QAArC,CAAb;AACA,aAAOQ,MAAP;AACD,KAbD,CAaE,OAAOC,CAAP,EAAU;AACV,YAAMA,CAAN;AACD,KAfD,SAeU;AACRX,MAAAA,OAAO,CAACK,cAAR,GAAyBD,oBAAzB;AACD;AACF,GA3BD;AA4BD","sourcesContent":["/**\n * This is an implementation of a metro resolveRequest option which will remap react-native imports\n * to different npm packages based on the platform requested.  This allows a single metro instance/config\n * to produce bundles for multiple out of tree platforms at a time.\n *\n * @param platformImplementations\n * A map of platform to npm package that implements that platform\n *\n * Ex:\n * {\n *    windows: 'react-native-windows'\n *    macos: 'react-native-macos'\n * }\n */\n// @ts-ignore - no typed definition for the package\nimport {resolve} from 'metro-resolver';\n\nexport function reactNativePlatformResolver(platformImplementations: {\n  [platform: string]: string;\n}) {\n  return (\n    context: any,\n    _realModuleName: string,\n    platform: string,\n    moduleName: string,\n  ) => {\n    let backupResolveRequest = context.resolveRequest;\n    delete context.resolveRequest;\n\n    try {\n      let modifiedModuleName = moduleName;\n      if (platformImplementations[platform]) {\n        if (moduleName === 'react-native') {\n          modifiedModuleName = platformImplementations[platform];\n        } else if (moduleName.startsWith('react-native/')) {\n          modifiedModuleName = `${\n            platformImplementations[platform]\n          }/${modifiedModuleName.slice('react-native/'.length)}`;\n        }\n      }\n      let result = resolve(context, modifiedModuleName, platform);\n      return result;\n    } catch (e) {\n      throw e;\n    } finally {\n      context.resolveRequest = backupResolveRequest;\n    }\n  };\n}\n"]}