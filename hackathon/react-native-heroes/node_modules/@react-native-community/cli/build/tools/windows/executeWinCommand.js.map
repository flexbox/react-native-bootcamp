{"version":3,"sources":["../../../src/tools/windows/executeWinCommand.ts"],"names":["runElevated","command","script","elevatedPath","Math","random","groupArgs","args","isStringArgument","newArgs","reduce","acum","current","last","length","endsWith","startsWith","push","replace","executeShellCommand","elevated","split","program","shift","shell"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA;AACA,MAAMA,WAAW,GAAIC,OAAD,IAAqB;AACvC;AACA;;AACA;;;;AAKA;AACA,QAAMC,MAAM,GACb;;;;;;;;gBAQeD,OAAQ;;OATtB;AAaA,QAAME,YAAY,GAAG,kBAAK,mBAAL,EAAgB,YAAWC,IAAI,CAACC,MAAL,EAAc,MAAzC,CAArB;AAEA,2BAAcF,YAAd,EAA4BD,MAA5B,EAAoC,OAApC;AAEA,SAAO,sBAAMC,YAAN,CAAP;AACD,CA3BD;AA6BA;;;;;;;;;;;;AAUA,MAAMG,SAAS,GAAIC,IAAD,IAAoB;AACpC,MAAIC,gBAAgB,GAAG,KAAvB;AACA,QAAMC,OAAO,GAAGF,IAAI,CAACG,MAAL,CAAY,CAACC,IAAD,EAAiBC,OAAjB,KAA6B;AACvD,QAAIJ,gBAAJ,EAAsB;AACpB,YAAMK,IAAI,GAAGF,IAAI,CAACA,IAAI,CAACG,MAAL,GAAc,CAAf,CAAjB;AAEAH,MAAAA,IAAI,CAACA,IAAI,CAACG,MAAL,GAAc,CAAf,CAAJ,GAAyB,GAAED,IAAK,IAAGD,OAAQ,EAA3C;;AAEA,UAAIA,OAAO,CAACG,QAAR,CAAiB,GAAjB,CAAJ,EAA2B;AACzBP,QAAAA,gBAAgB,GAAG,KAAnB;AACD;;AAED,aAAOG,IAAP;AACD;;AAED,QAAIC,OAAO,CAACI,UAAR,CAAmB,GAAnB,CAAJ,EAA6B;AAC3B;;;AAGA,UAAI,CAACJ,OAAO,CAACG,QAAR,CAAiB,GAAjB,CAAL,EAA4B;AAC1BP,QAAAA,gBAAgB,GAAG,IAAnB;AAEAG,QAAAA,IAAI,CAACM,IAAL,CAAUL,OAAV;AAEA,eAAOD,IAAP;AACD;AAED;;;;;;AAIAA,MAAAA,IAAI,CAACM,IAAL,CAAUL,OAAO,CAACM,OAAR,CAAgB,IAAhB,EAAsB,EAAtB,CAAV;AAEA,aAAOP,IAAP;AACD;;AAEDA,IAAAA,IAAI,CAACM,IAAL,CAAUL,OAAV;AAEA,WAAOD,IAAP;AACD,GArCe,EAqCb,EArCa,CAAhB;AAuCA,SAAOF,OAAP;AACD,CA1CD;AA4CA;;;;;;AAIA,MAAMU,mBAAmB,GAAG,CAAClB,OAAD,EAAkBmB,QAAQ,GAAG,KAA7B,KAAuC;AACjE,QAAMb,IAAI,GAAGD,SAAS,CAACL,OAAO,CAACoB,KAAR,CAAc,GAAd,CAAD,CAAtB;AACA,QAAMC,OAAO,GAAGf,IAAI,CAACgB,KAAL,EAAhB;;AAEA,MAAIH,QAAJ,EAAc;AACZ,WAAOpB,WAAW,CAACC,OAAD,CAAlB;AACD;;AAED,SAAO,sBAAMqB,OAAN,EAAef,IAAf,EAAqB;AAACiB,IAAAA,KAAK,EAAE;AAAR,GAArB,CAAP;AACD,CATD","sourcesContent":["import {writeFileSync} from 'fs';\nimport {tmpdir} from 'os';\nimport {join} from 'path';\n\nimport execa from 'execa';\n\n/** Runs a command requestion permission to run elevated. */\nconst runElevated = (command: string) => {\n  // TODO: escape double quotes in args\n  // https://www.winhelponline.com/blog/vbscripts-and-uac-elevation/\n  /**\n   * Need to use a couple of intermediary files to make this work as\n   * `ShellExecute` only accepts a command so\n   */\n\n  // prettier-ignore\n  const script =\n`If WScript.Arguments.length = 0 Then\n  Set objShell = CreateObject(\"Shell.Application\")\n  'Pass a bogus argument, say [ uac]\n  objShell.ShellExecute \"wscript.exe\", Chr(34) & _\n    WScript.ScriptFullName & Chr(34) & \" uac\", \"\", \"runas\", 1\nElse\n  Dim oShell\n  Set oShell = WScript.CreateObject (\"WSCript.shell\")\n  oShell.run \"${command}\"\n  Set oShell = Nothing\nEnd If`;\n\n  const elevatedPath = join(tmpdir(), `elevated-${Math.random()}.vbs`);\n\n  writeFileSync(elevatedPath, script, 'utf-8');\n\n  return execa(elevatedPath);\n};\n\n/**\n * Groups all string arguments into a single one. E.g.:\n * ```js\n * ['-m', '\"Upgrade:', 'to', 'latest', 'version\"'] --> ['-m', '\"Upgrade: to latest version\"']`\n * ```\n * @param args The arguments\n * Â© webhint project\n * (https://github.com/webhintio/hint/blob/30b8ba74f122d8b66fc5596d788dd1c7738f2d83/release/lib/utils.ts#L82)\n * License: Apache-2\n */\nconst groupArgs = (args: string[]) => {\n  let isStringArgument = false;\n  const newArgs = args.reduce((acum: string[], current) => {\n    if (isStringArgument) {\n      const last = acum[acum.length - 1];\n\n      acum[acum.length - 1] = `${last} ${current}`;\n\n      if (current.endsWith('\"')) {\n        isStringArgument = false;\n      }\n\n      return acum;\n    }\n\n    if (current.startsWith('\"')) {\n      /**\n       * Argument is split. I.e.: `['\"part1', 'part2\"'];`\n       */\n      if (!current.endsWith('\"')) {\n        isStringArgument = true;\n\n        acum.push(current);\n\n        return acum;\n      }\n\n      /**\n       * Argument is surrounded by \"\" that need to be removed.\n       * We just remove all the quotes because we don't escape any in our commands\n       */\n      acum.push(current.replace(/\"/g, ''));\n\n      return acum;\n    }\n\n    acum.push(current);\n\n    return acum;\n  }, []);\n\n  return newArgs;\n};\n\n/**\n * Executes the given `command` on a shell taking care of slicing the parameters\n * if needed.\n */\nconst executeShellCommand = (command: string, elevated = false) => {\n  const args = groupArgs(command.split(' '));\n  const program = args.shift()!;\n\n  if (elevated) {\n    return runElevated(command);\n  }\n\n  return execa(program, args, {shell: true});\n};\n\nexport {executeShellCommand as executeCommand};\n"]}