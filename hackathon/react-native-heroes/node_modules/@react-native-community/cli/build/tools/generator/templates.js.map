{"version":3,"sources":["../../../src/tools/generator/templates.ts"],"names":["createProjectFromTemplate","destPath","newProjectName","template","templatePath","path","dirname","require","resolve","undefined","createFromRemoteTemplate","installPackage","templateName","includes","substr","lastIndexOf","logger","info","PackageManager","install","root","ignorePaths","installTemplateDependencies","installTemplateDevDependencies","uninstall","err","warn","dependenciesJsonPath","fs","existsSync","dependencies","Error","message","dependenciesToInstall","Object","keys","map","depName","cwd","stdio","devDependenciesJsonPath","installDev"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {execSync} from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\nimport copyProjectTemplateAndReplace from './copyProjectTemplateAndReplace';\nimport {logger} from '@react-native-community/cli-tools';\nimport * as PackageManager from '../packageManager';\n\n/**\n * @param destPath Create the new project at this path.\n * @param newProjectName For example 'AwesomeApp'.\n * @param template Template to use, for example 'navigation'.\n */\nasync function createProjectFromTemplate(\n  destPath: string,\n  newProjectName: string,\n  template: string,\n) {\n  const templatePath = path.dirname(require.resolve('react-native/template'));\n  copyProjectTemplateAndReplace(templatePath, destPath, newProjectName);\n\n  if (template === undefined) {\n    // No specific template, use just the react-native template above\n    return;\n  }\n\n  // Keep the files from the react-native template, and overwrite some of them\n  // with the specified project template.\n  // The react-native template contains the native files (these are used by\n  // all templates) and every other template only contains additional JS code.\n  // Reason:\n  // This way we don't have to duplicate the native files in every template.\n  // If we duplicated them we'd make RN larger and risk that people would\n  // forget to maintain all the copies so they would go out of sync.\n  await createFromRemoteTemplate(template, destPath, newProjectName);\n}\n\n/**\n * The following formats are supported for the template:\n * - 'demo' -> Fetch the package react-native-template-demo from npm\n * - git://..., http://..., file://... or any other URL supported by npm\n */\nasync function createFromRemoteTemplate(\n  template: string,\n  destPath: string,\n  newProjectName: string,\n) {\n  let installPackage;\n  let templateName;\n  if (template.includes(':/')) {\n    // URL, e.g. git://, file://, file:/\n    installPackage = template;\n    templateName = template.substr(template.lastIndexOf('/') + 1);\n  } else {\n    // e.g 'demo'\n    installPackage = `react-native-template-${template}`;\n    templateName = installPackage;\n  }\n\n  // Check if the template exists\n  logger.info(`Fetching template ${installPackage}...`);\n  try {\n    await PackageManager.install([installPackage], {root: destPath});\n    const templatePath = path.resolve('node_modules', templateName);\n    copyProjectTemplateAndReplace(templatePath, destPath, newProjectName, {\n      // Every template contains a dummy package.json file included\n      // only for publishing the template to npm.\n      // We want to ignore this dummy file, otherwise it would overwrite\n      // our project's package.json file.\n      ignorePaths: [\n        'package.json',\n        'dependencies.json',\n        'devDependencies.json',\n      ],\n    });\n    await installTemplateDependencies(templatePath, destPath);\n    await installTemplateDevDependencies(templatePath, destPath);\n  } finally {\n    // Clean up the temp files\n    try {\n      await PackageManager.uninstall([templateName], {root: destPath});\n    } catch (err) {\n      // Not critical but we still want people to know and report\n      // if this the clean up fails.\n      logger.warn(\n        `Failed to clean up template temp files in node_modules/${templateName}. ` +\n          'This is not a critical error, you can work on your app.',\n      );\n    }\n  }\n}\n\nasync function installTemplateDependencies(templatePath: string, root: string) {\n  // dependencies.json is a special file that lists additional dependencies\n  // that are required by this template\n  const dependenciesJsonPath = path.resolve(templatePath, 'dependencies.json');\n  logger.info('Adding dependencies for the project...');\n  if (!fs.existsSync(dependenciesJsonPath)) {\n    logger.info('No additional dependencies.');\n    return;\n  }\n\n  let dependencies: any;\n  try {\n    dependencies = require(dependenciesJsonPath);\n  } catch (err) {\n    throw new Error(\n      `Could not parse the template's dependencies.json: ${err.message}`,\n    );\n  }\n  const dependenciesToInstall = Object.keys(dependencies).map(\n    (depName) => `${depName}@${dependencies[depName]}`,\n  );\n  await PackageManager.install(dependenciesToInstall, {root});\n  logger.info(\"Linking native dependencies into the project's build files...\");\n  execSync('react-native link', {cwd: root, stdio: 'inherit'});\n}\n\nasync function installTemplateDevDependencies(\n  templatePath: string,\n  root: string,\n) {\n  // devDependencies.json is a special file that lists additional develop dependencies\n  // that are required by this template\n  const devDependenciesJsonPath = path.resolve(\n    templatePath,\n    'devDependencies.json',\n  );\n  logger.info('Adding develop dependencies for the project...');\n  if (!fs.existsSync(devDependenciesJsonPath)) {\n    logger.info('No additional develop dependencies.');\n    return;\n  }\n\n  let dependencies: any;\n  try {\n    dependencies = require(devDependenciesJsonPath);\n  } catch (err) {\n    throw new Error(\n      `Could not parse the template's devDependencies.json: ${err.message}`,\n    );\n  }\n\n  const dependenciesToInstall = Object.keys(dependencies).map(\n    (depName) => `${depName}@${dependencies[depName]}`,\n  );\n  await PackageManager.installDev(dependenciesToInstall, {root});\n}\n\nexport {createProjectFromTemplate};\n"]}