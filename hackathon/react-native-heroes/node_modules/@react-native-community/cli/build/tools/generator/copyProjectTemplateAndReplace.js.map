{"version":3,"sources":["../../../src/tools/generator/copyProjectTemplateAndReplace.ts"],"names":["prompt","copyProjectTemplateAndReplace","srcPath","destPath","newProjectName","options","Error","forEach","absoluteSrcFilePath","upgrade","fileName","path","basename","relativeFilePath","translateFilePath","relative","replace","toLowerCase","ignorePaths","Array","isArray","some","ignorePath","contentChangedCallback","force","_destPath","contentChanged","upgradeFileContentChangedCallback","resolve","displayName","HelloWorld","helloworld","filePath","relativeDestPath","logger","info","chalk","bold","answer"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport chalk from 'chalk';\nimport path from 'path';\nimport copyAndReplace from '../copyAndReplace';\nimport promptInitializer from './promptSync';\nimport walk from '../walk';\nimport {logger} from '@react-native-community/cli-tools';\n\nconst prompt = promptInitializer();\n\ntype ContentChangedCallbackOption = 'identical' | 'changed' | 'new' | null;\n\ntype Options = {\n  upgrade?: boolean;\n  force?: boolean;\n  displayName?: string;\n  ignorePaths?: string[];\n};\n\n/**\n * Util for creating a new React Native project.\n * Copy the project from a template and use the correct project name in\n * all files.\n * @param srcPath e.g. '/Users/martin/AwesomeApp/node_modules/react-native/template'\n * @param destPath e.g. '/Users/martin/AwesomeApp'\n * @param newProjectName e.g. 'AwesomeApp'\n * @param options e.g. {\n *          upgrade: true,\n *          force: false,\n *          displayName: 'Hello World',\n *          ignorePaths: ['template/file/to/ignore.md'],\n *        }\n */\nfunction copyProjectTemplateAndReplace(\n  srcPath: string,\n  destPath: string,\n  newProjectName: string,\n  options: Options = {},\n) {\n  if (!srcPath) {\n    throw new Error('Need a path to copy from');\n  }\n  if (!destPath) {\n    throw new Error('Need a path to copy to');\n  }\n  if (!newProjectName) {\n    throw new Error('Need a project name');\n  }\n\n  walk(srcPath).forEach((absoluteSrcFilePath: string) => {\n    // 'react-native upgrade'\n    if (options.upgrade) {\n      // Don't upgrade these files\n      const fileName = path.basename(absoluteSrcFilePath);\n      // This also includes __tests__/index.*.js\n      if (fileName === 'index.ios.js') {\n        return;\n      }\n      if (fileName === 'index.android.js') {\n        return;\n      }\n      if (fileName === 'index.js') {\n        return;\n      }\n      if (fileName === 'App.js') {\n        return;\n      }\n    }\n\n    const relativeFilePath = translateFilePath(\n      path.relative(srcPath, absoluteSrcFilePath),\n    )\n      .replace(/HelloWorld/g, newProjectName)\n      .replace(/helloworld/g, newProjectName.toLowerCase());\n\n    // Templates may contain files that we don't want to copy.\n    // Examples:\n    // - Dummy package.json file included in the template only for publishing to npm\n    // - Docs specific to the template (.md files)\n    if (options.ignorePaths) {\n      if (!Array.isArray(options.ignorePaths)) {\n        throw new Error('options.ignorePaths must be an array');\n      }\n      if (\n        options.ignorePaths.some(\n          (ignorePath) => ignorePath === relativeFilePath,\n        )\n      ) {\n        // Skip copying this file\n        return;\n      }\n    }\n\n    let contentChangedCallback = null;\n    if (options.upgrade && !options.force) {\n      contentChangedCallback = (\n        _destPath: string,\n        contentChanged: ContentChangedCallbackOption,\n      ) =>\n        upgradeFileContentChangedCallback(\n          absoluteSrcFilePath,\n          relativeFilePath,\n          contentChanged,\n        );\n    }\n    copyAndReplace(\n      absoluteSrcFilePath,\n      path.resolve(destPath, relativeFilePath),\n      {\n        'Hello App Display Name': options.displayName || newProjectName,\n        HelloWorld: newProjectName,\n        helloworld: newProjectName.toLowerCase(),\n      },\n      contentChangedCallback,\n    );\n  });\n}\n\n/**\n * There are various files in the templates folder in the RN repo. We want\n * these to be ignored by tools when working with React Native itself.\n * Example: _babelrc file is ignored by Babel, renamed to .babelrc inside\n *          a real app folder.\n * This is especially important for .gitignore because npm has some special\n * behavior of automatically renaming .gitignore to .npmignore.\n */\nfunction translateFilePath(filePath: string) {\n  if (!filePath) {\n    return filePath;\n  }\n  return filePath\n    .replace('_BUCK', 'BUCK')\n    .replace('_gitignore', '.gitignore')\n    .replace('_gitattributes', '.gitattributes')\n    .replace('_babelrc', '.babelrc')\n    .replace('_editorconfig', '.editorconfig')\n    .replace('_eslintrc.js', '.eslintrc.js')\n    .replace('_flowconfig', '.flowconfig')\n    .replace('_buckconfig', '.buckconfig')\n    .replace('_prettierrc.js', '.prettierrc.js')\n    .replace('_watchmanconfig', '.watchmanconfig');\n}\n\nfunction upgradeFileContentChangedCallback(\n  absoluteSrcFilePath: string,\n  relativeDestPath: string,\n  contentChanged: ContentChangedCallbackOption,\n) {\n  if (contentChanged === 'new') {\n    logger.info(`${chalk.bold('new')} ${relativeDestPath}`);\n    return 'overwrite';\n  }\n  if (contentChanged === 'changed') {\n    logger.info(\n      `${chalk.bold(relativeDestPath)} ` +\n        `has changed in the new version.\\nDo you want to keep your ${relativeDestPath} or replace it with the ` +\n        'latest version?\\nIf you ever made any changes ' +\n        \"to this file, you'll probably want to keep it.\\n\" +\n        `You can see the new version here: ${absoluteSrcFilePath}\\n` +\n        `Do you want to replace ${relativeDestPath}? ` +\n        'Answer y to replace, n to keep your version: ',\n    );\n    const answer = prompt();\n    if (answer === 'y') {\n      logger.info(`Replacing ${relativeDestPath}`);\n      return 'overwrite';\n    }\n    logger.info(`Keeping your ${relativeDestPath}`);\n    return 'keep';\n  }\n  if (contentChanged === 'identical') {\n    return 'keep';\n  }\n  throw new Error(\n    `Unknown file changed state: ${relativeDestPath}, ${contentChanged}`,\n  );\n}\n\nexport default copyProjectTemplateAndReplace;\n"]}