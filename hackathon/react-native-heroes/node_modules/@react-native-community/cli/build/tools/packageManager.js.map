{"version":3,"sources":["../../src/tools/packageManager.ts"],"names":["packageManagers","yarn","init","install","installDev","uninstall","installAll","npm","configurePackageManager","packageNames","action","options","pm","shouldUseYarn","executable","flags","args","executeCommand","command","stdio","silent","logger","isVerbose","cwd","root","preferYarn","undefined"],"mappings":";;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;;;;AAQA,MAAMA,eAAe,GAAG;AACtBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,IAAI,EAAE,CAAC,MAAD,EAAS,IAAT,CADF;AAEJC,IAAAA,OAAO,EAAE,CAAC,KAAD,CAFL;AAGJC,IAAAA,UAAU,EAAE,CAAC,KAAD,EAAQ,IAAR,CAHR;AAIJC,IAAAA,SAAS,EAAE,CAAC,QAAD,CAJP;AAKJC,IAAAA,UAAU,EAAE,CAAC,SAAD;AALR,GADgB;AAQtBC,EAAAA,GAAG,EAAE;AACHL,IAAAA,IAAI,EAAE,CAAC,MAAD,EAAS,IAAT,CADH;AAEHC,IAAAA,OAAO,EAAE,CAAC,SAAD,EAAY,QAAZ,EAAsB,cAAtB,CAFN;AAGHC,IAAAA,UAAU,EAAE,CAAC,SAAD,EAAY,YAAZ,EAA0B,cAA1B,CAHT;AAIHC,IAAAA,SAAS,EAAE,CAAC,WAAD,EAAc,QAAd,CAJR;AAKHC,IAAAA,UAAU,EAAE,CAAC,SAAD;AALT;AARiB,CAAxB;;AAiBA,SAASE,uBAAT,CACEC,YADF,EAEEC,MAFF,EAGEC,OAHF,EAIE;AACA,QAAMC,EAAE,GAAGC,aAAa,CAACF,OAAD,CAAb,GAAyB,MAAzB,GAAkC,KAA7C;AACA,QAAM,CAACG,UAAD,EAAa,GAAGC,KAAhB,IAAyBf,eAAe,CAACY,EAAD,CAAf,CAAoBF,MAApB,CAA/B;AACA,QAAMM,IAAI,GAAG,CAACF,UAAD,EAAa,GAAGC,KAAhB,EAAuB,GAAGN,YAA1B,CAAb;AACA,SAAOQ,cAAc,CAACL,EAAD,EAAKI,IAAL,EAAWL,OAAX,CAArB;AACD;;AAED,SAASM,cAAT,CACEC,OADF,EAEEF,IAFF,EAGEL,OAHF,EAIE;AACA,SAAO,sBAAMO,OAAN,EAAeF,IAAf,EAAqB;AAC1BG,IAAAA,KAAK,EAAER,OAAO,CAACS,MAAR,IAAkB,CAACC,mBAAOC,SAAP,EAAnB,GAAwC,MAAxC,GAAiD,SAD9B;AAE1BC,IAAAA,GAAG,EAAEZ,OAAO,CAACa;AAFa,GAArB,CAAP;AAID;;AAED,SAASX,aAAT,CAAuBF,OAAvB,EAAyC;AACvC,MAAIA,OAAO,IAAIA,OAAO,CAACc,UAAR,KAAuBC,SAAtC,EAAiD;AAC/C,WAAOf,OAAO,CAACc,UAAR,IAAsB,sCAA7B;AACD;;AAED,SAAO,8BAAmBd,OAAO,CAACa,IAA3B,KAAoC,sCAA3C;AACD;;AAEM,SAAStB,IAAT,CAAcS,OAAd,EAAgC;AACrC,SAAOH,uBAAuB,CAAC,EAAD,EAAK,MAAL,EAAaG,OAAb,CAA9B;AACD;;AAEM,SAASR,OAAT,CAAiBM,YAAjB,EAA8CE,OAA9C,EAAgE;AACrE,SAAOH,uBAAuB,CAACC,YAAD,EAAe,SAAf,EAA0BE,OAA1B,CAA9B;AACD;;AAEM,SAASP,UAAT,CAAoBK,YAApB,EAAiDE,OAAjD,EAAmE;AACxE,SAAOH,uBAAuB,CAACC,YAAD,EAAe,YAAf,EAA6BE,OAA7B,CAA9B;AACD;;AAEM,SAASN,SAAT,CAAmBI,YAAnB,EAAgDE,OAAhD,EAAkE;AACvE,SAAOH,uBAAuB,CAACC,YAAD,EAAe,WAAf,EAA4BE,OAA5B,CAA9B;AACD;;AAEM,SAASL,UAAT,CAAoBK,OAApB,EAAsC;AAC3C,SAAOH,uBAAuB,CAAC,EAAD,EAAK,YAAL,EAAmBG,OAAnB,CAA9B;AACD","sourcesContent":["import execa from 'execa';\nimport {logger} from '@react-native-community/cli-tools';\nimport {getYarnVersionIfAvailable, isProjectUsingYarn} from './yarn';\n\ntype Options = {\n  preferYarn?: boolean;\n  silent?: boolean;\n  root: string;\n};\n\nconst packageManagers = {\n  yarn: {\n    init: ['init', '-y'],\n    install: ['add'],\n    installDev: ['add', '-D'],\n    uninstall: ['remove'],\n    installAll: ['install'],\n  },\n  npm: {\n    init: ['init', '-y'],\n    install: ['install', '--save', '--save-exact'],\n    installDev: ['install', '--save-dev', '--save-exact'],\n    uninstall: ['uninstall', '--save'],\n    installAll: ['install'],\n  },\n};\n\nfunction configurePackageManager(\n  packageNames: Array<string>,\n  action: 'init' | 'install' | 'installDev' | 'installAll' | 'uninstall',\n  options: Options,\n) {\n  const pm = shouldUseYarn(options) ? 'yarn' : 'npm';\n  const [executable, ...flags] = packageManagers[pm][action];\n  const args = [executable, ...flags, ...packageNames];\n  return executeCommand(pm, args, options);\n}\n\nfunction executeCommand(\n  command: string,\n  args: Array<string>,\n  options: Options,\n) {\n  return execa(command, args, {\n    stdio: options.silent && !logger.isVerbose() ? 'pipe' : 'inherit',\n    cwd: options.root,\n  });\n}\n\nfunction shouldUseYarn(options: Options) {\n  if (options && options.preferYarn !== undefined) {\n    return options.preferYarn && getYarnVersionIfAvailable();\n  }\n\n  return isProjectUsingYarn(options.root) && getYarnVersionIfAvailable();\n}\n\nexport function init(options: Options) {\n  return configurePackageManager([], 'init', options);\n}\n\nexport function install(packageNames: Array<string>, options: Options) {\n  return configurePackageManager(packageNames, 'install', options);\n}\n\nexport function installDev(packageNames: Array<string>, options: Options) {\n  return configurePackageManager(packageNames, 'installDev', options);\n}\n\nexport function uninstall(packageNames: Array<string>, options: Options) {\n  return configurePackageManager(packageNames, 'uninstall', options);\n}\n\nexport function installAll(options: Options) {\n  return configurePackageManager([], 'installAll', options);\n}\n"]}