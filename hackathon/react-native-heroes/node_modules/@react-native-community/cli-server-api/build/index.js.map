{"version":3,"sources":["../src/index.ts"],"names":["createDevServerMiddleware","options","isDebuggerConnected","broadcast","_event","middleware","use","securityHeadersMiddleware","openURLMiddleware","statusPageMiddleware","rawBodyMiddleware","systraceProfileMiddleware","_req","res","end","watchFolders","forEach","folder","attachToServer","server","debuggerProxy","debuggerProxyServer","messageSocket","messageSocketServer","eventsSocket","eventsSocketServer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;AAqBO,SAASA,yBAAT,CAAmCC,OAAnC,EAA+D;AACpE,MAAIC,mBAAmB,GAAG,MAAM,KAAhC;;AACA,MAAIC,SAAS,GAAIC,MAAD,IAAiB,CAAE,CAAnC;;AAEA,QAAMC,UAAU,GAAG,0BAChBC,GADgB,CACZC,kCADY,EAEjB;AAFiB,GAGhBD,GAHgB,CAGZ,6BAHY,EAIhBA,GAJgB,CAIZ,yBAJY,EAKhBA,GALgB,CAKZ,cALY,EAKI,4CALJ,EAMhBA,GANgB,CAOf,qBAPe,EAQf,iCAAmBL,OAAnB,EAA4B,MAAMC,mBAAmB,EAArD,CARe,EAUhBI,GAVgB,CAUZ,mBAVY,EAUS,+CAAiCL,OAAjC,CAVT,EAWhBK,GAXgB,CAWZ,WAXY,EAWCE,0BAXD,EAYhBF,GAZgB,CAYZ,SAZY,EAYDG,6BAZC,EAahBH,GAbgB,CAaZ,cAbY,EAaII,0BAbJ,EAchBJ,GAdgB,CAcZ,WAdY,EAcCK,kCAdD,EAehBL,GAfgB,CAeZ,SAfY,EAeD,CAACM,IAAD,EAA6BC,GAA7B,KAA0D;AACxEV,IAAAA,SAAS,CAAC,QAAD,CAAT;AACAU,IAAAA,GAAG,CAACC,GAAJ,CAAQ,IAAR;AACD,GAlBgB,EAmBhBR,GAnBgB,CAmBZ,8BAnBY,CAAnB;AAqBAL,EAAAA,OAAO,CAACc,YAAR,CAAqBC,OAArB,CAA8BC,MAAD,IAAY;AACvC;AACAZ,IAAAA,UAAU,CAACC,GAAX,CAAe,4BAAYW,MAAZ,CAAf;AACD,GAHD;AAKA,SAAO;AACLC,IAAAA,cAAc,CAACC,MAAD,EAAmC;AAC/C,YAAMC,aAAa,GAAGC,6BAAoBH,cAApB,CACpBC,MADoB,EAEpB,iBAFoB,CAAtB;;AAIA,YAAMG,aAAa,GAAGC,6BAAoBL,cAApB,CACpBC,MADoB,EAEpB,UAFoB,CAAtB;;AAIAhB,MAAAA,SAAS,GAAGmB,aAAa,CAACnB,SAA1B;AACAD,MAAAA,mBAAmB,GAAGkB,aAAa,CAAClB,mBAApC;;AACA,YAAMsB,YAAY,GAAGC,4BAAmBP,cAAnB,CACnBC,MADmB,EAEnB,SAFmB,EAGnBG,aAHmB,CAArB;;AAKA,aAAO;AACLF,QAAAA,aADK;AAELI,QAAAA,YAFK;AAGLF,QAAAA;AAHK,OAAP;AAKD,KAtBI;;AAuBLjB,IAAAA;AAvBK,GAAP;AAyBD","sourcesContent":["import http, {Server as HttpServer} from 'http';\nimport {Server as HttpsServer} from 'https';\n\nimport compression from 'compression';\nimport connect from 'connect';\nimport errorhandler from 'errorhandler';\nimport nocache from 'nocache';\nimport serveStatic from 'serve-static';\nimport {debuggerUIMiddleware} from '@react-native-community/cli-debugger-ui';\n\nimport devToolsMiddleware from './devToolsMiddleware';\nimport indexPageMiddleware from './indexPageMiddleware';\nimport openStackFrameInEditorMiddleware from './openStackFrameInEditorMiddleware';\nimport openURLMiddleware from './openURLMiddleware';\nimport rawBodyMiddleware from './rawBodyMiddleware';\nimport securityHeadersMiddleware from './securityHeadersMiddleware';\nimport statusPageMiddleware from './statusPageMiddleware';\nimport systraceProfileMiddleware from './systraceProfileMiddleware';\n\nimport debuggerProxyServer from './websocket/debuggerProxyServer';\nimport eventsSocketServer from './websocket/eventsSocketServer';\nimport messageSocketServer from './websocket/messageSocketServer';\n\nexport {devToolsMiddleware};\nexport {indexPageMiddleware};\nexport {openStackFrameInEditorMiddleware};\nexport {openURLMiddleware};\nexport {rawBodyMiddleware};\nexport {securityHeadersMiddleware};\nexport {statusPageMiddleware};\nexport {systraceProfileMiddleware};\n\nexport {debuggerProxyServer};\nexport {eventsSocketServer};\nexport {messageSocketServer};\n\ntype MiddlewareOptions = {\n  host?: string;\n  watchFolders: ReadonlyArray<string>;\n  port: number;\n};\n\nexport function createDevServerMiddleware(options: MiddlewareOptions) {\n  let isDebuggerConnected = () => false;\n  let broadcast = (_event: any) => {};\n\n  const middleware = connect()\n    .use(securityHeadersMiddleware)\n    // @ts-ignore compression and connect types mismatch\n    .use(compression())\n    .use(nocache())\n    .use('/debugger-ui', debuggerUIMiddleware())\n    .use(\n      '/launch-js-devtools',\n      devToolsMiddleware(options, () => isDebuggerConnected()),\n    )\n    .use('/open-stack-frame', openStackFrameInEditorMiddleware(options))\n    .use('/open-url', openURLMiddleware)\n    .use('/status', statusPageMiddleware)\n    .use('/symbolicate', rawBodyMiddleware)\n    .use('/systrace', systraceProfileMiddleware)\n    .use('/reload', (_req: http.IncomingMessage, res: http.ServerResponse) => {\n      broadcast('reload');\n      res.end('OK');\n    })\n    .use(errorhandler());\n\n  options.watchFolders.forEach((folder) => {\n    // @ts-ignore mismatch between express and connect middleware types\n    middleware.use(serveStatic(folder));\n  });\n\n  return {\n    attachToServer(server: HttpServer | HttpsServer) {\n      const debuggerProxy = debuggerProxyServer.attachToServer(\n        server,\n        '/debugger-proxy',\n      );\n      const messageSocket = messageSocketServer.attachToServer(\n        server,\n        '/message',\n      );\n      broadcast = messageSocket.broadcast;\n      isDebuggerConnected = debuggerProxy.isDebuggerConnected;\n      const eventsSocket = eventsSocketServer.attachToServer(\n        server,\n        '/events',\n        messageSocket,\n      );\n      return {\n        debuggerProxy,\n        eventsSocket,\n        messageSocket,\n      };\n    },\n    middleware,\n  };\n}\n"]}