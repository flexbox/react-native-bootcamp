{"version":3,"file":"mockClient.js","sourceRoot":"","sources":["../../../../src/testing/core/mocking/mockClient.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAC7C,OAAO,EAAE,aAAa,EAAyB,MAAM,gBAAgB,CAAC;AACtE,OAAO,EAAE,cAAc,EAAE,MAAM,YAAY,CAAC;AAE5C,MAAM,UAAU,gBAAgB,CAC9B,IAAW,EACX,KAAmB,EACnB,SAAc;IAAd,0BAAA,EAAA,cAAc;IAEd,OAAO,IAAI,YAAY,CAAC;QACtB,IAAI,EAAE,cAAc,CAAC;YACnB,OAAO,EAAE,EAAE,KAAK,OAAA,EAAE,SAAS,WAAA,EAAE;YAC7B,MAAM,EAAE,EAAE,IAAI,MAAA,EAAE;SACjB,CAAC,CAAC,UAAU,CAAC,UAAA,KAAK,IAAM,MAAM,KAAK,CAAA,CAAC,CAAC,CAAC;QACvC,KAAK,EAAE,IAAI,aAAa,CAAC,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC;KACjD,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { DocumentNode } from 'graphql';\n\nimport { ApolloClient } from '../../../core';\nimport { InMemoryCache, NormalizedCacheObject } from '../../../cache';\nimport { mockSingleLink } from './mockLink';\n\nexport function createMockClient<TData>(\n  data: TData,\n  query: DocumentNode,\n  variables = {},\n): ApolloClient<NormalizedCacheObject> {\n  return new ApolloClient({\n    link: mockSingleLink({\n      request: { query, variables },\n      result: { data },\n    }).setOnError(error => { throw error }),\n    cache: new InMemoryCache({ addTypename: false }),\n  });\n}\n"]}