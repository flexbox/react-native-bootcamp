{"version":3,"file":"mockLink.js","sourceRoot":"","sources":["../../../../src/testing/core/mocking/mockLink.ts"],"names":[],"mappings":"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","sourcesContent":["import { invariant } from '../../../utilities/globals';\n\nimport { print } from 'graphql';\nimport { equal } from '@wry/equality';\n\nimport {\n  ApolloLink,\n  Operation,\n  GraphQLRequest,\n  FetchResult,\n} from '../../../link/core';\n\nimport {\n  Observable,\n  addTypenameToDocument,\n  removeClientSetsFromDocument,\n  removeConnectionDirectiveFromDocument,\n  cloneDeep,\n  stringifyForDisplay,\n} from '../../../utilities';\n\nexport type ResultFunction<T> = () => T;\n\nexport interface MockedResponse<TData = Record<string, any>> {\n  request: GraphQLRequest;\n  result?: FetchResult<TData> | ResultFunction<FetchResult<TData>>;\n  error?: Error;\n  delay?: number;\n  newData?: ResultFunction<FetchResult>;\n}\n\nfunction requestToKey(request: GraphQLRequest, addTypename: Boolean): string {\n  const queryString =\n    request.query &&\n    print(addTypename ? addTypenameToDocument(request.query) : request.query);\n  const requestKey = { query: queryString };\n  return JSON.stringify(requestKey);\n}\n\nexport class MockLink extends ApolloLink {\n  public operation: Operation;\n  public addTypename: Boolean = true;\n  private mockedResponsesByKey: { [key: string]: MockedResponse[] } = {};\n\n  constructor(\n    mockedResponses: ReadonlyArray<MockedResponse>,\n    addTypename: Boolean = true\n  ) {\n    super();\n    this.addTypename = addTypename;\n    if (mockedResponses) {\n      mockedResponses.forEach(mockedResponse => {\n        this.addMockedResponse(mockedResponse);\n      });\n    }\n  }\n\n  public addMockedResponse(mockedResponse: MockedResponse) {\n    const normalizedMockedResponse = this.normalizeMockedResponse(\n      mockedResponse\n    );\n    const key = requestToKey(\n      normalizedMockedResponse.request,\n      this.addTypename\n    );\n    let mockedResponses = this.mockedResponsesByKey[key];\n    if (!mockedResponses) {\n      mockedResponses = [];\n      this.mockedResponsesByKey[key] = mockedResponses;\n    }\n    mockedResponses.push(normalizedMockedResponse);\n  }\n\n  public request(operation: Operation): Observable<FetchResult> | null {\n    this.operation = operation;\n    const key = requestToKey(operation, this.addTypename);\n    const unmatchedVars: Array<Record<string, any>> = [];\n    const requestVariables = operation.variables || {};\n    const mockedResponses = this.mockedResponsesByKey[key];\n    const responseIndex = mockedResponses ? mockedResponses.findIndex((res, index) => {\n      const mockedResponseVars = res.request.variables || {};\n      if (equal(requestVariables, mockedResponseVars)) {\n        return true;\n      }\n      unmatchedVars.push(mockedResponseVars);\n      return false;\n    }) : -1;\n\n    const response = responseIndex >= 0\n      ? mockedResponses[responseIndex]\n      : void 0;\n\n    let configError: Error;\n\n    if (!response) {\n      configError = new Error(\n`No more mocked responses for the query: ${print(operation.query)}\nExpected variables: ${stringifyForDisplay(operation.variables)}\n${unmatchedVars.length > 0 ? `\nFailed to match ${unmatchedVars.length} mock${\n  unmatchedVars.length === 1 ? \"\" : \"s\"\n} for this query, which had the following variables:\n${unmatchedVars.map(d => `  ${stringifyForDisplay(d)}`).join('\\n')}\n` : \"\"}`);\n    } else {\n      mockedResponses.splice(responseIndex, 1);\n\n      const { newData } = response;\n      if (newData) {\n        response.result = newData();\n        mockedResponses.push(response);\n      }\n\n      if (!response.result && !response.error) {\n        configError = new Error(\n          `Mocked response should contain either result or error: ${key}`\n        );\n      }\n    }\n\n    return new Observable(observer => {\n      const timer = setTimeout(() => {\n        if (configError) {\n          try {\n            // The onError function can return false to indicate that\n            // configError need not be passed to observer.error. For\n            // example, the default implementation of onError calls\n            // observer.error(configError) and then returns false to\n            // prevent this extra (harmless) observer.error call.\n            if (this.onError(configError, observer) !== false) {\n              throw configError;\n            }\n          } catch (error) {\n            observer.error(error);\n          }\n        } else if (response) {\n          if (response.error) {\n            observer.error(response.error);\n          } else {\n            if (response.result) {\n              observer.next(\n                typeof response.result === 'function'\n                  ? (response.result as ResultFunction<FetchResult>)()\n                  : response.result\n              );\n            }\n            observer.complete();\n          }\n        }\n      }, response && response.delay || 0);\n\n      return () => {\n        clearTimeout(timer);\n      };\n    });\n  }\n\n  private normalizeMockedResponse(\n    mockedResponse: MockedResponse\n  ): MockedResponse {\n    const newMockedResponse = cloneDeep(mockedResponse);\n    const queryWithoutConnection = removeConnectionDirectiveFromDocument(\n      newMockedResponse.request.query\n    );\n    invariant(queryWithoutConnection, \"query is required\");\n    newMockedResponse.request.query = queryWithoutConnection!;\n    const query = removeClientSetsFromDocument(newMockedResponse.request.query);\n    if (query) {\n      newMockedResponse.request.query = query;\n    }\n    return newMockedResponse;\n  }\n}\n\nexport interface MockApolloLink extends ApolloLink {\n  operation?: Operation;\n}\n\n// Pass in multiple mocked responses, so that you can test flows that end up\n// making multiple queries to the server.\n// NOTE: The last arg can optionally be an `addTypename` arg.\nexport function mockSingleLink(\n  ...mockedResponses: Array<any>\n): MockApolloLink {\n  // To pull off the potential typename. If this isn't a boolean, we'll just\n  // set it true later.\n  let maybeTypename = mockedResponses[mockedResponses.length - 1];\n  let mocks = mockedResponses.slice(0, mockedResponses.length - 1);\n\n  if (typeof maybeTypename !== 'boolean') {\n    mocks = mockedResponses;\n    maybeTypename = true;\n  }\n\n  return new MockLink(mocks, maybeTypename);\n}\n"]}