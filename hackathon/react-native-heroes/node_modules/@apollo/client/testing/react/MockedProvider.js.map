{"version":3,"file":"MockedProvider.js","sourceRoot":"","sources":["../../../src/testing/react/MockedProvider.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAE,YAAY,EAAkB,MAAM,YAAY,CAAC;AAC1D,OAAO,EAAE,aAAa,IAAI,KAAK,EAAE,MAAM,aAAa,CAAC;AACrD,OAAO,EAAE,cAAc,EAAE,MAAM,qBAAqB,CAAC;AACrD,OAAO,EAAE,QAAQ,EAAkB,MAAM,SAAS,CAAC;AAoBnD;IAAoC,kCAGnC;IAKC,wBAAY,KAA0B;QAAtC,YACE,kBAAM,KAAK,CAAC,SAqBb;QAnBO,IAAA,KAOF,KAAI,CAAC,KAAK,EANZ,KAAK,WAAA,EACL,WAAW,iBAAA,EACX,cAAc,oBAAA,EACd,KAAK,WAAA,EACL,SAAS,eAAA,EACT,IAAI,UACQ,CAAC;QACf,IAAM,MAAM,GAAG,IAAI,YAAY,CAAC;YAC9B,KAAK,EAAE,KAAK,IAAI,IAAI,KAAK,CAAC,EAAE,WAAW,aAAA,EAAE,CAAC;YAC1C,cAAc,gBAAA;YACd,IAAI,EAAE,IAAI,IAAI,IAAI,QAAQ,CACxB,KAAK,IAAI,EAAE,EACX,WAAW,CACZ;YACD,SAAS,WAAA;SACV,CAAC,CAAC;QAEH,KAAI,CAAC,KAAK,GAAG,EAAE,MAAM,QAAA,EAAE,CAAC;;IAC1B,CAAC;IAEM,+BAAM,GAAb;QACQ,IAAA,KAA2B,IAAI,CAAC,KAAK,EAAnC,QAAQ,cAAA,EAAE,UAAU,gBAAe,CAAC;QAC5C,OAAO,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CACtC,oBAAC,cAAc,IAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,IACtC,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAO,UAAU,EAAG,CACtD,CAClB,CAAC,CAAC,CAAC,IAAI,CAAC;IACX,CAAC;IAEM,6CAAoB,GAA3B;QAGE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;IAC3B,CAAC;IAzCa,2BAAY,GAAwB;QAChD,WAAW,EAAE,IAAI;KAClB,CAAC;IAwCJ,qBAAC;CAAA,AA9CD,CAAoC,KAAK,CAAC,SAAS,GA8ClD;SA9CY,cAAc","sourcesContent":["import * as React from 'react';\n\nimport { ApolloClient, DefaultOptions } from '../../core';\nimport { InMemoryCache as Cache } from '../../cache';\nimport { ApolloProvider } from '../../react/context';\nimport { MockLink, MockedResponse } from '../core';\nimport { ApolloLink } from '../../link/core';\nimport { Resolvers } from '../../core';\nimport { ApolloCache } from '../../cache';\n\nexport interface MockedProviderProps<TSerializedCache = {}> {\n  mocks?: ReadonlyArray<MockedResponse>;\n  addTypename?: boolean;\n  defaultOptions?: DefaultOptions;\n  cache?: ApolloCache<TSerializedCache>;\n  resolvers?: Resolvers;\n  childProps?: object;\n  children?: any;\n  link?: ApolloLink;\n}\n\nexport interface MockedProviderState {\n  client: ApolloClient<any>;\n}\n\nexport class MockedProvider extends React.Component<\n  MockedProviderProps,\n  MockedProviderState\n> {\n  public static defaultProps: MockedProviderProps = {\n    addTypename: true\n  };\n\n  constructor(props: MockedProviderProps) {\n    super(props);\n\n    const {\n      mocks,\n      addTypename,\n      defaultOptions,\n      cache,\n      resolvers,\n      link\n    } = this.props;\n    const client = new ApolloClient({\n      cache: cache || new Cache({ addTypename }),\n      defaultOptions,\n      link: link || new MockLink(\n        mocks || [],\n        addTypename,\n      ),\n      resolvers,\n    });\n\n    this.state = { client };\n  }\n\n  public render() {\n    const { children, childProps } = this.props;\n    return React.isValidElement(children) ? (\n      <ApolloProvider client={this.state.client}>\n        {React.cloneElement(React.Children.only(children), { ...childProps })}\n      </ApolloProvider>\n    ) : null;\n  }\n\n  public componentWillUnmount() {\n    // Since this.state.client was created in the constructor, it's this\n    // MockedProvider's responsibility to terminate it.\n    this.state.client.stop();\n  }\n}\n"]}