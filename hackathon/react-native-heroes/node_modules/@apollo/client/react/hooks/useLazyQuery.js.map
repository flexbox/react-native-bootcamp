{"version":3,"file":"useLazyQuery.js","sourceRoot":"","sources":["../../../src/react/hooks/useLazyQuery.ts"],"names":[],"mappings":";AAEA,OAAO,EAAE,WAAW,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAOvD,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AAKtC,IAAM,aAAa,GAAG;IACpB,SAAS;IACT,WAAW;IACX,aAAa;IACb,cAAc;IACd,iBAAiB;CACT,CAAC;AAEX,MAAM,UAAU,YAAY,CAC1B,KAA0D,EAC1D,OAAiD;IAE3C,IAAA,KAA4B,QAAQ,CAGvC;QACD,MAAM,EAAE,KAAK;KACd,CAAC,EALK,SAAS,QAAA,EAAE,YAAY,QAK5B,CAAC;IAEH,IAAI,MAAM,GAAG,QAAQ,CAAoB,KAAK,iCACzC,OAAO,GACP,SAAS,CAAC,OAAO,KAGpB,WAAW,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,WAAW,CAAC,CAAC,CAAC,SAAS,EAChE,IAAI,EAAE,SAAS,IACf,CAAC;IAEH,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;QACrB,MAAM,yBACD,MAAM,KACT,OAAO,EAAE,KAAK,EACd,IAAI,EAAE,KAAK,CAAqB,EAChC,KAAK,EAAE,KAAK,CAAC,EACb,MAAM,EAAE,KAAK,GACd,CAAC;KACH;IAGD,IAAM,YAAY,GAAG,OAAO,CAAC;QAC3B,IAAM,YAAY,GAAwB,EAAE,CAAC;gCAClC,GAAG;YACZ,IAAM,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;YAC3B,YAAY,CAAC,GAAG,CAAC,GAAG;gBAAC,cAAY;qBAAZ,UAAY,EAAZ,qBAAY,EAAZ,IAAY;oBAAZ,yBAAY;;gBAC/B,YAAY,CAAC,UAAC,SAAS,IAAK,OAAA,uBAAM,SAAS,KAAE,MAAM,EAAE,IAAI,IAAG,EAAhC,CAAgC,CAAC,CAAC;gBAC9D,OAAQ,MAAc,eAAI,IAAI,EAAE;YAClC,CAAC,CAAC;;QALJ,KAAkB,UAAa,EAAb,+BAAa,EAAb,2BAAa,EAAb,IAAa;YAA1B,IAAM,GAAG,sBAAA;oBAAH,GAAG;SAMb;QAED,OAAO,YAAY,CAAC;IACtB,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,IAAI,KAAK,CAAC,CAAC;IACtC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;IAEpC,IAAM,OAAO,GAAG,WAAW,CAEzB,UAAC,cAA6C;QAC9C,YAAY,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,cAAc,EAAE,CAAC,CAAC;QACxD,IAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,SAAS,CAAC,CAAC,IAAI,CAAC,UAAC,OAAO;YACrE,IAAM,OAAO,yBACR,MAAM,KACT,IAAI,EAAE,OAAO,CAAC,IAAI,EAClB,KAAK,EAAE,OAAO,CAAC,KAAK,EACpB,MAAM,EAAE,IAAI,EACZ,OAAO,EAAE,KAAK,GACf,CAAC;YAEF,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;YACrC,OAAO,OAAO,CAAC;QACjB,CAAC,CAAC,CAAC;QAIH,OAAO,CAAC,KAAK,CAAC,cAAO,CAAC,CAAC,CAAC;QAExB,OAAO,OAAO,CAAC;IACjB,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;AAC3B,CAAC","sourcesContent":["import { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport {\n  LazyQueryHookOptions,\n  QueryLazyOptions,\n  QueryTuple,\n} from '../types/types';\nimport { useQuery } from './useQuery';\nimport { OperationVariables } from '../../core';\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  'refetch',\n  'fetchMore',\n  'updateQuery',\n  'startPolling',\n  'subscribeToMore',\n] as const;\n\nexport function useLazyQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<TData, TVariables>\n): QueryTuple<TData, TVariables> {\n  const [execution, setExecution] = useState<{\n    called: boolean,\n    options?: QueryLazyOptions<TVariables>,\n  }>({\n    called: false,\n  });\n\n  let result = useQuery<TData, TVariables>(query, {\n    ...options,\n    ...execution.options,\n    // We donâ€™t set skip to execution.called, because some useQuery SSR code\n    // checks skip for some reason.\n    fetchPolicy: execution.called ? options?.fetchPolicy : 'standby',\n    skip: undefined,\n  });\n\n  if (!execution.called) {\n    result = {\n      ...result,\n      loading: false,\n      data: void 0 as unknown as TData,\n      error: void 0,\n      called: false,\n    };\n  }\n\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = result[key];\n      eagerMethods[key] = (...args: any) => {\n        setExecution((execution) => ({ ...execution, called: true }));\n        return (method as any)(...args);\n      };\n    }\n\n    return eagerMethods;\n  }, []);\n\n  result.error = result.error || void 0;\n  Object.assign(result, eagerMethods);\n\n  const execute = useCallback<\n    QueryTuple<TData, TVariables>[0]\n  >((executeOptions?: QueryLazyOptions<TVariables>) => {\n    setExecution({ called: true, options: executeOptions });\n    const promise = result.refetch(executeOptions?.variables).then((result1) => {\n      const result2 = {\n        ...result,\n        data: result1.data,\n        error: result1.error,\n        called: true,\n        loading: false,\n      };\n\n      Object.assign(result2, eagerMethods);\n      return result2;\n    });\n\n    // Because the return value of `useLazyQuery` is usually floated, we need\n    // to catch the promise to prevent unhandled rejections.\n    promise.catch(() => {});\n\n    return promise;\n  }, []);\n\n  return [execute, result];\n}\n"]}