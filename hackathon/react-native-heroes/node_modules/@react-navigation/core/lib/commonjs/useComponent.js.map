{"version":3,"sources":["useComponent.tsx"],"names":["useComponent","Component","props","propsRef","React","useRef","current","useEffect","rest","Error"],"mappings":";;;;;;;AAAA;;;;;;;;AAEe,SAASA,YAAT,CAGbC,SAHa,EAGCC,KAHD,EAGW;AACxB,QAAMC,QAAQ,GAAGC,KAAK,CAACC,MAAN,CAAuBH,KAAvB,CAAjB,CADwB,CAGxB;AACA;AACA;;AACAC,EAAAA,QAAQ,CAACG,OAAT,GAAmBJ,KAAnB;AAEAE,EAAAA,KAAK,CAACG,SAAN,CAAgB,MAAM;AACpBJ,IAAAA,QAAQ,CAACG,OAAT,GAAmB,IAAnB;AACD,GAFD;AAIA,SAAOF,KAAK,CAACC,MAAN,CAAcG,IAAD,IAAkD;AACpE,UAAMN,KAAK,GAAGC,QAAQ,CAACG,OAAvB;;AAEA,QAAIJ,KAAK,KAAK,IAAd,EAAoB;AAClB,YAAM,IAAIO,KAAJ,CACJ,+EADI,CAAN;AAGD,KAPmE,CASpE;;;AACA,wBAAO,oBAAC,SAAD,eAAeP,KAAf,EAA0BM,IAA1B,EAAP;AACD,GAXM,EAWJF,OAXH;AAYD","sourcesContent":["import * as React from 'react';\n\nexport default function useComponent<\n  T extends React.ComponentType<any>,\n  P extends {}\n>(Component: T, props: P) {\n  const propsRef = React.useRef<P | null>(props);\n\n  // Normally refs shouldn't be mutated in render\n  // But we return a component which will be rendered\n  // So it's just for immediate consumption\n  propsRef.current = props;\n\n  React.useEffect(() => {\n    propsRef.current = null;\n  });\n\n  return React.useRef((rest: Omit<React.ComponentProps<T>, keyof P>) => {\n    const props = propsRef.current;\n\n    if (props === null) {\n      throw new Error(\n        'The returned component must be rendered in the same render phase as the hook.'\n      );\n    }\n\n    // @ts-expect-error: the props should be fine here\n    return <Component {...props} {...rest} />;\n  }).current;\n}\n"]}