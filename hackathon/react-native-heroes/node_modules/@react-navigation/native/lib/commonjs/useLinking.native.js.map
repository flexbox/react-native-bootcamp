{"version":3,"sources":["useLinking.native.tsx"],"names":["linkingHandlers","useLinking","ref","independent","enabled","prefixes","filter","config","getInitialURL","Promise","race","Linking","resolve","setTimeout","subscribe","listener","callback","url","subscription","addEventListener","remove","removeEventListener","getStateFromPath","getStateFromPathDefault","getActionFromState","getActionFromStateDefault","React","useEffect","process","env","NODE_ENV","undefined","length","console","error","Platform","OS","join","trim","handler","Symbol","push","index","indexOf","splice","enabledRef","useRef","prefixesRef","filterRef","configRef","getInitialURLRef","getStateFromPathRef","getActionFromStateRef","current","getStateFromURL","useCallback","path","getInitialState","state","then","thenable","onfulfilled","catch","navigation","rootState","getRootState","routes","some","r","routeNames","includes","name","warn","action","dispatch","e","message","resetRoot"],"mappings":"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","sourcesContent":["import {\n  getActionFromState as getActionFromStateDefault,\n  getStateFromPath as getStateFromPathDefault,\n  NavigationContainerRef,\n  ParamListBase,\n} from '@react-navigation/core';\nimport * as React from 'react';\nimport { Linking, Platform } from 'react-native';\n\nimport extractPathFromURL from './extractPathFromURL';\nimport type { LinkingOptions } from './types';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\ntype Options = LinkingOptions<ParamListBase> & {\n  independent?: boolean;\n};\n\nlet linkingHandlers: Symbol[] = [];\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef<ParamListBase>>,\n  {\n    independent,\n    enabled = true,\n    prefixes,\n    filter,\n    config,\n    getInitialURL = () =>\n      Promise.race([\n        Linking.getInitialURL(),\n        new Promise<undefined>((resolve) =>\n          // Timeout in 150ms if `getInitialState` doesn't resolve\n          // Workaround for https://github.com/facebook/react-native/issues/25675\n          setTimeout(resolve, 150)\n        ),\n      ]),\n    subscribe = (listener) => {\n      const callback = ({ url }: { url: string }) => listener(url);\n\n      const subscription = Linking.addEventListener('url', callback) as\n        | { remove(): void }\n        | undefined;\n\n      return () => {\n        // https://github.com/facebook/react-native/commit/6d1aca806cee86ad76de771ed3a1cc62982ebcd7\n        if (subscription?.remove) {\n          subscription.remove();\n        } else {\n          Linking.removeEventListener('url', callback);\n        }\n      };\n    },\n    getStateFromPath = getStateFromPathDefault,\n    getActionFromState = getActionFromStateDefault,\n  }: Options\n) {\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n\n    if (independent) {\n      return undefined;\n    }\n\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\",\n          '- Only a single instance of the root component is rendered',\n          Platform.OS === 'android'\n            ? \"- You have set 'android:launchMode=singleTask' in the '<activity />' section of the 'AndroidManifest.xml' file to avoid launching multiple instances\"\n            : '',\n        ]\n          .join('\\n')\n          .trim()\n      );\n    }\n\n    const handler = Symbol();\n\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n\n    return () => {\n      const index = linkingHandlers.indexOf(handler);\n\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const prefixesRef = React.useRef(prefixes);\n  const filterRef = React.useRef(filter);\n  const configRef = React.useRef(config);\n  const getInitialURLRef = React.useRef(getInitialURL);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    prefixesRef.current = prefixes;\n    filterRef.current = filter;\n    configRef.current = config;\n    getInitialURLRef.current = getInitialURL;\n    getStateFromPathRef.current = getStateFromPath;\n    getActionFromStateRef.current = getActionFromState;\n  });\n\n  const getStateFromURL = React.useCallback(\n    (url: string | null | undefined) => {\n      if (!url || (filterRef.current && !filterRef.current(url))) {\n        return undefined;\n      }\n\n      const path = extractPathFromURL(prefixesRef.current, url);\n\n      return path\n        ? getStateFromPathRef.current(path, configRef.current)\n        : undefined;\n    },\n    []\n  );\n\n  const getInitialState = React.useCallback(() => {\n    let state: ResultState | undefined;\n\n    if (enabledRef.current) {\n      const url = getInitialURLRef.current();\n\n      if (url != null && typeof url !== 'string') {\n        return url.then((url) => {\n          const state = getStateFromURL(url);\n\n          return state;\n        });\n      }\n\n      state = getStateFromURL(url);\n    }\n\n    const thenable = {\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\n        return Promise.resolve(onfulfilled ? onfulfilled(state) : state);\n      },\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable as PromiseLike<ResultState | undefined>;\n  }, [getStateFromURL]);\n\n  React.useEffect(() => {\n    const listener = (url: string) => {\n      if (!enabled) {\n        return;\n      }\n\n      const navigation = ref.current;\n      const state = navigation ? getStateFromURL(url) : undefined;\n\n      if (navigation && state) {\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        const rootState = navigation.getRootState();\n\n        if (state.routes.some((r) => !rootState?.routeNames.includes(r.name))) {\n          console.warn(\n            \"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\"\n          );\n          return;\n        }\n\n        const action = getActionFromStateRef.current(state, configRef.current);\n\n        if (action !== undefined) {\n          try {\n            navigation.dispatch(action);\n          } catch (e) {\n            // Ignore any errors from deep linking.\n            // This could happen in case of malformed links, navigation object not being initialized etc.\n            console.warn(\n              `An error occurred when trying to handle the link '${url}': ${\n                typeof e === 'object' && e != null && 'message' in e\n                  ? // @ts-expect-error: we're already checking for this\n                    e.message\n                  : e\n              }`\n            );\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      }\n    };\n\n    return subscribe(listener);\n  }, [enabled, getStateFromURL, ref, subscribe]);\n\n  return {\n    getInitialState,\n  };\n}\n"]}