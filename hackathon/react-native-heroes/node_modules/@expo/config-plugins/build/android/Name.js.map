{"version":3,"sources":["../../src/android/Name.ts"],"names":["sanitizeNameForGradle","name","replace","withName","applyNameFromConfig","withNameSettingsGradle","config","modResults","language","contents","applyNameSettingsGradle","getName","stringsJSON","value","settingsGradle"],"mappings":";;;;;;;;;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,qBAAT,CAA+BC,IAA/B,EAAqD;AAC1D;AACAA,EAAAA,IAAI,GAAGA,IAAI,CAACC,OAAL,CAAa,WAAb,EAA0B,EAA1B,CAAP,CAF0D,CAI1D;AACA;;AACA,SAAOD,IAAI,CAACC,OAAL,CAAa,2BAAb,EAA0C,EAA1C,CAAP;AACD;;AAEM,MAAMC,QAAQ,GAAG,8CAAuBC,mBAAvB,EAA4C,UAA5C,CAAjB;;;AAEA,MAAMC,sBAAoC,GAAGC,MAAM,IAAI;AAC5D,SAAO,0CAAmBA,MAAnB,EAA2BA,MAAM,IAAI;AAC1C,QAAIA,MAAM,CAACC,UAAP,CAAkBC,QAAlB,KAA+B,QAAnC,EAA6C;AAC3CF,MAAAA,MAAM,CAACC,UAAP,CAAkBE,QAAlB,GAA6BC,uBAAuB,CAACJ,MAAD,EAASA,MAAM,CAACC,UAAP,CAAkBE,QAA3B,CAApD;AACD,KAFD,MAEO;AACL,yCACE,MADF,EAEG,mEAFH;AAID;;AACD,WAAOH,MAAP;AACD,GAVM,CAAP;AAWD,CAZM;;;;AAcA,SAASK,OAAT,CAAiBL,MAAjB,EAAmD;AACxD,SAAO,OAAOA,MAAM,CAACL,IAAd,KAAuB,QAAvB,GAAkCK,MAAM,CAACL,IAAzC,GAAgD,IAAvD;AACD;;AAED,SAASG,mBAAT,CACEE,MADF,EAEEM,WAFF,EAGe;AACb,QAAMX,IAAI,GAAGU,OAAO,CAACL,MAAD,CAApB;;AACA,MAAIL,IAAJ,EAAU;AACR,WAAO,8BAAc,CAAC,oCAAkB;AAAEA,MAAAA,IAAI,EAAE,UAAR;AAAoBY,MAAAA,KAAK,EAAEZ;AAA3B,KAAlB,CAAD,CAAd,EAAsEW,WAAtE,CAAP;AACD;;AACD,SAAO,iCAAiB,UAAjB,EAA6BA,WAA7B,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASF,uBAAT,CAAiCJ,MAAjC,EAAmEQ,cAAnE,EAA2F;AAAA;;AAChG,QAAMb,IAAI,GAAGD,qBAAqB,aAACW,OAAO,CAACL,MAAD,CAAR,+CAAoB,EAApB,CAAlC,CADgG,CAGhG;;AACA,SAAOQ,cAAc,CAACZ,OAAf,CACL,oDADK,EAEJ,uBAAsBD,IAAI,CAACC,OAAL,CAAa,IAAb,EAAmB,KAAnB,CAA0B,GAF5C,CAAP;AAID","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { createStringsXmlPlugin, withSettingsGradle } from '../plugins/android-plugins';\nimport { addWarningAndroid } from '../utils/warnings';\nimport { buildResourceItem, ResourceXML } from './Resources';\nimport { removeStringItem, setStringItem } from './Strings';\n\n/**\n * Sanitize a name, this should be used for files and gradle names.\n * - `[/, \\, :, <, >, \", ?, *, |]` are not allowed\n * https://docs.gradle.org/4.2/release-notes.html#path-separator-characters-in-names-are-deprecated\n *\n * @param name\n */\nexport function sanitizeNameForGradle(name: string): string {\n  // Remove escape characters which are valid in XML names but not in gradle.\n  name = name.replace(/[\\n\\r\\t]/g, '');\n\n  // Gradle disallows these:\n  // The project name 'My-Special ðŸ˜ƒ Co/ol_Project' must not contain any of the following characters: [/, \\, :, <, >, \", ?, *, |]. Set the 'rootProject.name' or adjust the 'include' statement (see https://docs.gradle.org/6.2/dsl/org.gradle.api.initialization.Settings.html#org.gradle.api.initialization.Settings:include(java.lang.String[]) for more details).\n  return name.replace(/(\\/|\\\\|:|<|>|\"|\\?|\\*|\\|)/g, '');\n}\n\nexport const withName = createStringsXmlPlugin(applyNameFromConfig, 'withName');\n\nexport const withNameSettingsGradle: ConfigPlugin = config => {\n  return withSettingsGradle(config, config => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = applyNameSettingsGradle(config, config.modResults.contents);\n    } else {\n      addWarningAndroid(\n        'name',\n        `Cannot automatically configure settings.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\nexport function getName(config: Pick<ExpoConfig, 'name'>) {\n  return typeof config.name === 'string' ? config.name : null;\n}\n\nfunction applyNameFromConfig(\n  config: Pick<ExpoConfig, 'name'>,\n  stringsJSON: ResourceXML\n): ResourceXML {\n  const name = getName(config);\n  if (name) {\n    return setStringItem([buildResourceItem({ name: 'app_name', value: name })], stringsJSON);\n  }\n  return removeStringItem('app_name', stringsJSON);\n}\n\n/**\n * Regex a name change -- fragile.\n *\n * @param config\n * @param settingsGradle\n */\nexport function applyNameSettingsGradle(config: Pick<ExpoConfig, 'name'>, settingsGradle: string) {\n  const name = sanitizeNameForGradle(getName(config) ?? '');\n\n  // Select rootProject.name = '***' and replace the contents between the quotes.\n  return settingsGradle.replace(\n    /rootProject.name\\s?=\\s?([\"'])(?:(?=(\\\\?))\\2.)*?\\1/g,\n    `rootProject.name = '${name.replace(/'/g, \"\\\\'\")}'`\n  );\n}\n"],"file":"Name.js"}