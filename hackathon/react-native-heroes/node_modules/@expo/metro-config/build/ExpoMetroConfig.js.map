{"version":3,"file":"ExpoMetroConfig.js","sourceRoot":"","sources":["../src/ExpoMetroConfig.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2021-present 650 Industries (Expo). All rights reserved.\n\nimport { getConfig, getDefaultTarget, isLegacyImportsEnabled, ProjectTarget } from '@expo/config';\nimport { getBareExtensions, getManagedExtensions } from '@expo/config/paths';\nimport chalk from 'chalk';\nimport { boolish } from 'getenv';\nimport { Reporter } from 'metro';\nimport type MetroConfig from 'metro-config';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport { importMetroConfigFromProject } from './importMetroFromProject';\n\nexport const EXPO_DEBUG = boolish('EXPO_DEBUG', false);\nconst EXPO_USE_EXOTIC = boolish('EXPO_USE_EXOTIC', false);\n\n// Import only the types here, the values will be imported from the project, at runtime.\nexport const INTERNAL_CALLSITES_REGEX = new RegExp(\n  [\n    '/Libraries/Renderer/implementations/.+\\\\.js$',\n    '/Libraries/BatchedBridge/MessageQueue\\\\.js$',\n    '/Libraries/YellowBox/.+\\\\.js$',\n    '/Libraries/LogBox/.+\\\\.js$',\n    '/Libraries/Core/Timers/.+\\\\.js$',\n    'node_modules/react-devtools-core/.+\\\\.js$',\n    'node_modules/react-refresh/.+\\\\.js$',\n    'node_modules/scheduler/.+\\\\.js$',\n    // Metro replaces `require()` with a different method,\n    // we want to omit this method from the stack trace.\n    // This is akin to most React tooling.\n    '/metro/.*/polyfills/require.js$',\n    // Hide frames related to a fast refresh.\n    '/metro/.*/lib/bundle-modules/.+\\\\.js$',\n    '/metro/.*/lib/bundle-modules/.+\\\\.js$',\n    'node_modules/react-native/Libraries/Utilities/HMRClient.js$',\n    'node_modules/eventemitter3/index.js',\n    'node_modules/event-target-shim/dist/.+\\\\.js$',\n    // Ignore the log forwarder used in the Expo Go app\n    '/expo/build/environment/react-native-logs.fx.js$',\n    '/src/environment/react-native-logs.fx.ts$',\n    '/expo/build/logs/RemoteConsole.js$',\n    // Improve errors thrown by invariant (ex: `Invariant Violation: \"main\" has not been registered`).\n    'node_modules/invariant/.+\\\\.js$',\n    // Remove babel runtime additions\n    'node_modules/regenerator-runtime/.+\\\\.js$',\n    // Remove react native setImmediate ponyfill\n    'node_modules/promise/setimmediate/.+\\\\.js$',\n    // Babel helpers that implement language features\n    'node_modules/@babel/runtime/.+\\\\.js$',\n    // Block native code invocations\n    `\\\\[native code\\\\]`,\n  ].join('|')\n);\n\nexport interface DefaultConfigOptions {\n  target?: ProjectTarget;\n  mode?: 'exotic';\n}\n\nfunction readIsLegacyImportsEnabled(projectRoot: string): boolean {\n  const config = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n  return isLegacyImportsEnabled(config.exp);\n}\n\nfunction getProjectBabelConfigFile(projectRoot: string): string | undefined {\n  return (\n    resolveFrom.silent(projectRoot, './babel.config.js') ||\n    resolveFrom.silent(projectRoot, './.babelrc') ||\n    resolveFrom.silent(projectRoot, './.babelrc.js')\n  );\n}\n\nlet hasWarnedAboutExotic = false;\n\nexport function getDefaultConfig(\n  projectRoot: string,\n  options: DefaultConfigOptions = {}\n): MetroConfig.InputConfigT {\n  const isExotic = options.mode === 'exotic' || EXPO_USE_EXOTIC;\n\n  if (isExotic && !hasWarnedAboutExotic) {\n    hasWarnedAboutExotic = true;\n    console.log(\n      chalk.gray(\n        `\\u203A Unstable feature ${chalk.bold`EXPO_USE_EXOTIC`} is enabled. Bundling may not work as expected, and is subject to breaking changes.`\n      )\n    );\n  }\n  const MetroConfig = importMetroConfigFromProject(projectRoot);\n\n  const reactNativePath = path.dirname(resolveFrom(projectRoot, 'react-native/package.json'));\n\n  try {\n    // Set the `EXPO_METRO_CACHE_KEY_VERSION` variable for use in the custom babel transformer.\n    // This hack is used because there doesn't appear to be anyway to resolve\n    // `babel-preset-fbjs` relative to the project root later (in `metro-expo-babel-transformer`).\n    const babelPresetFbjsPath = resolveFrom(projectRoot, 'babel-preset-fbjs/package.json');\n    process.env.EXPO_METRO_CACHE_KEY_VERSION = String(require(babelPresetFbjsPath).version);\n  } catch {\n    // noop -- falls back to a hardcoded value.\n  }\n\n  let hashAssetFilesPath;\n  try {\n    hashAssetFilesPath = resolveFrom(projectRoot, 'expo-asset/tools/hashAssetFiles');\n  } catch {\n    // TODO: we should warn/throw an error if the user has expo-updates installed but does not\n    // have hashAssetFiles available, or if the user is in managed workflow and does not have\n    // hashAssetFiles available. but in a bare app w/o expo-updates, just using dev-client,\n    // it is not needed\n  }\n\n  const isLegacy = readIsLegacyImportsEnabled(projectRoot);\n  // Deprecated -- SDK 41 --\n  if (options.target) {\n    if (!isLegacy) {\n      console.warn(\n        chalk.yellow(\n          `The target option is deprecated. Learn more: http://expo.fyi/expo-extension-migration`\n        )\n      );\n      delete options.target;\n    }\n  } else if (process.env.EXPO_TARGET) {\n    console.error(\n      'EXPO_TARGET is deprecated. Learn more: http://expo.fyi/expo-extension-migration'\n    );\n    if (isLegacy) {\n      // EXPO_TARGET is used by @expo/metro-config to determine the target when getDefaultConfig is\n      // called from metro.config.js.\n      // @ts-ignore\n      options.target = process.env.EXPO_TARGET;\n    }\n  } else if (isLegacy) {\n    // Fall back to guessing based on the project structure in legacy mode.\n    options.target = getDefaultTarget(projectRoot);\n  }\n\n  if (!options.target) {\n    // Default to bare -- no .expo extension.\n    options.target = 'bare';\n  }\n  // End deprecated -- SDK 41 --\n\n  const { target } = options;\n  if (!(target === 'managed' || target === 'bare')) {\n    throw new Error(\n      `Invalid target: '${target}'. Debug info: \\n${JSON.stringify(\n        {\n          'options.target': options.target,\n          default: getDefaultTarget(projectRoot),\n        },\n        null,\n        2\n      )}`\n    );\n  }\n  const sourceExtsConfig = { isTS: true, isReact: true, isModern: false };\n  const sourceExts =\n    target === 'bare'\n      ? getBareExtensions([], sourceExtsConfig)\n      : getManagedExtensions([], sourceExtsConfig);\n\n  if (isExotic) {\n    // Add support for cjs (without platform extensions).\n    sourceExts.push('cjs');\n  }\n\n  const babelConfigPath = getProjectBabelConfigFile(projectRoot);\n  const isCustomBabelConfigDefined = !!babelConfigPath;\n\n  const resolverMainFields: string[] = [];\n\n  // Disable `react-native` in exotic mode, since library authors\n  // use it to ship raw application code to the project.\n  if (!isExotic) {\n    resolverMainFields.push('react-native');\n  }\n  resolverMainFields.push('browser', 'main');\n\n  if (EXPO_DEBUG) {\n    console.log();\n    console.log(`Expo Metro config:`);\n    console.log(`- Bundler target: ${target}`);\n    console.log(`- Legacy: ${isLegacy}`);\n    console.log(`- Extensions: ${sourceExts.join(', ')}`);\n    console.log(`- React Native: ${reactNativePath}`);\n    console.log(`- Babel config: ${babelConfigPath || 'babel-preset-expo (default)'}`);\n    console.log(`- Resolver Fields: ${resolverMainFields.join(', ')}`);\n    console.log(`- Exotic: ${isExotic}`);\n    console.log();\n  }\n  const {\n    // Remove the default reporter which metro always resolves to be the react-native-community/cli reporter.\n    // This prints a giant React logo which is less accessible to users on smaller terminals.\n    reporter,\n    ...metroDefaultValues\n  } = MetroConfig.getDefaultConfig.getDefaultValues(projectRoot);\n\n  // Merge in the default config from Metro here, even though loadConfig uses it as defaults.\n  // This is a convenience for getDefaultConfig use in metro.config.js, e.g. to modify assetExts.\n  return MetroConfig.mergeConfig(metroDefaultValues, {\n    resolver: {\n      resolverMainFields,\n      platforms: ['ios', 'android', 'native'],\n      sourceExts,\n    },\n    serializer: {\n      getModulesRunBeforeMainModule: () => [\n        require.resolve(path.join(reactNativePath, 'Libraries/Core/InitializeCore')),\n        // TODO: Bacon: load Expo side-effects\n      ],\n      getPolyfills: () => require(path.join(reactNativePath, 'rn-get-polyfills'))(),\n    },\n    server: {\n      port: Number(process.env.RCT_METRO_PORT) || 8081,\n    },\n    symbolicator: {\n      customizeFrame: frame => {\n        let collapse = Boolean(frame.file && INTERNAL_CALLSITES_REGEX.test(frame.file));\n\n        if (!collapse) {\n          // This represents the first frame of the stacktrace.\n          // Often this looks like: `__r(0);`.\n          // The URL will also be unactionable in the app and therefore not very useful to the developer.\n          if (\n            frame.column === 3 &&\n            frame.methodName === 'global code' &&\n            frame.file?.match(/^https?:\\/\\//g)\n          ) {\n            collapse = true;\n          }\n        }\n\n        return { ...(frame || {}), collapse };\n      },\n    },\n    transformer: {\n      allowOptionalDependencies: true,\n      babelTransformerPath: isExotic\n        ? require.resolve('./transformer/metro-expo-exotic-babel-transformer')\n        : isCustomBabelConfigDefined\n        ? // If the user defined a babel config file in their project,\n          // then use the default transformer.\n          // Try to use the project copy before falling back on the global version\n          resolveFrom.silent(projectRoot, 'metro-react-native-babel-transformer')\n        : // Otherwise, use a custom transformer that uses `babel-preset-expo` by default for projects.\n          require.resolve('./transformer/metro-expo-babel-transformer'),\n      assetRegistryPath: 'react-native/Libraries/Image/AssetRegistry',\n      assetPlugins: hashAssetFilesPath ? [hashAssetFilesPath] : [],\n    },\n  });\n}\n\nexport interface LoadOptions {\n  config?: string;\n  maxWorkers?: number;\n  port?: number;\n  reporter?: Reporter;\n  resetCache?: boolean;\n  target?: ProjectTarget;\n}\n\nexport async function loadAsync(\n  projectRoot: string,\n  { reporter, target, ...metroOptions }: LoadOptions = {}\n): Promise<MetroConfig.ConfigT> {\n  let defaultConfig = getDefaultConfig(projectRoot, { target });\n  if (reporter) {\n    defaultConfig = { ...defaultConfig, reporter };\n  }\n  const MetroConfig = importMetroConfigFromProject(projectRoot);\n  return await MetroConfig.loadConfig(\n    { cwd: projectRoot, projectRoot, ...metroOptions },\n    defaultConfig\n  );\n}\n"]}