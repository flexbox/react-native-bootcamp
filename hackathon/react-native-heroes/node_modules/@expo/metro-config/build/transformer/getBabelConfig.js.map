{"version":3,"file":"getBabelConfig.js","sourceRoot":"","sources":["../../src/transformer/getBabelConfig.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Expo.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Forks the default metro-react-native-babel-transformer and adds support for known transforms.\n */\n\nimport type { PluginItem as BabelPlugins, PluginItem } from '@babel/core';\nimport fs from 'fs';\nimport type { BabelTransformerOptions } from 'metro-babel-transformer';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\n\n/**\n * Return a memoized function that checks for the existence of a\n * project level .babelrc file, and if it doesn't exist, reads the\n * default RN babelrc file and uses that.\n */\nconst getBabelRC = (function () {\n  let babelRC: {\n    // `any` to avoid flow type mismatch with Babel 7's internal type of\n    // `Array<string>` even though it correctly accepts the usage below.\n    presets?: any;\n    extends?: string;\n    plugins: BabelPlugins;\n  } | null = null;\n\n  return function _getBabelRC(projectRoot: string, options: BabelTransformerOptions) {\n    if (babelRC != null) {\n      return babelRC;\n    }\n\n    babelRC = { plugins: [] };\n\n    // Let's look for a babel config file in the project root.\n    // TODO look into adding a command line option to specify this location\n    let projectBabelRCPath;\n\n    // .babelrc\n    if (projectRoot) {\n      projectBabelRCPath = path.resolve(projectRoot, '.babelrc');\n    }\n\n    if (projectBabelRCPath) {\n      // .babelrc.js\n      if (!fs.existsSync(projectBabelRCPath)) {\n        projectBabelRCPath = path.resolve(projectRoot, '.babelrc.js');\n      }\n\n      // babel.config.js\n      if (!fs.existsSync(projectBabelRCPath)) {\n        projectBabelRCPath = path.resolve(projectRoot, 'babel.config.js');\n      }\n\n      // If we found a babel config file, extend our config off of it\n      // otherwise the default config will be used\n      if (fs.existsSync(projectBabelRCPath)) {\n        babelRC.extends = projectBabelRCPath;\n      }\n    }\n\n    // If a babel config file doesn't exist in the project then\n    // the default preset for react-native will be used instead.\n    if (!babelRC.extends) {\n      const { experimentalImportSupport, ...presetOptions } = options;\n\n      // Use `babel-preset-expo` instead of `metro-react-native-babel-preset`.\n      const presetPath =\n        resolveFrom.silent(projectRoot, 'babel-preset-expo') ??\n        resolveFrom.silent(projectRoot, 'metro-react-native-babel-preset') ??\n        require.resolve('babel-preset-expo');\n\n      babelRC.presets = [\n        [\n          require(presetPath),\n          {\n            // Default to React 17 automatic JSX transform.\n            jsxRuntime: 'automatic',\n            ...presetOptions,\n            disableImportExportTransform: experimentalImportSupport,\n            enableBabelRuntime: options.enableBabelRuntime,\n          },\n        ],\n      ];\n    }\n\n    return babelRC;\n  };\n})();\n\n/**\n * Given a filename and options, build a Babel\n * config object with the appropriate plugins.\n */\nexport function getBabelConfig(\n  filename: string,\n  options: BabelTransformerOptions,\n  plugins: BabelPlugins = []\n) {\n  const babelRC = getBabelRC(options.projectRoot, options);\n\n  const extraConfig = {\n    babelrc: typeof options.enableBabelRCLookup === 'boolean' ? options.enableBabelRCLookup : true,\n    code: false,\n    filename,\n    highlightCode: true,\n  };\n\n  const config: any = { ...babelRC, ...extraConfig };\n\n  // Add extra plugins\n  const extraPlugins: (string | PluginItem)[] = [];\n\n  // TODO: This probably can be removed\n  if (options.inlineRequires) {\n    const inlineRequiresPlugin = resolveFrom(\n      options.projectRoot,\n      'babel-preset-fbjs/plugins/inline-requires'\n    );\n    extraPlugins.push(inlineRequiresPlugin);\n  }\n\n  config.plugins = extraPlugins.concat(config.plugins, plugins);\n\n  if (options.dev && options.hot) {\n    // Note: this intentionally doesn't include the path separator because\n    // I'm not sure which one it should use on Windows, and false positives\n    // are unlikely anyway. If you later decide to include the separator,\n    // don't forget that the string usually *starts* with \"node_modules\" so\n    // the first one often won't be there.\n    // TODO: Support monorepos\n    const mayContainEditableReactComponents = filename.indexOf('node_modules') === -1;\n\n    if (mayContainEditableReactComponents) {\n      if (!config.plugins) {\n        config.plugins = [];\n      }\n      // Add react refresh runtime.\n      // NOTICE: keep in sync with 'metro-react-native-babel-preset/src/configs/hmr'.\n      config.plugins.push(resolveFrom.silent(options.projectRoot, 'react-refresh/babel'));\n    }\n  }\n\n  return { ...babelRC, ...config };\n}\n"]}