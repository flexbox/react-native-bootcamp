{"version":3,"file":"createExoticTransformer.js","sourceRoot":"","sources":["../../src/transformer/createExoticTransformer.ts"],"names":[],"mappings":";;;AAGA,mDAKyB;AACzB,6EAAmF;AACnF,+CAA4C;AAE5C;;;;;;;;;;;;;;GAcG;AACH,SAAgB,uBAAuB,CAAC,EACtC,gBAAgB,EAChB,gBAAgB,GAIjB;IACC,IAAI,CAAC,gBAAgB,EAAE;QACrB,gBAAgB,GAAG,CAAC,cAAc,CAAC,CAAC;KACrC;IACD,8CAA8C;IAC9C,MAAM,iBAAiB,GAAG,mCAAmB,CAAC,EAAE,OAAO,EAAE,gBAAgB,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC;IAE5F,6DAA6D;IAC7D,8DAA8D;IAC9D,MAAM,2BAA2B,GAAG,mCAAmB,CAAC;QACtD,SAAS,EAAE;YACT,sBAAsB;YACtB,sHAAsH;YACtH,SAAS;YACT,qDAAqD;YACrD,oBAAoB;YACpB,GAAG,CAAC,gBAAgB,IAAI,EAAE,CAAC;SAC5B;QACD,OAAO,EAAE,gBAAgB;KAC1B,CAAC,CAAC;IAEH,MAAM,SAAS,GAAG,uDAA0B,CAAC;QAC3C,4DAA4D;QAC5D,4FAA4F;QAC5F,WAAW,CAAC,EAAE,QAAQ,EAAE;YACtB,8DAA8D;YAC9D,OAAO,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,QAAQ,CAAC;gBACpF,CAAC,CAAC,QAAQ;gBACV,CAAC,CAAC,KAAK,CAAC;QACZ,CAAC;QAED,kEAAkE;QAClE,0EAA0E;QAC1E,KAAK,EAAE;YACL,0DAA0D;YAC1D;gBACE,IAAI,EAAE,KAAK;gBACX,IAAI,EAAE,QAAQ;gBACd,IAAI,EAAE,mCAAmB,CAAC,EAAE,SAAS,EAAE,CAAC,kBAAkB,CAAC,EAAE,OAAO,EAAE,gBAAgB,EAAE,CAAC;gBACzF,SAAS,EAAE,oCAAO,CAAC,iBAAiB;gBACpC,IAAI,EAAE,IAAI;aACX;YACD,qEAAqE;YACrE;gBACE,IAAI,EAAE,cAAc;gBACpB,IAAI,EAAE,QAAQ;gBACd,IAAI,EAAE,wCAAwB,CAAC,EAAE,OAAO,EAAE,gBAAgB,EAAE,CAAC;gBAC7D,SAAS,EAAE,oCAAO,CAAC,iBAAiB;gBACpC,IAAI,EAAE,IAAI;aACX;YACD,iEAAiE;YACjE;gBACE,IAAI,EAAE,aAAa;gBACnB,IAAI,EAAE,QAAQ;gBACd,IAAI,EAAE,iCAAiB,CAAC,EAAE,OAAO,EAAE,gBAAgB,EAAE,CAAC;gBACtD,SAAS,EAAE,oCAAO,CAAC,UAAU;gBAC7B,IAAI,EAAE,IAAI;aACX;YACD,gGAAgG;YAChG;gBACE,IAAI,EAAE,SAAS;gBACf,IAAI,EAAE,QAAQ;gBACd,IAAI,EAAE,2CAA2B,CAAC;oBAChC,OAAO,EAAE,gBAAgB;iBAC1B,CAAC;gBACF,SAAS,EAAE,oCAAO,CAAC,kBAAkB;gBACrC,IAAI,EAAE,IAAI;aACX;YACD,gGAAgG;YAChG,+EAA+E;YAC/E,yCAAyC;YACzC,+EAA+E;YAC/E,8DAA8D;YAC9D;gBACE,IAAI,EAAE,aAAa;gBACnB,IAAI,EAAE,QAAQ;gBACd,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI;gBAChB,SAAS,EAAE,oCAAO,CAAC,iBAAiB;aACrC;YACD,0EAA0E;YAC1E,wFAAwF;YACxF,oDAAoD;YACpD;gBACE,IAAI,EAAE,OAAO;gBACb,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI;gBAChB,SAAS,EAAE,oCAAO,CAAC,GAAG;aACvB;SACF;KACF,CAAC,CAAC;IAEH,OAAO;QACL,SAAS;QACT,WAAW,EAAX,yBAAW;KACZ,CAAC;AACJ,CAAC;AApGD,0DAoGC","sourcesContent":["// Copyright 2021-present 650 Industries (Expo). All rights reserved.\nimport { BabelTransformer } from 'metro-babel-transformer';\n\nimport {\n  createExpoMatcher,\n  createKnownCommunityMatcher,\n  createModuleMatcher,\n  createReactNativeMatcher,\n} from './createMatcher';\nimport { createMultiRuleTransformer, loaders } from './createMultiRuleTransformer';\nimport { getCacheKey } from './getCacheKey';\n\n/**\n * Create an experimental multi-rule transformer for a React Native app.\n *\n * @example\n * ```\n * module.exports = createExoticTransformer({\n *    nodeModulesPaths: ['react-native'],\n *    transpileModules: ['@stripe/stripe-react-native'],\n * });\n * ```\n *\n * @param props.nodeModulesPaths paths to node_modules folders, relative to project root. Default: `['node_modules']`\n * @param props.transpileModules matchers for module names that should be transpiled using the project Babel configuration. Example: `['@stripe/stripe-react-native']`\n * @returns a Metro `transformer` function and default `getCacheKey` function.\n */\nexport function createExoticTransformer({\n  nodeModulesPaths,\n  transpileModules,\n}: {\n  nodeModulesPaths?: string[];\n  transpileModules?: string[];\n}): BabelTransformer {\n  if (!nodeModulesPaths) {\n    nodeModulesPaths = ['node_modules'];\n  }\n  // Match any node modules, or monorepo module.\n  const nodeModuleMatcher = createModuleMatcher({ folders: nodeModulesPaths, moduleIds: [] });\n\n  // Match node modules which are so oddly written that we must\n  // transpile them with every possible option (most expensive).\n  const impossibleNodeModuleMatcher = createModuleMatcher({\n    moduleIds: [\n      // victory is too wild\n      // SyntaxError in ../../node_modules/victory-native/lib/components/victory-primitives/bar.js: Missing semicolon. (9:1)\n      'victory',\n      // vector icons has some hidden issues that break NCL\n      '@expo/vector-icons',\n      ...(transpileModules || []),\n    ],\n    folders: nodeModulesPaths,\n  });\n\n  const transform = createMultiRuleTransformer({\n    // Specify which rules to use on a per-file basis, basically\n    // this is used to determine which modules are node modules, and which are application code.\n    getRuleType({ filename }) {\n      // Is a node module, and is not one of the impossible modules.\n      return nodeModuleMatcher.test(filename) && !impossibleNodeModuleMatcher.test(filename)\n        ? 'module'\n        : 'app';\n    },\n\n    // Order is very important, we use wild card matchers to transpile\n    // \"every unhandled node module\" and \"every unhandled application module\".\n    rules: [\n      // Match bob compiler modules, use the passthrough loader.\n      {\n        name: 'bob',\n        type: 'module',\n        test: createModuleMatcher({ moduleIds: ['.*/lib/commonjs/'], folders: nodeModulesPaths }),\n        transform: loaders.passthroughModule,\n        warn: true,\n      },\n      // Match React Native modules, convert them statically using sucrase.\n      {\n        name: 'react-native',\n        type: 'module',\n        test: createReactNativeMatcher({ folders: nodeModulesPaths }),\n        transform: loaders.reactNativeModule,\n        warn: true,\n      },\n      // Match Expo SDK modules, convert them statically using sucrase.\n      {\n        name: 'expo-module',\n        type: 'module',\n        test: createExpoMatcher({ folders: nodeModulesPaths }),\n        transform: loaders.expoModule,\n        warn: true,\n      },\n      // Match known problematic modules, convert them statically using an expensive, dynamic sucrase.\n      {\n        name: 'sucrase',\n        type: 'module',\n        test: createKnownCommunityMatcher({\n          folders: nodeModulesPaths,\n        }),\n        transform: loaders.untranspiledModule,\n        warn: true,\n      },\n      // Pass through any unhandled node modules as passthrough, this is where the most savings occur.\n      // Ideally, you want your project to pass all node modules through this loader.\n      // This should be the last \"module\" rule.\n      // Message library authors and ask them to ship their modules as pre-transpiled\n      // commonjs, to improve the development speed of your project.\n      {\n        name: 'skip-module',\n        type: 'module',\n        test: () => true,\n        transform: loaders.passthroughModule,\n      },\n      // All application code should be transpiled with the user's babel preset,\n      // this is the most expensive operation but provides the most customization to the user.\n      // The goal is to use this as sparingly as possible.\n      {\n        name: 'babel',\n        test: () => true,\n        transform: loaders.app,\n      },\n    ],\n  });\n\n  return {\n    transform,\n    getCacheKey,\n  };\n}\n"]}