{"version":3,"sources":["../../src/ios/Bitcode.ts"],"names":["withBitcode","config","modResults","setBitcodeWithConfig","project","withCustomBitcode","bitcode","setBitcode","getBitcode","ios","isDefaultBehavior","targetName","undefined","isBitcodeEnabled","configs","Object","entries","pbxXCBuildConfigurationSection","filter","isNotComment","hasConfiguration","find","configuration","name","addBuildProperty","names","Set","map","sort","join"],"mappings":";;;;;;;;;;AAIA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIA;AACA;AACA;AACA;AACO,MAAMA,WAAyB,GAAGC,MAAM,IAAI;AACjD,SAAO,oCAAiBA,MAAjB,EAAyB,MAAMA,MAAN,IAAgB;AAC9CA,IAAAA,MAAM,CAACC,UAAP,GAAoB,MAAMC,oBAAoB,CAACF,MAAD,EAAS;AACrDG,MAAAA,OAAO,EAAEH,MAAM,CAACC;AADqC,KAAT,CAA9C;AAGA,WAAOD,MAAP;AACD,GALM,CAAP;AAMD,CAPM;AASP;AACA;AACA;AACA;AACA;AACA;;;;;AACO,MAAMI,iBAAwC,GAAG,CAACJ,MAAD,EAASK,OAAT,KAAqB;AAC3E,SAAO,oCAAiBL,MAAjB,EAAyB,MAAMA,MAAN,IAAgB;AAC9CA,IAAAA,MAAM,CAACC,UAAP,GAAoB,MAAMK,UAAU,CAACD,OAAD,EAAU;AAC5CF,MAAAA,OAAO,EAAEH,MAAM,CAACC;AAD4B,KAAV,CAApC;AAGA,WAAOD,MAAP;AACD,GALM,CAAP;AAMD,CAPM;AASP;AACA;AACA;;;;;AACO,SAASO,UAAT,CAAoBP,MAApB,EAA8D;AAAA;;AACnE,wBAAOA,MAAM,CAACQ,GAAd,gDAAO,YAAYH,OAAnB;AACD;AAED;AACA;AACA;;;AACO,SAASH,oBAAT,CACLF,MADK,EAEL;AAAEG,EAAAA;AAAF,CAFK,EAGS;AACd,QAAME,OAAO,GAAGE,UAAU,CAACP,MAAD,CAA1B;AACA,SAAOM,UAAU,CAACD,OAAD,EAAU;AAAEF,IAAAA;AAAF,GAAV,CAAjB;AACD;AAED;AACA;AACA;;;AACO,SAASG,UAAT,CAAoBD,OAApB,EAAsC;AAAEF,EAAAA;AAAF,CAAtC,EAA4F;AACjG,QAAMM,iBAAiB,GAAGJ,OAAO,IAAI,IAArC,CADiG,CAEjG;;AACA,MAAII,iBAAJ,EAAuB;AACrB,WAAON,OAAP;AACD;;AAED,QAAMO,UAAU,GAAG,OAAOL,OAAP,KAAmB,QAAnB,GAA8BA,OAA9B,GAAwCM,SAA3D;AACA,QAAMC,gBAAgB,GAAG,CAAC,CAACP,OAA3B;;AACA,MAAIK,UAAJ,EAAgB;AACd;AACA,UAAMG,OAAO,GAAGC,MAAM,CAACC,OAAP,CAAeZ,OAAO,CAACa,8BAAR,EAAf,EAAyDC,MAAzD,CAAgEC,yBAAhE,CAAhB;AACA,UAAMC,gBAAgB,GAAGN,OAAO,CAACO,IAAR,CAAa,CAAC,GAAGC,aAAH,CAAD,KAAuBA,aAAa,CAACC,IAAd,KAAuBZ,UAA3D,CAAzB;;AACA,QAAIS,gBAAJ,EAAsB;AACpB;AACAhB,MAAAA,OAAO,CAACoB,gBAAR,CAAyB,gBAAzB,EAA2C,IAA3C;AACD,KAHD,MAGO;AACL,YAAMC,KAAK,GAAG,CACZ;AACA,SAAG,IAAIC,GAAJ,CAAQZ,OAAO,CAACa,GAAR,CAAY,CAAC,GAAGL,aAAH,CAAD,KAAwB,IAAGA,aAAa,CAACC,IAAK,GAA1D,CAAR,CAFS,EAGZK,IAHY,EAAd;AAIA,qCACE,aADF,EAEG,2BAA0BjB,UAAW,uBAAsBc,KAAK,CAACI,IAAN,CAAW,IAAX,CAAiB,GAF/E;AAID;AACF;;AAEDzB,EAAAA,OAAO,CAACoB,gBAAR,CAAyB,gBAAzB,EAA2CX,gBAAgB,GAAG,KAAH,GAAW,IAAtE,EAA4EF,UAA5E;AAEA,SAAOP,OAAP;AACD","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withXcodeProject } from '../plugins/ios-plugins';\nimport { addWarningIOS } from '../utils/warnings';\nimport { isNotComment } from './utils/Xcodeproj';\n\ntype Bitcode = NonNullable<ExpoConfig['ios']>['bitcode'];\n\n/**\n * Plugin to set a bitcode preference for the Xcode project\n * based on the project's Expo config `ios.bitcode` value.\n */\nexport const withBitcode: ConfigPlugin = config => {\n  return withXcodeProject(config, async config => {\n    config.modResults = await setBitcodeWithConfig(config, {\n      project: config.modResults,\n    });\n    return config;\n  });\n};\n\n/**\n * Plugin to set a custom bitcode preference for the Xcode project.\n * Does not read from the Expo config `ios.bitcode`.\n *\n * @param bitcode custom bitcode setting.\n */\nexport const withCustomBitcode: ConfigPlugin<Bitcode> = (config, bitcode) => {\n  return withXcodeProject(config, async config => {\n    config.modResults = await setBitcode(bitcode, {\n      project: config.modResults,\n    });\n    return config;\n  });\n};\n\n/**\n * Get the bitcode preference from the Expo config.\n */\nexport function getBitcode(config: Pick<ExpoConfig, 'ios'>): Bitcode {\n  return config.ios?.bitcode;\n}\n\n/**\n * Enable or disable the `ENABLE_BITCODE` property of the project configurations.\n */\nexport function setBitcodeWithConfig(\n  config: Pick<ExpoConfig, 'ios'>,\n  { project }: { project: XcodeProject }\n): XcodeProject {\n  const bitcode = getBitcode(config);\n  return setBitcode(bitcode, { project });\n}\n\n/**\n * Enable or disable the `ENABLE_BITCODE` property.\n */\nexport function setBitcode(bitcode: Bitcode, { project }: { project: XcodeProject }): XcodeProject {\n  const isDefaultBehavior = bitcode == null;\n  // If the value is undefined, then do nothing.\n  if (isDefaultBehavior) {\n    return project;\n  }\n\n  const targetName = typeof bitcode === 'string' ? bitcode : undefined;\n  const isBitcodeEnabled = !!bitcode;\n  if (targetName) {\n    // Assert if missing\n    const configs = Object.entries(project.pbxXCBuildConfigurationSection()).filter(isNotComment);\n    const hasConfiguration = configs.find(([, configuration]) => configuration.name === targetName);\n    if (hasConfiguration) {\n      // If targetName is defined then disable bitcode everywhere.\n      project.addBuildProperty('ENABLE_BITCODE', 'NO');\n    } else {\n      const names = [\n        // Remove duplicates, wrap in double quotes, and sort alphabetically.\n        ...new Set(configs.map(([, configuration]) => `\"${configuration.name}\"`)),\n      ].sort();\n      addWarningIOS(\n        'ios.bitcode',\n        `No configuration named \"${targetName}\". Expected one of: ${names.join(', ')}.`\n      );\n    }\n  }\n\n  project.addBuildProperty('ENABLE_BITCODE', isBitcodeEnabled ? 'YES' : 'NO', targetName);\n\n  return project;\n}\n"],"file":"Bitcode.js"}