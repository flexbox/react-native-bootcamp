{"version":3,"sources":["../../src/ios/RootViewBackgroundColor.ts"],"names":["BACKGROUND_COLOR_KEY","withRootViewBackgroundColor","config","modResults","setRootViewBackgroundColor","infoPlist","backgroundColor","getRootViewBackgroundColor","color","Error","ios"],"mappings":";;;;;;;;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAJA;AAOA;AACA,MAAMA,oBAAoB,GAAG,4BAA7B;;AAEO,MAAMC,2BAAyC,GAAGC,MAAM,IAAI;AACjEA,EAAAA,MAAM,GAAG,iCAAcA,MAAd,EAAsBA,MAAM,IAAI;AACvCA,IAAAA,MAAM,CAACC,UAAP,GAAoBC,0BAA0B,CAACF,MAAD,EAASA,MAAM,CAACC,UAAhB,CAA9C;AACA,WAAOD,MAAP;AACD,GAHQ,CAAT;AAIA,SAAOA,MAAP;AACD,CANM;;;;AAQA,SAASE,0BAAT,CACLF,MADK,EAELG,SAFK,EAGM;AACX,QAAMC,eAAe,GAAGC,0BAA0B,CAACL,MAAD,CAAlD;;AACA,MAAI,CAACI,eAAL,EAAsB;AACpB,WAAOD,SAAS,CAACL,oBAAD,CAAhB;AACD,GAFD,MAEO;AACL,QAAIQ,KAAK,GAAG,+BAAeF,eAAf,CAAZ;;AACA,QAAI,CAACE,KAAL,EAAY;AACV,YAAM,IAAIC,KAAJ,CAAU,iCAAV,CAAN;AACD;;AACDD,IAAAA,KAAK,GAAG,CAAEA,KAAK,IAAI,EAAV,GAAiBA,KAAK,KAAK,CAA5B,MAAoC,CAA5C;AACAH,IAAAA,SAAS,CAACL,oBAAD,CAAT,GAAkCQ,KAAlC;AACD;;AACD,SAAOH,SAAP;AACD;;AAEM,SAASE,0BAAT,CAAoCL,MAApC,EAAyF;AAAA;;AAC9F,SAAO,gBAAAA,MAAM,CAACQ,GAAP,4DAAYJ,eAAZ,KAA+BJ,MAAM,CAACI,eAAtC,IAAyD,IAAhE;AACD","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n// @ts-ignore: uses flow\nimport normalizeColor from '@react-native/normalize-color';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withInfoPlist } from '../plugins/ios-plugins';\nimport { InfoPlist } from './IosConfig.types';\n\n// Maps to the template AppDelegate.m\nconst BACKGROUND_COLOR_KEY = 'RCTRootViewBackgroundColor';\n\nexport const withRootViewBackgroundColor: ConfigPlugin = config => {\n  config = withInfoPlist(config, config => {\n    config.modResults = setRootViewBackgroundColor(config, config.modResults);\n    return config;\n  });\n  return config;\n};\n\nexport function setRootViewBackgroundColor(\n  config: Pick<ExpoConfig, 'backgroundColor' | 'ios'>,\n  infoPlist: InfoPlist\n): InfoPlist {\n  const backgroundColor = getRootViewBackgroundColor(config);\n  if (!backgroundColor) {\n    delete infoPlist[BACKGROUND_COLOR_KEY];\n  } else {\n    let color = normalizeColor(backgroundColor);\n    if (!color) {\n      throw new Error('Invalid background color on iOS');\n    }\n    color = ((color << 24) | (color >>> 8)) >>> 0;\n    infoPlist[BACKGROUND_COLOR_KEY] = color;\n  }\n  return infoPlist;\n}\n\nexport function getRootViewBackgroundColor(config: Pick<ExpoConfig, 'ios' | 'backgroundColor'>) {\n  return config.ios?.backgroundColor || config.backgroundColor || null;\n}\n"],"file":"RootViewBackgroundColor.js"}