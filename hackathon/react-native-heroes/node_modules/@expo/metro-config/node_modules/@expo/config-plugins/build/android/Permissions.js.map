{"version":3,"sources":["../../src/android/Permissions.ts"],"names":["USES_PERMISSION","withPermissions","config","permissions","Array","isArray","filter","Boolean","android","Set","concat","modResults","setAndroidPermissions","prefixAndroidPermissionsIfNecessary","map","permission","includes","getAndroidPermissions","androidManifest","providedPermissions","permissionsToAdd","manifest","hasOwnProperty","manifestPermissions","forEach","isPermissionAlreadyRequested","addPermissionToManifest","some","e","$","push","removePermissions","permissionNames","targetNames","ensurePermissionNameFormat","nextPermissions","attribute","value","name","addPermission","permissionName","usesPermissions","ensurePermissions","getPermissions","results","targetName","ensurePermission","com","split","pop","toUpperCase","join","permissionObject"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAndroidManifest } from '../plugins/android-plugins';\nimport { AndroidManifest, ManifestUsesPermission } from './Manifest';\n\nconst USES_PERMISSION = 'uses-permission';\n\nexport const withPermissions: ConfigPlugin<string[] | void> = (config, permissions) => {\n  if (Array.isArray(permissions)) {\n    permissions = permissions.filter(Boolean);\n    if (!config.android) config.android = {};\n    if (!config.android.permissions) config.android.permissions = [];\n    config.android.permissions = [\n      // @ts-ignore\n      ...new Set(config.android.permissions.concat(permissions)),\n    ];\n  }\n  return withAndroidManifest(config, async config => {\n    config.modResults = await setAndroidPermissions(config, config.modResults);\n    return config;\n  });\n};\n\nfunction prefixAndroidPermissionsIfNecessary(permissions: string[]): string[] {\n  return permissions.map(permission => {\n    if (!permission.includes('.')) {\n      return `android.permission.${permission}`;\n    }\n    return permission;\n  });\n}\n\nexport function getAndroidPermissions(config: Pick<ExpoConfig, 'android'>): string[] {\n  return config.android?.permissions ?? [];\n}\n\nexport function setAndroidPermissions(\n  config: Pick<ExpoConfig, 'android'>,\n  androidManifest: AndroidManifest\n) {\n  const permissions = getAndroidPermissions(config);\n  const providedPermissions = prefixAndroidPermissionsIfNecessary(permissions);\n  const permissionsToAdd = [...providedPermissions];\n\n  if (!androidManifest.manifest.hasOwnProperty('uses-permission')) {\n    androidManifest.manifest['uses-permission'] = [];\n  }\n  // manifest.manifest['uses-permission'] = [];\n\n  const manifestPermissions = androidManifest.manifest['uses-permission'] ?? [];\n\n  permissionsToAdd.forEach(permission => {\n    if (!isPermissionAlreadyRequested(permission, manifestPermissions)) {\n      addPermissionToManifest(permission, manifestPermissions);\n    }\n  });\n\n  return androidManifest;\n}\n\nexport function isPermissionAlreadyRequested(\n  permission: string,\n  manifestPermissions: ManifestUsesPermission[]\n): boolean {\n  return manifestPermissions.some(e => e.$['android:name'] === permission);\n}\n\nexport function addPermissionToManifest(\n  permission: string,\n  manifestPermissions: ManifestUsesPermission[]\n) {\n  manifestPermissions.push({ $: { 'android:name': permission } });\n  return manifestPermissions;\n}\n\nexport function removePermissions(androidManifest: AndroidManifest, permissionNames?: string[]) {\n  const targetNames = permissionNames ? permissionNames.map(ensurePermissionNameFormat) : null;\n  const permissions = androidManifest.manifest[USES_PERMISSION] || [];\n  const nextPermissions = [];\n  for (const attribute of permissions) {\n    if (targetNames) {\n      // @ts-ignore: name isn't part of the type\n      const value = attribute.$['android:name'] || attribute.$.name;\n      if (!targetNames.includes(value)) {\n        nextPermissions.push(attribute);\n      }\n    }\n  }\n\n  androidManifest.manifest[USES_PERMISSION] = nextPermissions;\n}\n\nexport function addPermission(androidManifest: AndroidManifest, permissionName: string): void {\n  const usesPermissions: ManifestUsesPermission[] = androidManifest.manifest[USES_PERMISSION] || [];\n  usesPermissions.push({\n    $: { 'android:name': permissionName },\n  });\n  androidManifest.manifest[USES_PERMISSION] = usesPermissions;\n}\n\nexport function ensurePermissions(\n  androidManifest: AndroidManifest,\n  permissionNames: string[]\n): { [permission: string]: boolean } {\n  const permissions = getPermissions(androidManifest);\n\n  const results: { [permission: string]: boolean } = {};\n  for (const permissionName of permissionNames) {\n    const targetName = ensurePermissionNameFormat(permissionName);\n    if (!permissions.includes(targetName)) {\n      addPermission(androidManifest, targetName);\n      results[permissionName] = true;\n    } else {\n      results[permissionName] = false;\n    }\n  }\n  return results;\n}\n\nexport function ensurePermission(\n  androidManifest: AndroidManifest,\n  permissionName: string\n): boolean {\n  const permissions = getPermissions(androidManifest);\n  const targetName = ensurePermissionNameFormat(permissionName);\n\n  if (!permissions.includes(targetName)) {\n    addPermission(androidManifest, targetName);\n    return true;\n  }\n  return false;\n}\n\nexport function ensurePermissionNameFormat(permissionName: string): string {\n  if (permissionName.includes('.')) {\n    const com = permissionName.split('.');\n    const name = com.pop() as string;\n    return [...com, name.toUpperCase()].join('.');\n  } else {\n    // If shorthand form like `WRITE_CONTACTS` is provided, expand it to `android.permission.WRITE_CONTACTS`.\n    return ensurePermissionNameFormat(`android.permission.${permissionName}`);\n  }\n}\n\nexport function getPermissions(androidManifest: AndroidManifest): string[] {\n  const usesPermissions: { [key: string]: any }[] = androidManifest.manifest[USES_PERMISSION] || [];\n  const permissions = usesPermissions.map(permissionObject => {\n    return permissionObject.$['android:name'] || permissionObject.$.name;\n  });\n  return permissions;\n}\n"],"file":"Permissions.js"}