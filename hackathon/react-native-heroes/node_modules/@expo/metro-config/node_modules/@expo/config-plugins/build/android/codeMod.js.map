{"version":3,"sources":["../../src/android/codeMod.ts"],"names":["findNewInstanceCodeBlock","contents","classDeclaration","language","isJava","start","indexOf","search","RegExp","end","nextBrace","isAnonymousClass","substring","match","code","appendContentsInsideDeclarationBlock","srcContents","declaration","insertion","Error","addImports","source","imports","lines","split","lineIndexWithPackageDeclaration","findIndex","line","javaImport","includes","importStatement","splice","join"],"mappings":";;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,wBAAT,CACLC,QADK,EAELC,gBAFK,EAGLC,QAHK,EAIa;AAClB,QAAMC,MAAM,GAAGD,QAAQ,KAAK,MAA5B;AACA,MAAIE,KAAK,GAAGD,MAAM,GACdH,QAAQ,CAACK,OAAT,CAAkB,QAAOJ,gBAAiB,GAA1C,CADc,GAEdD,QAAQ,CAACM,MAAT,CAAgB,IAAIC,MAAJ,CAAY,sBAAqBN,gBAAiB,KAAlD,CAAhB,CAFJ;;AAGA,MAAIG,KAAK,GAAG,CAAZ,EAAe;AACb,WAAO,IAAP;AACD,GAPiB,CAQlB;;;AACAA,EAAAA,KAAK,IAAI,CAAT;AACA,MAAII,GAAG,GAAG,kDAA4BR,QAA5B,EAAsC,GAAtC,EAA2CI,KAA3C,CAAV,CAVkB,CAYlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAMK,SAAS,GAAGT,QAAQ,CAACK,OAAT,CAAiB,GAAjB,EAAsBG,GAAG,GAAG,CAA5B,CAAlB;AACA,QAAME,gBAAgB,GACpBD,SAAS,IAAID,GAAb,IAAoB,CAAC,CAACR,QAAQ,CAACW,SAAT,CAAmBH,GAAG,GAAG,CAAzB,EAA4BC,SAA5B,EAAuCG,KAAvC,CAA6C,QAA7C,CADxB;;AAEA,MAAIF,gBAAJ,EAAsB;AACpBF,IAAAA,GAAG,GAAG,kDAA4BR,QAA5B,EAAsC,GAAtC,EAA2CQ,GAA3C,CAAN;AACD;;AAED,SAAO;AACLJ,IAAAA,KADK;AAELI,IAAAA,GAFK;AAGLK,IAAAA,IAAI,EAAEb,QAAQ,CAACW,SAAT,CAAmBP,KAAnB,EAA0BI,GAAG,GAAG,CAAhC;AAHD,GAAP;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASM,oCAAT,CACLC,WADK,EAELC,WAFK,EAGLC,SAHK,EAIG;AACR,QAAMb,KAAK,GAAGW,WAAW,CAACT,MAAZ,CAAmB,IAAIC,MAAJ,CAAY,OAAMS,WAAY,aAA9B,CAAnB,CAAd;;AACA,MAAIZ,KAAK,GAAG,CAAZ,EAAe;AACb,UAAM,IAAIc,KAAJ,CAAW,2CAA0CF,WAAY,GAAjE,CAAN;AACD;;AACD,QAAMR,GAAG,GAAG,kDAA4BO,WAA5B,EAAyC,GAAzC,EAA8CX,KAA9C,CAAZ;AACA,SAAO,6CAAuBW,WAAvB,EAAoCE,SAApC,EAA+CT,GAA/C,CAAP;AACD;;AAEM,SAASW,UAAT,CAAoBC,MAApB,EAAoCC,OAApC,EAAuDlB,MAAvD,EAAgF;AACrF,QAAMmB,KAAK,GAAGF,MAAM,CAACG,KAAP,CAAa,IAAb,CAAd;AACA,QAAMC,+BAA+B,GAAGF,KAAK,CAACG,SAAN,CAAgBC,IAAI,IAAIA,IAAI,CAACd,KAAL,CAAW,gBAAX,CAAxB,CAAxC;;AACA,OAAK,MAAMe,UAAX,IAAyBN,OAAzB,EAAkC;AAChC,QAAI,CAACD,MAAM,CAACQ,QAAP,CAAgBD,UAAhB,CAAL,EAAkC;AAChC,YAAME,eAAe,GAAI,UAASF,UAAW,GAAExB,MAAM,GAAG,GAAH,GAAS,EAAG,EAAjE;AACAmB,MAAAA,KAAK,CAACQ,MAAN,CAAaN,+BAA+B,GAAG,CAA/C,EAAkD,CAAlD,EAAqDK,eAArD;AACD;AACF;;AACD,SAAOP,KAAK,CAACS,IAAN,CAAW,IAAX,CAAP;AACD","sourcesContent":["import { CodeBlock, insertContentsAtOffset } from '../utils/commonCodeMod';\nimport { findMatchingBracketPosition } from '../utils/matchBrackets';\n\n/**\n * Find java or kotlin new class instance code block\n *\n * @param contents source contents\n * @param classDeclaration class declaration or just a class name\n * @param language 'java' | 'kt'\n * @returns `CodeBlock` for start/end offset and code block contents\n */\nexport function findNewInstanceCodeBlock(\n  contents: string,\n  classDeclaration: string,\n  language: 'java' | 'kt'\n): CodeBlock | null {\n  const isJava = language === 'java';\n  let start = isJava\n    ? contents.indexOf(` new ${classDeclaration}(`)\n    : contents.search(new RegExp(` (object\\\\s*:\\\\s*)?${classDeclaration}\\\\(`));\n  if (start < 0) {\n    return null;\n  }\n  // `+ 1` for the prefix space\n  start += 1;\n  let end = findMatchingBracketPosition(contents, '(', start);\n\n  // For anonymous class, should search further to the {} block.\n  // ```java\n  // new Foo() {\n  //   @Override\n  //   protected void interfaceMethod {}\n  // };\n  // ```\n  //\n  // ```kotlin\n  // object : Foo() {\n  //   override fun interfaceMethod {}\n  // }\n  // ```\n  const nextBrace = contents.indexOf('{', end + 1);\n  const isAnonymousClass =\n    nextBrace >= end && !!contents.substring(end + 1, nextBrace).match(/^\\s*$/m);\n  if (isAnonymousClass) {\n    end = findMatchingBracketPosition(contents, '{', end);\n  }\n\n  return {\n    start,\n    end,\n    code: contents.substring(start, end + 1),\n  };\n}\n\n/**\n * Append contents to the end of code declaration block, support class or method declarations.\n *\n * @param srcContents source contents\n * @param declaration class declaration or method declaration\n * @param insertion code to append\n * @returns updated contents\n */\nexport function appendContentsInsideDeclarationBlock(\n  srcContents: string,\n  declaration: string,\n  insertion: string\n): string {\n  const start = srcContents.search(new RegExp(`\\\\s*${declaration}.*?[\\\\(\\\\{]`));\n  if (start < 0) {\n    throw new Error(`Unable to find code block - declaration[${declaration}]`);\n  }\n  const end = findMatchingBracketPosition(srcContents, '{', start);\n  return insertContentsAtOffset(srcContents, insertion, end);\n}\n\nexport function addImports(source: string, imports: string[], isJava: boolean): string {\n  const lines = source.split('\\n');\n  const lineIndexWithPackageDeclaration = lines.findIndex(line => line.match(/^package .*;?$/));\n  for (const javaImport of imports) {\n    if (!source.includes(javaImport)) {\n      const importStatement = `import ${javaImport}${isJava ? ';' : ''}`;\n      lines.splice(lineIndexWithPackageDeclaration + 1, 0, importStatement);\n    }\n  }\n  return lines.join('\\n');\n}\n"],"file":"codeMod.js"}