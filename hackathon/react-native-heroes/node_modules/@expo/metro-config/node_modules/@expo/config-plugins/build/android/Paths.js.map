{"version":3,"sources":["../../src/android/Paths.ts"],"names":["getProjectFilePath","projectRoot","name","filePath","path","join","getLanguage","extension","extname","UnexpectedError","getFileInfo","normalize","contents","fs","readFileSync","language","getMainApplicationAsync","getMainActivityAsync","getGradleFilePath","gradleName","groovyPath","resolve","ktPath","isGroovy","pathExistsSync","isKotlin","Error","getProjectBuildGradleFilePath","getProjectBuildGradleAsync","getSettingsGradleFilePath","getSettingsGradleAsync","getAppBuildGradleFilePath","getAppBuildGradleAsync","getProjectPathOrThrowAsync","projectPath","getAndroidManifestAsync","getResourceFolderAsync","getResourceXMLPathAsync","kind","resourcePath"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAYO,SAASA,kBAAT,CAA4BC,WAA5B,EAAiDC,IAAjD,EAAuE;AAC5E,QAAMC,QAAQ,GAAG,kBACfC,IAAI,GAACC,IAAL,CAAUJ,WAAV,EAAwB,gCAA+BC,IAAK,aAA5D,CADe,EAEf,CAFe,CAAjB;AAGA,yBACEC,QADF,EAEG,iBAAgBD,IAAK,iDAAgDD,WAAY,GAFpF;AAKA,SAAOE,QAAP;AACD;;AAED,SAASG,WAAT,CAAqBH,QAArB,EAAiE;AAC/D,QAAMI,SAAS,GAAGH,IAAI,GAACI,OAAL,CAAaL,QAAb,CAAlB;;AACA,UAAQI,SAAR;AACE,SAAK,OAAL;AACE,aAAO,MAAP;;AACF,SAAK,MAAL;AACA,SAAK,KAAL;AACE,aAAO,IAAP;;AACF,SAAK,SAAL;AACA,SAAK,SAAL;AACE,aAAO,QAAP;;AACF;AACE,YAAM,KAAIE,yBAAJ,EAAqB,sCAAqCF,SAAU,EAApE,CAAN;AAVJ;AAYD;;AAEM,SAASG,WAAT,CAAqBP,QAArB,EAAuC;AAC5C,SAAO;AACLC,IAAAA,IAAI,EAAEA,IAAI,GAACO,SAAL,CAAeR,QAAf,CADD;AAELS,IAAAA,QAAQ,EAAEC,mBAAGC,YAAH,CAAgBX,QAAhB,EAA0B,MAA1B,CAFL;AAGLY,IAAAA,QAAQ,EAAET,WAAW,CAACH,QAAD;AAHhB,GAAP;AAKD;;AAEM,eAAea,uBAAf,CACLf,WADK,EAE4B;AACjC,QAAME,QAAQ,GAAGH,kBAAkB,CAACC,WAAD,EAAc,iBAAd,CAAnC;AACA,SAAOS,WAAW,CAACP,QAAD,CAAlB;AACD;;AAEM,eAAec,oBAAf,CAAoChB,WAApC,EAA0F;AAC/F,QAAME,QAAQ,GAAGH,kBAAkB,CAACC,WAAD,EAAc,cAAd,CAAnC;AACA,SAAOS,WAAW,CAACP,QAAD,CAAlB;AACD;;AAEM,SAASe,iBAAT,CAA2BjB,WAA3B,EAAgDkB,UAAhD,EAA4E;AACjF,QAAMC,UAAU,GAAGhB,IAAI,GAACiB,OAAL,CAAapB,WAAb,EAA2B,GAAEkB,UAAW,SAAxC,CAAnB;AACA,QAAMG,MAAM,GAAGlB,IAAI,GAACiB,OAAL,CAAapB,WAAb,EAA2B,GAAEkB,UAAW,aAAxC,CAAf;;AAEA,QAAMI,QAAQ,GAAGV,mBAAGW,cAAH,CAAkBJ,UAAlB,CAAjB;;AACA,QAAMK,QAAQ,GAAG,CAACF,QAAD,IAAaV,mBAAGW,cAAH,CAAkBF,MAAlB,CAA9B;;AAEA,MAAI,CAACC,QAAD,IAAa,CAACE,QAAlB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAW,mBAAkBP,UAAW,8BAA6BlB,WAAY,GAAjF,CAAN;AACD;;AACD,QAAME,QAAQ,GAAGoB,QAAQ,GAAGH,UAAH,GAAgBE,MAAzC;AACA,SAAOnB,QAAP;AACD;;AAEM,SAASwB,6BAAT,CAAuC1B,WAAvC,EAAoE;AACzE,SAAOiB,iBAAiB,CAACd,IAAI,GAACC,IAAL,CAAUJ,WAAV,EAAuB,SAAvB,CAAD,EAAoC,OAApC,CAAxB;AACD;;AAEM,eAAe2B,0BAAf,CAA0C3B,WAA1C,EAA2F;AAChG,SAAOS,WAAW,CAACiB,6BAA6B,CAAC1B,WAAD,CAA9B,CAAlB;AACD;;AAEM,SAAS4B,yBAAT,CAAmC5B,WAAnC,EAAgE;AACrE,SAAOiB,iBAAiB,CAACd,IAAI,GAACC,IAAL,CAAUJ,WAAV,EAAuB,SAAvB,CAAD,EAAoC,UAApC,CAAxB;AACD;;AAEM,eAAe6B,sBAAf,CAAsC7B,WAAtC,EAAuF;AAC5F,SAAOS,WAAW,CAACmB,yBAAyB,CAAC5B,WAAD,CAA1B,CAAlB;AACD;;AAEM,SAAS8B,yBAAT,CAAmC9B,WAAnC,EAAgE;AACrE,SAAOiB,iBAAiB,CAACd,IAAI,GAACC,IAAL,CAAUJ,WAAV,EAAuB,SAAvB,EAAkC,KAAlC,CAAD,EAA2C,OAA3C,CAAxB;AACD;;AAEM,eAAe+B,sBAAf,CAAsC/B,WAAtC,EAAuF;AAC5F,SAAOS,WAAW,CAACqB,yBAAyB,CAAC9B,WAAD,CAA1B,CAAlB;AACD;;AAEM,eAAegC,0BAAf,CAA0ChC,WAA1C,EAAgF;AACrF,QAAMiC,WAAW,GAAG9B,IAAI,GAACC,IAAL,CAAUJ,WAAV,EAAuB,SAAvB,CAApB;;AACA,MAAI,MAAM,qCAAqBiC,WAArB,CAAV,EAA6C;AAC3C,WAAOA,WAAP;AACD;;AACD,QAAM,IAAIR,KAAJ,CAAW,iDAAgDzB,WAAY,EAAvE,CAAN;AACD;;AAEM,eAAekC,uBAAf,CAAuClC,WAAvC,EAA6E;AAClF,QAAMiC,WAAW,GAAG,MAAMD,0BAA0B,CAAChC,WAAD,CAApD;AACA,QAAME,QAAQ,GAAGC,IAAI,GAACC,IAAL,CAAU6B,WAAV,EAAuB,kCAAvB,CAAjB;AACA,SAAO/B,QAAP;AACD;;AAEM,eAAeiC,sBAAf,CAAsCnC,WAAtC,EAA4E;AACjF,QAAMiC,WAAW,GAAG,MAAMD,0BAA0B,CAAChC,WAAD,CAApD;AACA,SAAOG,IAAI,GAACC,IAAL,CAAU6B,WAAV,EAAwB,kBAAxB,CAAP;AACD;;AAEM,eAAeG,uBAAf,CACLpC,WADK,EAEL;AAAEqC,EAAAA,IAAI,GAAG,QAAT;AAAmBpC,EAAAA;AAAnB,CAFK,EAGY;AACjB,QAAMqC,YAAY,GAAG,MAAMH,sBAAsB,CAACnC,WAAD,CAAjD;AAEA,QAAME,QAAQ,GAAGC,IAAI,GAACC,IAAL,CAAUkC,YAAV,EAAyB,GAAED,IAAK,IAAGpC,IAAK,MAAxC,CAAjB;AACA,SAAOC,QAAP;AACD","sourcesContent":["import assert from 'assert';\nimport fs from 'fs-extra';\nimport { sync as globSync } from 'glob';\nimport * as path from 'path';\n\nimport { UnexpectedError } from '../utils/errors';\nimport { directoryExistsAsync } from '../utils/modules';\nimport { ResourceKind } from './Resources';\n\nexport interface ProjectFile<L extends string = string> {\n  path: string;\n  language: L;\n  contents: string;\n}\n\nexport type ApplicationProjectFile = ProjectFile<'java' | 'kt'>;\nexport type GradleProjectFile = ProjectFile<'groovy' | 'kt'>;\n\nexport function getProjectFilePath(projectRoot: string, name: string): string {\n  const filePath = globSync(\n    path.join(projectRoot, `android/app/src/main/java/**/${name}.@(java|kt)`)\n  )[0];\n  assert(\n    filePath,\n    `Project file \"${name}\" does not exist in android project for root \"${projectRoot}\"`\n  );\n\n  return filePath;\n}\n\nfunction getLanguage(filePath: string): 'java' | 'groovy' | 'kt' {\n  const extension = path.extname(filePath);\n  switch (extension) {\n    case '.java':\n      return 'java';\n    case '.kts':\n    case '.kt':\n      return 'kt';\n    case '.groovy':\n    case '.gradle':\n      return 'groovy';\n    default:\n      throw new UnexpectedError(`Unexpected Android file extension: ${extension}`);\n  }\n}\n\nexport function getFileInfo(filePath: string) {\n  return {\n    path: path.normalize(filePath),\n    contents: fs.readFileSync(filePath, 'utf8'),\n    language: getLanguage(filePath) as any,\n  };\n}\n\nexport async function getMainApplicationAsync(\n  projectRoot: string\n): Promise<ApplicationProjectFile> {\n  const filePath = getProjectFilePath(projectRoot, 'MainApplication');\n  return getFileInfo(filePath);\n}\n\nexport async function getMainActivityAsync(projectRoot: string): Promise<ApplicationProjectFile> {\n  const filePath = getProjectFilePath(projectRoot, 'MainActivity');\n  return getFileInfo(filePath);\n}\n\nexport function getGradleFilePath(projectRoot: string, gradleName: string): string {\n  const groovyPath = path.resolve(projectRoot, `${gradleName}.gradle`);\n  const ktPath = path.resolve(projectRoot, `${gradleName}.gradle.kts`);\n\n  const isGroovy = fs.pathExistsSync(groovyPath);\n  const isKotlin = !isGroovy && fs.pathExistsSync(ktPath);\n\n  if (!isGroovy && !isKotlin) {\n    throw new Error(`Failed to find '${gradleName}.gradle' file for project: ${projectRoot}.`);\n  }\n  const filePath = isGroovy ? groovyPath : ktPath;\n  return filePath;\n}\n\nexport function getProjectBuildGradleFilePath(projectRoot: string): string {\n  return getGradleFilePath(path.join(projectRoot, 'android'), 'build');\n}\n\nexport async function getProjectBuildGradleAsync(projectRoot: string): Promise<GradleProjectFile> {\n  return getFileInfo(getProjectBuildGradleFilePath(projectRoot));\n}\n\nexport function getSettingsGradleFilePath(projectRoot: string): string {\n  return getGradleFilePath(path.join(projectRoot, 'android'), 'settings');\n}\n\nexport async function getSettingsGradleAsync(projectRoot: string): Promise<GradleProjectFile> {\n  return getFileInfo(getSettingsGradleFilePath(projectRoot));\n}\n\nexport function getAppBuildGradleFilePath(projectRoot: string): string {\n  return getGradleFilePath(path.join(projectRoot, 'android', 'app'), 'build');\n}\n\nexport async function getAppBuildGradleAsync(projectRoot: string): Promise<GradleProjectFile> {\n  return getFileInfo(getAppBuildGradleFilePath(projectRoot));\n}\n\nexport async function getProjectPathOrThrowAsync(projectRoot: string): Promise<string> {\n  const projectPath = path.join(projectRoot, 'android');\n  if (await directoryExistsAsync(projectPath)) {\n    return projectPath;\n  }\n  throw new Error(`Android project folder is missing in project: ${projectRoot}`);\n}\n\nexport async function getAndroidManifestAsync(projectRoot: string): Promise<string> {\n  const projectPath = await getProjectPathOrThrowAsync(projectRoot);\n  const filePath = path.join(projectPath, 'app/src/main/AndroidManifest.xml');\n  return filePath;\n}\n\nexport async function getResourceFolderAsync(projectRoot: string): Promise<string> {\n  const projectPath = await getProjectPathOrThrowAsync(projectRoot);\n  return path.join(projectPath, `app/src/main/res`);\n}\n\nexport async function getResourceXMLPathAsync(\n  projectRoot: string,\n  { kind = 'values', name }: { kind?: ResourceKind; name: 'colors' | 'strings' | 'styles' | string }\n): Promise<string> {\n  const resourcePath = await getResourceFolderAsync(projectRoot);\n\n  const filePath = path.join(resourcePath, `${kind}/${name}.xml`);\n  return filePath;\n}\n"],"file":"Paths.js"}