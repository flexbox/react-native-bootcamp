{"version":3,"sources":["../../src/android/EasBuild.ts"],"names":["APPLY_EAS_GRADLE","hasApplyLine","content","applyLine","replace","split","some","line","getEasBuildGradlePath","projectRoot","path","join","configureEasBuildAsync","buildGradlePath","Paths","getAppBuildGradleFilePath","easGradlePath","fs","writeFile","gradleScript","buildGradleContent","readFile","hasEasGradleApply","trim","isEasBuildGradleConfiguredAsync","hasEasGradleFile","pathExists"],"mappings":";;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAEA,MAAMA,gBAAgB,GAAG,kCAAzB;;AAEA,SAASC,YAAT,CAAsBC,OAAtB,EAAuCC,SAAvC,EAAmE;AACjE,SACED,OAAO,CACJE,OADH,CACW,OADX,EACoB,IADpB,EAEGC,KAFH,CAES,IAFT,EAGE;AAHF,GAIGC,IAJH,CAIQC,IAAI,IAAIA,IAAI,KAAKJ,SAAT,IAAsBI,IAAI,KAAKJ,SAAS,CAACC,OAAV,CAAkB,IAAlB,EAAwB,GAAxB,CAJ/C,CADF;AAOD;;AAEM,SAASI,qBAAT,CAA+BC,WAA/B,EAA4D;AACjE,SAAOC,gBAAKC,IAAL,CAAUF,WAAV,EAAuB,SAAvB,EAAkC,KAAlC,EAAyC,kBAAzC,CAAP;AACD;;AAEM,eAAeG,sBAAf,CAAsCH,WAAtC,EAA0E;AAC/E,QAAMI,eAAe,GAAGC,KAAK,GAACC,yBAAN,CAAgCN,WAAhC,CAAxB;AACA,QAAMO,aAAa,GAAGR,qBAAqB,CAACC,WAAD,CAA3C;AAEA,QAAMQ,mBAAGC,SAAH,CAAaF,aAAb,EAA4BG,+BAA5B,CAAN;AAEA,QAAMC,kBAAkB,GAAG,MAAMH,mBAAGI,QAAH,CAAYX,gBAAKC,IAAL,CAAUE,eAAV,CAAZ,EAAwC,MAAxC,CAAjC;AAEA,QAAMS,iBAAiB,GAAGrB,YAAY,CAACmB,kBAAD,EAAqBpB,gBAArB,CAAtC;;AAEA,MAAI,CAACsB,iBAAL,EAAwB;AACtB,UAAML,mBAAGC,SAAH,CAAaL,eAAb,EAA+B,GAAEO,kBAAkB,CAACG,IAAnB,EAA0B,KAAIvB,gBAAiB,IAAhF,CAAN;AACD;AACF;;AAEM,eAAewB,+BAAf,CAA+Cf,WAA/C,EAAsF;AAC3F,QAAMI,eAAe,GAAGC,KAAK,GAACC,yBAAN,CAAgCN,WAAhC,CAAxB;AACA,QAAMO,aAAa,GAAGR,qBAAqB,CAACC,WAAD,CAA3C;AAEA,QAAMgB,gBAAgB,GAAG,MAAMR,mBAAGS,UAAH,CAAcV,aAAd,CAA/B;AAEA,QAAMI,kBAAkB,GAAG,MAAMH,mBAAGI,QAAH,CAAYX,gBAAKC,IAAL,CAAUE,eAAV,CAAZ,EAAwC,MAAxC,CAAjC;AACA,QAAMS,iBAAiB,GAAGrB,YAAY,CAACmB,kBAAD,EAAqBpB,gBAArB,CAAtC;AAEA,SAAOsB,iBAAiB,IAAIG,gBAA5B;AACD","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\n\nimport gradleScript from './EasBuildGradleScript';\nimport * as Paths from './Paths';\n\nconst APPLY_EAS_GRADLE = 'apply from: \"./eas-build.gradle\"';\n\nfunction hasApplyLine(content: string, applyLine: string): boolean {\n  return (\n    content\n      .replace(/\\r\\n/g, '\\n')\n      .split('\\n')\n      // Check for both single and double quotes\n      .some(line => line === applyLine || line === applyLine.replace(/\"/g, \"'\"))\n  );\n}\n\nexport function getEasBuildGradlePath(projectRoot: string): string {\n  return path.join(projectRoot, 'android', 'app', 'eas-build.gradle');\n}\n\nexport async function configureEasBuildAsync(projectRoot: string): Promise<void> {\n  const buildGradlePath = Paths.getAppBuildGradleFilePath(projectRoot);\n  const easGradlePath = getEasBuildGradlePath(projectRoot);\n\n  await fs.writeFile(easGradlePath, gradleScript);\n\n  const buildGradleContent = await fs.readFile(path.join(buildGradlePath), 'utf8');\n\n  const hasEasGradleApply = hasApplyLine(buildGradleContent, APPLY_EAS_GRADLE);\n\n  if (!hasEasGradleApply) {\n    await fs.writeFile(buildGradlePath, `${buildGradleContent.trim()}\\n${APPLY_EAS_GRADLE}\\n`);\n  }\n}\n\nexport async function isEasBuildGradleConfiguredAsync(projectRoot: string): Promise<boolean> {\n  const buildGradlePath = Paths.getAppBuildGradleFilePath(projectRoot);\n  const easGradlePath = getEasBuildGradlePath(projectRoot);\n\n  const hasEasGradleFile = await fs.pathExists(easGradlePath);\n\n  const buildGradleContent = await fs.readFile(path.join(buildGradlePath), 'utf8');\n  const hasEasGradleApply = hasApplyLine(buildGradleContent, APPLY_EAS_GRADLE);\n\n  return hasEasGradleApply && hasEasGradleFile;\n}\n"],"file":"EasBuild.js"}