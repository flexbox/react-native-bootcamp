{"version":3,"sources":["Matrix2D.ts"],"names":["DEG_TO_RAD","Math","PI","identity","a","b","c","d","tx","ty","hasInitialState","reset","toArray","append","a2","b2","c2","d2","tx2","ty2","change","translate","a1","b1","c1","d1","appendTransform","x","y","scaleX","scaleY","rotation","skewX","skewY","regX","regY","cos","sin","r","tan"],"mappings":"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","sourcesContent":["/**\n * based on\n * https://github.com/CreateJS/EaselJS/blob/631cdffb85eff9413dab43b4676f059b4232d291/src/easeljs/geom/Matrix2D.js\n */\nconst DEG_TO_RAD = Math.PI / 180;\n\nexport const identity: [number, number, number, number, number, number] = [\n  1,\n  0,\n  0,\n  1,\n  0,\n  0,\n];\n\nlet a = 1;\nlet b = 0;\nlet c = 0;\nlet d = 1;\nlet tx = 0;\nlet ty = 0;\nlet hasInitialState = true;\n\n/**\n * Represents an affine transformation matrix, and provides tools for concatenating transforms.\n *\n * This matrix can be visualized as:\n *\n * \t[ a  c  tx\n * \t  b  d  ty\n * \t  0  0  1  ]\n *\n * Note the locations of b and c.\n **/\n\n/**\n * Reset current matrix to an identity matrix.\n * @method reset\n **/\nexport function reset() {\n  if (hasInitialState) {\n    return;\n  }\n  a = d = 1;\n  b = c = tx = ty = 0;\n  hasInitialState = true;\n}\n\n/**\n * Returns an array with current matrix values.\n * @method toArray\n * @return {Array} an array with current matrix values.\n **/\nexport function toArray(): [number, number, number, number, number, number] {\n  if (hasInitialState) {\n    return identity;\n  }\n  return [a, b, c, d, tx, ty];\n}\n\n/**\n * Appends the specified matrix properties to this matrix. All parameters are required.\n * This is the equivalent of multiplying `(this matrix) * (specified matrix)`.\n * @method append\n * @param {Number} a2\n * @param {Number} b2\n * @param {Number} c2\n * @param {Number} d2\n * @param {Number} tx2\n * @param {Number} ty2\n **/\nexport function append(\n  a2: number,\n  b2: number,\n  c2: number,\n  d2: number,\n  tx2: number,\n  ty2: number,\n) {\n  const change = a2 !== 1 || b2 !== 0 || c2 !== 0 || d2 !== 1;\n  const translate = tx2 !== 0 || ty2 !== 0;\n  if (!change && !translate) {\n    return;\n  }\n  if (hasInitialState) {\n    hasInitialState = false;\n    a = a2;\n    b = b2;\n    c = c2;\n    d = d2;\n    tx = tx2;\n    ty = ty2;\n    return;\n  }\n  const a1 = a;\n  const b1 = b;\n  const c1 = c;\n  const d1 = d;\n  if (change) {\n    a = a1 * a2 + c1 * b2;\n    b = b1 * a2 + d1 * b2;\n    c = a1 * c2 + c1 * d2;\n    d = b1 * c2 + d1 * d2;\n  }\n  if (translate) {\n    tx = a1 * tx2 + c1 * ty2 + tx;\n    ty = b1 * tx2 + d1 * ty2 + ty;\n  }\n}\n\n/**\n * Generates matrix properties from the specified display object transform properties, and appends them to this matrix.\n * For example, you can use this to generate a matrix representing the transformations of a display object:\n *\n * \treset();\n * \tappendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);\n * \tvar matrix = toArray()\n *\n * @method appendTransform\n * @param {Number} x\n * @param {Number} y\n * @param {Number} scaleX\n * @param {Number} scaleY\n * @param {Number} rotation\n * @param {Number} skewX\n * @param {Number} skewY\n * @param {Number} regX Optional.\n * @param {Number} regY Optional.\n **/\nexport function appendTransform(\n  x: number,\n  y: number,\n  scaleX: number,\n  scaleY: number,\n  rotation: number,\n  skewX: number,\n  skewY: number,\n  regX: number,\n  regY: number,\n) {\n  if (\n    x === 0 &&\n    y === 0 &&\n    scaleX === 1 &&\n    scaleY === 1 &&\n    rotation === 0 &&\n    skewX === 0 &&\n    skewY === 0 &&\n    regX === 0 &&\n    regY === 0\n  ) {\n    return;\n  }\n  let cos, sin;\n  if (rotation % 360) {\n    const r = rotation * DEG_TO_RAD;\n    cos = Math.cos(r);\n    sin = Math.sin(r);\n  } else {\n    cos = 1;\n    sin = 0;\n  }\n\n  const a2 = cos * scaleX;\n  const b2 = sin * scaleX;\n  const c2 = -sin * scaleY;\n  const d2 = cos * scaleY;\n\n  if (skewX || skewY) {\n    const b1 = Math.tan(skewY * DEG_TO_RAD);\n    const c1 = Math.tan(skewX * DEG_TO_RAD);\n    append(a2 + c1 * b2, b1 * a2 + b2, c2 + c1 * d2, b1 * c2 + d2, x, y);\n  } else {\n    append(a2, b2, c2, d2, x, y);\n  }\n\n  if (regX || regY) {\n    // append the registration offset:\n    tx -= regX * a + regY * c;\n    ty -= regX * b + regY * d;\n    hasInitialState = false;\n  }\n}\n"]}