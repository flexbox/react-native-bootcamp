{"version":3,"sources":["extractViewBox.ts"],"names":["meetOrSliceTypes","meet","slice","none","alignEnum","reduce","prev","name","spacesRegExp","extractViewBox","props","viewBox","preserveAspectRatio","params","Array","isArray","trim","split","map","Number","length","some","isNaN","console","warn","modes","align","meetOrSlice","minX","minY","vbWidth","vbHeight"],"mappings":"uJAEO,GAAMA,CAAAA,gBAEZ,CAAG,CACFC,IAAI,CAAE,CADJ,CAEFC,KAAK,CAAE,CAFL,CAGFC,IAAI,CAAE,CAHJ,CAFG,C,0CAQA,GAAMC,CAAAA,SAAsC,CAAG,CACpD,UADoD,CAEpD,UAFoD,CAGpD,UAHoD,CAIpD,UAJoD,CAKpD,UALoD,CAMpD,UANoD,CAOpD,UAPoD,CAQpD,UARoD,CASpD,UAToD,CAUpD,MAVoD,EAWpDC,MAXoD,CAW7C,SAACC,IAAD,CAAoCC,IAApC,CAA6C,CACpDD,IAAI,CAACC,IAAD,CAAJ,CAAaA,IAAb,CACA,MAAOD,CAAAA,IAAP,CACD,CAdqD,CAcnD,EAdmD,CAA/C,C,4BAgBP,GAAME,CAAAA,YAAY,CAAG,KAArB,CAEe,QAASC,CAAAA,cAAT,CAAwBC,KAAxB,CAGZ,IACOC,CAAAA,OADP,CACwCD,KADxC,CACOC,OADP,CACgBC,mBADhB,CACwCF,KADxC,CACgBE,mBADhB,CAGD,GAAI,CAACD,OAAL,CAAc,CACZ,MAAO,KAAP,CACD,CAED,GAAME,CAAAA,MAAM,CAAG,CAACC,KAAK,CAACC,OAAN,CAAcJ,OAAd,EACZA,OADY,CAEZA,OAAO,CAACK,IAAR,GAAeC,KAAf,CAAqBT,YAArB,CAFW,EAGbU,GAHa,CAGTC,MAHS,CAAf,CAKA,GAAIN,MAAM,CAACO,MAAP,GAAkB,CAAlB,EAAuBP,MAAM,CAACQ,IAAP,CAAYC,KAAZ,CAA3B,CAA+C,CAC7CC,OAAO,CAACC,IAAR,CAAa,0BAA4Bb,OAAzC,EACA,MAAO,KAAP,CACD,CAED,GAAMc,CAAAA,KAAK,CAAGb,mBAAmB,CAC7BA,mBAAmB,CAACI,IAApB,GAA2BC,KAA3B,CAAiCT,YAAjC,CAD6B,CAE7B,EAFJ,CAGA,GAAMkB,CAAAA,KAAK,CAAGD,KAAK,CAAC,CAAD,CAAnB,CACA,GAAME,CAAAA,WAAW,CAAGF,KAAK,CAAC,CAAD,CAAzB,CAEA,MAAO,CACLG,IAAI,CAAEf,MAAM,CAAC,CAAD,CADP,CAELgB,IAAI,CAAEhB,MAAM,CAAC,CAAD,CAFP,CAGLiB,OAAO,CAAEjB,MAAM,CAAC,CAAD,CAHV,CAILkB,QAAQ,CAAElB,MAAM,CAAC,CAAD,CAJX,CAKLa,KAAK,CAAEtB,SAAS,CAACsB,KAAD,CAAT,EAAoB,UALtB,CAMLC,WAAW,CAAE3B,gBAAgB,CAAC2B,WAAD,CAAhB,EAAiC,CANzC,CAAP,CAQD","sourcesContent":["import { NumberProp } from './types';\n\nexport const meetOrSliceTypes: {\n  [meetOrSlice: string]: number;\n} = {\n  meet: 0,\n  slice: 1,\n  none: 2,\n};\n\nexport const alignEnum: { [align: string]: string } = [\n  'xMinYMin',\n  'xMidYMin',\n  'xMaxYMin',\n  'xMinYMid',\n  'xMidYMid',\n  'xMaxYMid',\n  'xMinYMax',\n  'xMidYMax',\n  'xMaxYMax',\n  'none',\n].reduce((prev: { [align: string]: string }, name) => {\n  prev[name] = name;\n  return prev;\n}, {});\n\nconst spacesRegExp = /\\s+/;\n\nexport default function extractViewBox(props: {\n  viewBox?: string | NumberProp[];\n  preserveAspectRatio?: string;\n}) {\n  const { viewBox, preserveAspectRatio } = props;\n\n  if (!viewBox) {\n    return null;\n  }\n\n  const params = (Array.isArray(viewBox)\n    ? viewBox\n    : viewBox.trim().split(spacesRegExp)\n  ).map(Number);\n\n  if (params.length !== 4 || params.some(isNaN)) {\n    console.warn('Invalid `viewBox` prop:' + viewBox);\n    return null;\n  }\n\n  const modes = preserveAspectRatio\n    ? preserveAspectRatio.trim().split(spacesRegExp)\n    : [];\n  const align = modes[0];\n  const meetOrSlice = modes[1];\n\n  return {\n    minX: params[0],\n    minY: params[1],\n    vbWidth: params[2],\n    vbHeight: params[3],\n    align: alignEnum[align] || 'xMidYMid',\n    meetOrSlice: meetOrSliceTypes[meetOrSlice] || 0,\n  };\n}\n"]}