{"version":3,"sources":["extractText.tsx"],"names":["fontRegExp","fontFamilyPrefix","fontFamilySuffix","commaReg","cachedFontObjectsFromString","extractSingleFontFamily","fontFamilyString","split","replace","parseFontString","font","hasOwnProperty","match","exec","isBold","isItalic","fontSize","fontWeight","fontStyle","fontFamily","extractFont","props","fontData","fontVariant","fontStretch","textAnchor","textDecoration","letterSpacing","wordSpacing","kerning","fontFeatureSettings","fontVariantLigatures","fontVariationSettings","ownedFont","baseFont","TSpan","setTSpan","TSpanImplementation","getChild","child","String","extractText","container","x","y","dx","dy","rotate","children","inlineSize","baselineShift","verticalAlign","alignmentBaseline","textChildren","Children","count","Array","isArray","map","content"],"mappings":"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","sourcesContent":["import React, { Children, ComponentType } from 'react';\nimport extractLengthList from './extractLengthList';\nimport { pickNotNil } from '../util';\nimport { NumberArray, NumberProp } from './types';\n\nconst fontRegExp = /^\\s*((?:(?:normal|bold|italic)\\s+)*)(?:(\\d+(?:\\.\\d+)?(?:%|px|em|pt|pc|mm|cm|in]))*(?:\\s*\\/.*?)?\\s+)?\\s*\"?([^\"]*)/i;\nconst fontFamilyPrefix = /^[\\s\"']*/;\nconst fontFamilySuffix = /[\\s\"']*$/;\nconst commaReg = /\\s*,\\s*/g;\n\nconst cachedFontObjectsFromString: {\n  [font: string]: {\n    fontStyle: string;\n    fontSize: NumberProp;\n    fontWeight: NumberProp;\n    fontFamily: string | null;\n  } | null;\n} = {};\n\nfunction extractSingleFontFamily(fontFamilyString?: string) {\n  // SVG on the web allows for multiple font-families to be specified.\n  // For compatibility, we extract the first font-family, hoping\n  // we'll get a match.\n  return fontFamilyString\n    ? fontFamilyString\n        .split(commaReg)[0]\n        .replace(fontFamilyPrefix, '')\n        .replace(fontFamilySuffix, '')\n    : null;\n}\n\nfunction parseFontString(font: string) {\n  if (cachedFontObjectsFromString.hasOwnProperty(font)) {\n    return cachedFontObjectsFromString[font];\n  }\n  const match = fontRegExp.exec(font);\n  if (!match) {\n    cachedFontObjectsFromString[font] = null;\n    return null;\n  }\n  const isBold = /bold/.exec(match[1]);\n  const isItalic = /italic/.exec(match[1]);\n  cachedFontObjectsFromString[font] = {\n    fontSize: match[2] || 12,\n    fontWeight: isBold ? 'bold' : 'normal',\n    fontStyle: isItalic ? 'italic' : 'normal',\n    fontFamily: extractSingleFontFamily(match[3]),\n  };\n  return cachedFontObjectsFromString[font];\n}\n\ninterface fontProps {\n  fontData?: unknown;\n  fontStyle?: string;\n  fontVariant?: string;\n  fontWeight?: NumberProp;\n  fontStretch?: string;\n  fontSize?: NumberProp;\n  fontFamily?: string;\n  textAnchor?: string;\n  textDecoration?: string;\n  letterSpacing?: NumberProp;\n  wordSpacing?: NumberProp;\n  kerning?: NumberProp;\n  fontFeatureSettings?: string;\n  fontVariantLigatures?: string;\n  fontVariationSettings?: string;\n  font?: string;\n}\n\nexport function extractFont(props: fontProps) {\n  const {\n    fontData,\n    fontStyle,\n    fontVariant,\n    fontWeight,\n    fontStretch,\n    fontSize,\n    fontFamily,\n    textAnchor,\n    textDecoration,\n    letterSpacing,\n    wordSpacing,\n    kerning,\n    fontFeatureSettings,\n    fontVariantLigatures,\n    fontVariationSettings,\n    font,\n  } = props;\n\n  const ownedFont = pickNotNil({\n    fontData,\n    fontStyle,\n    fontVariant,\n    fontWeight,\n    fontStretch,\n    fontSize,\n    fontFamily: extractSingleFontFamily(fontFamily),\n    textAnchor,\n    textDecoration,\n    letterSpacing,\n    wordSpacing,\n    kerning,\n    fontFeatureSettings,\n    fontVariantLigatures,\n    fontVariationSettings,\n  });\n\n  const baseFont = typeof font === 'string' ? parseFontString(font) : font;\n\n  return { ...baseFont, ...ownedFont };\n}\n\nlet TSpan: ComponentType;\n\nexport function setTSpan(TSpanImplementation: ComponentType) {\n  TSpan = TSpanImplementation;\n}\n\nfunction getChild(child: undefined | string | number | ComponentType) {\n  if (typeof child === 'string' || typeof child === 'number') {\n    return <TSpan>{String(child)}</TSpan>;\n  } else {\n    return child;\n  }\n}\n\nexport type TextProps = {\n  x?: NumberArray;\n  y?: NumberArray;\n  dx?: NumberArray;\n  dy?: NumberArray;\n  rotate?: NumberArray;\n  children?: string | number | (string | number | ComponentType)[];\n  inlineSize?: NumberProp;\n  baselineShift?: NumberProp;\n  verticalAlign?: NumberProp;\n  alignmentBaseline?: string;\n} & fontProps;\n\nexport default function extractText(props: TextProps, container: boolean) {\n  const {\n    x,\n    y,\n    dx,\n    dy,\n    rotate,\n    children,\n    inlineSize,\n    baselineShift,\n    verticalAlign,\n    alignmentBaseline,\n  } = props;\n\n  const textChildren =\n    typeof children === 'string' || typeof children === 'number' ? (\n      container ? (\n        <TSpan>{String(children)}</TSpan>\n      ) : null\n    ) : Children.count(children) > 1 || Array.isArray(children) ? (\n      Children.map(children, getChild)\n    ) : (\n      children\n    );\n\n  return {\n    content: textChildren === null ? String(children) : null,\n    children: textChildren,\n    inlineSize,\n    baselineShift,\n    verticalAlign,\n    alignmentBaseline,\n    font: extractFont(props),\n    x: extractLengthList(x),\n    y: extractLengthList(y),\n    dx: extractLengthList(dx),\n    dy: extractLengthList(dy),\n    rotate: extractLengthList(rotate),\n  };\n}\n"]}