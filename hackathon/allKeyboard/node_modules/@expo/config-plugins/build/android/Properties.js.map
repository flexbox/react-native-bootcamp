{"version":3,"sources":["../../src/android/Properties.ts"],"names":["parsePropertiesFile","contents","propertiesList","lines","split","i","length","line","trim","push","type","startsWith","value","substring","trimStart","eok","indexOf","key","slice","propertiesListToString","props","output","prop","Error"],"mappings":";;;;;;;;AAcO,SAASA,mBAAT,CAA6BC,QAA7B,EAAiE;AACtE,QAAMC,cAAgC,GAAG,EAAzC;AACA,QAAMC,KAAK,GAAGF,QAAQ,CAACG,KAAT,CAAe,IAAf,CAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,UAAME,IAAI,GAAGJ,KAAK,CAACE,CAAD,CAAL,CAASG,IAAT,EAAb;;AACA,QAAI,CAACD,IAAL,EAAW;AACTL,MAAAA,cAAc,CAACO,IAAf,CAAoB;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAApB;AACD,KAFD,MAEO,IAAIH,IAAI,CAACI,UAAL,CAAgB,GAAhB,CAAJ,EAA0B;AAC/BT,MAAAA,cAAc,CAACO,IAAf,CAAoB;AAAEC,QAAAA,IAAI,EAAE,SAAR;AAAmBE,QAAAA,KAAK,EAAEL,IAAI,CAACM,SAAL,CAAe,CAAf,EAAkBC,SAAlB;AAA1B,OAApB;AACD,KAFM,MAEA;AACL,YAAMC,GAAG,GAAGR,IAAI,CAACS,OAAL,CAAa,GAAb,CAAZ;AACA,YAAMC,GAAG,GAAGV,IAAI,CAACW,KAAL,CAAW,CAAX,EAAcH,GAAd,CAAZ;AACA,YAAMH,KAAK,GAAGL,IAAI,CAACW,KAAL,CAAWH,GAAG,GAAG,CAAjB,EAAoBR,IAAI,CAACD,MAAzB,CAAd;AACAJ,MAAAA,cAAc,CAACO,IAAf,CAAoB;AAAEC,QAAAA,IAAI,EAAE,UAAR;AAAoBO,QAAAA,GAApB;AAAyBL,QAAAA;AAAzB,OAApB;AACD;AACF;;AAED,SAAOV,cAAP;AACD;;AAEM,SAASiB,sBAAT,CAAgCC,KAAhC,EAAiE;AACtE,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIhB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGe,KAAK,CAACd,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,UAAMiB,IAAI,GAAGF,KAAK,CAACf,CAAD,CAAlB;;AACA,QAAIiB,IAAI,CAACZ,IAAL,KAAc,OAAlB,EAA2B;AACzBW,MAAAA,MAAM,IAAI,EAAV;AACD,KAFD,MAEO,IAAIC,IAAI,CAACZ,IAAL,KAAc,SAAlB,EAA6B;AAClCW,MAAAA,MAAM,IAAI,OAAOC,IAAI,CAACV,KAAtB;AACD,KAFM,MAEA,IAAIU,IAAI,CAACZ,IAAL,KAAc,UAAlB,EAA8B;AACnCW,MAAAA,MAAM,IAAK,GAAEC,IAAI,CAACL,GAAI,IAAGK,IAAI,CAACV,KAAM,EAApC;AACD,KAFM,MAEA;AACL;AACA,YAAM,IAAIW,KAAJ,CAAW,4BAA2BD,IAAI,CAACZ,IAAK,GAAhD,CAAN;AACD;;AACD,QAAIL,CAAC,GAAGe,KAAK,CAACd,MAAN,GAAe,CAAvB,EAA0B;AACxBe,MAAAA,MAAM,IAAI,IAAV;AACD;AACF;;AACD,SAAOA,MAAP;AACD","sourcesContent":["export type PropertiesItem =\n  | {\n      type: 'comment';\n      value: string;\n    }\n  | {\n      type: 'empty';\n    }\n  | {\n      type: 'property';\n      key: string;\n      value: string;\n    };\n\nexport function parsePropertiesFile(contents: string): PropertiesItem[] {\n  const propertiesList: PropertiesItem[] = [];\n  const lines = contents.split('\\n');\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (!line) {\n      propertiesList.push({ type: 'empty' });\n    } else if (line.startsWith('#')) {\n      propertiesList.push({ type: 'comment', value: line.substring(1).trimStart() });\n    } else {\n      const eok = line.indexOf('=');\n      const key = line.slice(0, eok);\n      const value = line.slice(eok + 1, line.length);\n      propertiesList.push({ type: 'property', key, value });\n    }\n  }\n\n  return propertiesList;\n}\n\nexport function propertiesListToString(props: PropertiesItem[]): string {\n  let output = '';\n  for (let i = 0; i < props.length; i++) {\n    const prop = props[i];\n    if (prop.type === 'empty') {\n      output += '';\n    } else if (prop.type === 'comment') {\n      output += '# ' + prop.value;\n    } else if (prop.type === 'property') {\n      output += `${prop.key}=${prop.value}`;\n    } else {\n      // @ts-ignore: assertion\n      throw new Error(`Invalid properties type \"${prop.type}\"`);\n    }\n    if (i < props.length - 1) {\n      output += '\\n';\n    }\n  }\n  return output;\n}\n"],"file":"Properties.js"}