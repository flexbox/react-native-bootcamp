{"version":3,"sources":["../../src/tools/installPods.ts"],"names":["runPodInstall","loader","projectName","shouldHandleRepoUpdate","start","chalk","dim","error","stderr","stdout","includes","runPodUpdate","fail","Error","underline","logger","log","runSudo","command","Promise","resolve","reject","sudo","exec","name","promptCocoaPodsInstallationQuestion","promptQuestion","reset","bold","installWithGem","installWithHomebrew","installMethod","type","message","choices","title","value","installCocoaPodsWithGem","options","_error","join","installCocoaPods","stop","succeed","pkg","label","installPods","NoopLoader","fs","existsSync","process","chdir","hasPods","e","info"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport execa from 'execa';\nimport chalk from 'chalk';\nimport ora from 'ora';\nimport prompts from 'prompts';\nimport {logger} from '@react-native-community/cli-tools';\nimport {NoopLoader} from './loader';\n// @ts-ignore untyped\nimport sudo from 'sudo-prompt';\nimport {brewInstall} from './brewInstall';\n\ntype PromptCocoaPodsInstallation = {\n  installMethod: 'gem' | 'homebrew';\n  promptQuestion: string;\n};\n\nasync function runPodInstall(\n  loader: ora.Ora,\n  projectName: string,\n  shouldHandleRepoUpdate: boolean = true,\n) {\n  try {\n    loader.start(\n      `Installing CocoaPods dependencies ${chalk.dim(\n        '(this may take a few minutes)',\n      )}`,\n    );\n    await execa('pod', ['install']);\n  } catch (error) {\n    // \"pod\" command outputs errors to stdout (at least some of them)\n    const stderr = error.stderr || error.stdout;\n\n    /**\n     * If CocoaPods failed due to repo being out of date, it will\n     * include the update command in the error message.\n     *\n     * `shouldHandleRepoUpdate` will be set to `false` to\n     * prevent infinite loop (unlikely scenario)\n     */\n    if (stderr.includes('pod repo update') && shouldHandleRepoUpdate) {\n      await runPodUpdate(loader);\n      await runPodInstall(loader, projectName, false);\n    } else {\n      loader.fail();\n      throw new Error(\n        `Failed to install CocoaPods dependencies for iOS project, which is required by this template.\\nPlease try again manually: \"cd ./${projectName}/ios && pod install\".\\nCocoaPods documentation: ${chalk.dim.underline(\n          'https://cocoapods.org/',\n        )}`,\n      );\n    }\n  }\n}\n\nasync function runPodUpdate(loader: ora.Ora) {\n  try {\n    loader.start(\n      `Updating CocoaPods repositories ${chalk.dim(\n        '(this may take a few minutes)',\n      )}`,\n    );\n    await execa('pod', ['repo', 'update']);\n  } catch (error) {\n    // \"pod\" command outputs errors to stdout (at least some of them)\n    logger.log(error.stderr || error.stdout);\n    loader.fail();\n\n    throw new Error(\n      `Failed to update CocoaPods repositories for iOS project.\\nPlease try again manually: \"pod repo update\".\\nCocoaPods documentation: ${chalk.dim.underline(\n        'https://cocoapods.org/',\n      )}`,\n    );\n  }\n}\n\nfunction runSudo(command: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    sudo.exec(command, {name: 'React Native CLI'}, (error) => {\n      if (error) {\n        reject(error);\n      }\n\n      resolve();\n    });\n  });\n}\n\nasync function promptCocoaPodsInstallationQuestion(): Promise<\n  PromptCocoaPodsInstallation\n> {\n  const promptQuestion = `CocoaPods ${chalk.dim.underline(\n    '(https://cocoapods.org/)',\n  )} ${chalk.reset.bold(\n    'is not installed. CocoaPods is necessary for the iOS project to run correctly. Do you want to install it?',\n  )}`;\n  const installWithGem = 'Yes, with gem (may require sudo)';\n  const installWithHomebrew = 'Yes, with Homebrew';\n\n  const {installMethod} = await prompts([\n    {\n      type: 'select',\n      name: 'installMethod',\n      message: promptQuestion,\n      choices: [\n        {title: installWithGem, value: 'gem'},\n        {title: installWithHomebrew, value: 'homebrew'},\n      ],\n    },\n  ]);\n\n  return {\n    installMethod,\n    // This is used for removing the message in `doctor` after it's answered\n    promptQuestion: `? ${promptQuestion} ${\n      installMethod === 'gem' ? installWithGem : installWithHomebrew\n    }`,\n  };\n}\n\nasync function installCocoaPodsWithGem() {\n  const options = ['install', 'cocoapods', '--no-document'];\n\n  try {\n    // First attempt to install `cocoapods`\n    await execa('gem', options);\n  } catch (_error) {\n    // If that doesn't work then try with sudo\n    await runSudo(`gem ${options.join(' ')}`);\n  }\n}\n\nasync function installCocoaPods(loader: ora.Ora) {\n  loader.stop();\n\n  const {installMethod} = await promptCocoaPodsInstallationQuestion();\n\n  if (installMethod === 'gem') {\n    loader.start('Installing CocoaPods');\n\n    try {\n      await installCocoaPodsWithGem();\n\n      return loader.succeed();\n    } catch (error) {\n      loader.fail();\n      logger.error(error.stderr);\n\n      throw new Error(\n        `An error occured while trying to install CocoaPods, which is required by this template.\\nPlease try again manually: sudo gem install cocoapods.\\nCocoaPods documentation: ${chalk.dim.underline(\n          'https://cocoapods.org/',\n        )}`,\n      );\n    }\n  }\n\n  if (installMethod === 'homebrew') {\n    return await brewInstall({\n      pkg: 'cocoapods',\n      label: 'Installing CocoaPods',\n      loader,\n    });\n  }\n}\n\nasync function installPods({\n  projectName,\n  loader,\n}: {\n  projectName: string;\n  loader?: ora.Ora;\n}) {\n  loader = loader || new NoopLoader();\n  try {\n    if (!fs.existsSync('ios')) {\n      return;\n    }\n\n    process.chdir('ios');\n\n    const hasPods = fs.existsSync('Podfile');\n\n    if (!hasPods) {\n      return;\n    }\n\n    try {\n      // Check if \"pod\" is available and usable. It happens that there are\n      // multiple versions of \"pod\" command and even though it's there, it exits\n      // with a failure\n      await execa('pod', ['--version']);\n    } catch (e) {\n      loader.info();\n      await installCocoaPods(loader);\n    }\n\n    await runPodInstall(loader, projectName);\n  } catch (error) {\n    throw error;\n  } finally {\n    process.chdir('..');\n  }\n}\n\nexport {promptCocoaPodsInstallationQuestion, runSudo, installCocoaPods};\n\nexport default installPods;\n"]}