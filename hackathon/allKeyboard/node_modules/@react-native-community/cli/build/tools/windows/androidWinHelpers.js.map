{"version":3,"sources":["../../../src/tools/windows/androidWinHelpers.ts"],"names":["getUserAndroidPath","process","env","LOCALAPPDATA","getAndroidSdkRootInstallation","ANDROID_SDK_ROOT","ANDROID_HOME","installPath","installComponent","component","androidSdkRoot","Promise","done","error","sdkmanager","command","child","stderr","stdout","on","data","includes","stdin","write","toString","exitStatus","parseHypervisor","status","customHypervisor","hypervisor","installed","test","getEmulatorAccelOutputInformation","androidSDKRoot","e","createAVD","name","device","image","abi","tag","avdmanager","configPath","HOMEPATH","content","updatedContent","replace","getBestHypervisor","lines","split","line","enableWHPX","enableHAXM","androidSdkInstallPath","enableAMDH"],"mappings":"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","sourcesContent":["import {readFile, writeFile, pathExistsSync} from 'fs-extra';\nimport {join} from 'path';\nimport {executeCommand} from './executeWinCommand';\nimport {getProcessorType} from './processorType';\n\ntype HypervisorStatus = {\n  hypervisor: 'WHPX' | 'HAXM' | 'AMDH' | 'none';\n  installed: boolean;\n};\n\n/**\n * Returns the path to where all Android related things should be installed\n * locally to the user.\n */\nexport const getUserAndroidPath = () => {\n  return join(process.env.LOCALAPPDATA || '', 'Android');\n};\n\n/**\n * Deals with ANDROID_HOME, ANDROID_SDK_ROOT or generates a new one\n */\nexport const getAndroidSdkRootInstallation = () => {\n  const env = process.env.ANDROID_SDK_ROOT || process.env.ANDROID_HOME;\n  const installPath = env\n    ? // Happens if previous installations or not fully completed\n      env\n    : // All Android zip files have a root folder, using `Android` as the common place\n      join(getUserAndroidPath(), 'Sdk');\n\n  if (pathExistsSync(installPath)) {\n    return installPath;\n  } else {\n    return '';\n  }\n};\n\n/**\n * Installs an Android component (e.g.: `platform-tools`, `emulator`)\n * using the `sdkmanager` tool and automatically accepting the licenses.\n */\nexport const installComponent = (component: string, androidSdkRoot: string) => {\n  return new Promise((done, error) => {\n    const sdkmanager = join(androidSdkRoot, 'tools', 'bin', 'sdkmanager.bat');\n\n    const command = `\"${sdkmanager}\" --sdk_root=\"${androidSdkRoot}\" \"${component}\"`;\n\n    const child = executeCommand(command);\n    let stderr = '';\n\n    child.stdout.on('data', (data) => {\n      if (data.includes('(y/N)')) {\n        child.stdin.write('y\\n');\n      }\n    });\n\n    child.stderr.on('data', (data) => {\n      stderr += data.toString('utf-8');\n    });\n\n    child.on('close', (exitStatus) => {\n      if (exitStatus === 0) {\n        done();\n      } else {\n        error({stderr});\n      }\n    });\n    child.on('error', error);\n  });\n};\n\n/**\n * For the given custom Hypervisor and the output of `emulator-check accel`\n * returns the preferred Hypervisor to use and its installation status.\n * The recommendation order is:\n * 1. WHPX\n * 2. HAXM if Intel\n * 3. AMDH if AMD\n */\nconst parseHypervisor = (\n  status: string,\n  customHypervisor: 'HAXM' | 'AMDH',\n): HypervisorStatus | null => {\n  /**\n   * Messages:\n   * Android Emulator requires an Intel processor with VT-x and NX support.  Your CPU: 'AuthenticAMD'\n   * HAXM is not installed, but Windows Hypervisor Platform is available.\n   * WHPX (10.0.19041) is installed and usable.\n   * * This message outputs for WHPX and when the AMD Hypervisor is installed\n   * HAXM version 6.2.1 (4) is installed and usable.\n   * HAXM is not installed on this machine\n   */\n\n  if (\n    status.includes(\n      'is not installed, but Windows Hypervisor Platform is available.',\n    )\n  ) {\n    return {\n      hypervisor: 'WHPX',\n      installed: false,\n    };\n  }\n\n  if (/WHPX \\((\\d|\\.)+\\) is installed and usable\\./.test(status)) {\n    return {\n      hypervisor: 'WHPX',\n      installed: true,\n    };\n  }\n\n  if (/is installed and usable\\./.test(status)) {\n    return {\n      hypervisor: customHypervisor,\n      installed: true,\n    };\n  }\n\n  if (status.includes(\"Your CPU: 'AuthenticAMD'\")) {\n    return {\n      hypervisor: customHypervisor,\n      installed: false,\n    };\n  }\n\n  if (status.includes('is not installed on this machine')) {\n    return {\n      hypervisor: 'none',\n      installed: false,\n    };\n  }\n\n  return null;\n};\n\nconst getEmulatorAccelOutputInformation = async (androidSDKRoot: string) => {\n  /**\n   * The output of the following command is something like:\n   *\n   * ```\n   * accel:\n   * 0\n   * WHPX (10.0.19041) is installed and usable.\n   * accel\n   * ```\n   *\n   * If it fails it will still output to stdout with a similar format:\n   *\n   * ```\n   * accel:\n   * 1\n   * Android Emulator does not support nested virtualization.  Your VM host: 'Microsoft Hv' (Hyper-V)\n   * accel\n   * ```\n   *\n   */\n\n  try {\n    const {stdout} = await executeCommand(\n      `\"${join(androidSDKRoot, 'emulator', 'emulator-check.exe')}\" accel`,\n    );\n\n    return stdout;\n  } catch (e) {\n    const {stdout} = e;\n\n    return stdout;\n  }\n};\n\n/**\n * Creates a new Android Virtual Device in the default folder with the\n * name, device and system image passed by parameter.\n */\nexport const createAVD = async (\n  androidSDKRoot: string,\n  name: string,\n  device: string,\n  image: string,\n) => {\n  try {\n    const abi = image.includes('x86_64') ? 'x86_64' : 'x86';\n    const tag = image.includes('google_apis') ? 'google_apis' : 'generic';\n    const avdmanager = join(androidSDKRoot, 'tools', 'bin', 'avdmanager.bat');\n\n    const {stdout} = await executeCommand(\n      `${avdmanager} -s create avd --force --name \"${name}\" --device \"${device}\" --package \"${image}\" --tag \"${tag}\" --abi \"${abi}\"`,\n    );\n\n    // For some reason `image.sysdir.1` in `config.ini` points to the wrong location and needs to be updated\n    const configPath = join(\n      process.env.HOMEPATH || '',\n      '.android',\n      'avd',\n      `${name}.avd`,\n      'config.ini',\n    );\n\n    const content = await readFile(configPath, 'utf-8');\n    const updatedContent = content.replace(\n      /Sdk\\\\system-images/g,\n      'system-images',\n    );\n\n    await writeFile(configPath, updatedContent, 'utf-8');\n\n    return stdout;\n  } catch (e) {\n    const {stderr} = e;\n\n    return stderr;\n  }\n};\n\n/**\n * Returns what hypervisor should be installed for the Android emulator\n * using [Microsoft's official\n * documentation](https://docs.microsoft.com/en-us/xamarin/android/get-started/installation/android-emulator/hardware-acceleration?pivots=windows)\n * as a reference.\n */\nexport const getBestHypervisor = async (\n  androidSDKRoot: string,\n): Promise<HypervisorStatus> => {\n  const customHypervisor = getProcessorType() === 'Intel' ? 'HAXM' : 'AMDH';\n\n  const stdout = await getEmulatorAccelOutputInformation(androidSDKRoot);\n\n  const lines = stdout.split('\\n');\n\n  for (const line of lines) {\n    const hypervisor = parseHypervisor(line, customHypervisor);\n\n    if (hypervisor) {\n      return hypervisor;\n    }\n  }\n\n  // Couldn't identify the best one to run so not doing anything\n  return {\n    hypervisor: 'none',\n    installed: false,\n  };\n};\n\n/**\n * Enables the Windows HypervisorPlatform and Hyper-V features.\n * Will prompt the User Account Control (UAC)\n */\nexport const enableWHPX = () => {\n  return executeCommand(\n    'DISM /Quiet /NoRestart /Online /Enable-Feature /All /FeatureName:Microsoft-Hyper-V /FeatureName:HypervisorPlatform',\n    true,\n  );\n};\n\n/**\n * Installs and enables the [HAXM](https://github.com/intel/haxm)\n * version available through the Android SDK manager.\n * @param androidSdkInstallPath The path to the Android SDK installation\n */\nexport const enableHAXM = async (androidSdkInstallPath: string) => {\n  await installComponent(\n    'extras;intel;Hardware_Accelerated_Execution_Manager',\n    androidSdkInstallPath,\n  );\n\n  await executeCommand(\n    join(\n      androidSdkInstallPath,\n      'Sdk',\n      'extras',\n      'intel',\n      'Hardware_Accelerated_Execution_Manager',\n      'silent_install.bat',\n    ),\n  );\n};\n\n/**\n * Installs and enables the\n * [Hypervisor Driver for AMD Processors](https://androidstudio.googleblog.com/2019/10/android-emulator-hypervisor-driver-for.html)\n * version available through the Android SDK manager.\n * @param androidSdkInstallPath The path to the Android SDK installation\n */\nexport const enableAMDH = async (androidSdkInstallPath: string) => {\n  await installComponent(\n    'extras;google;Android_Emulator_Hypervisor_Driver',\n    androidSdkInstallPath,\n  );\n\n  await executeCommand(\n    join(\n      androidSdkInstallPath,\n      'Sdk',\n      'extras',\n      'google',\n      'Android_Emulator_Hypervisor_Driver',\n      'silent_install.bat',\n    ),\n  );\n};\n"]}