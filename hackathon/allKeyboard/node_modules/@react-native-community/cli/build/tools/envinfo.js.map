{"version":3,"sources":["../../src/tools/envinfo.ts"],"names":["getEnvironmentInfo","json","options","showNotFound","packages","outOfTreePlatforms","darwin","win32","outOfTreePlatformPackage","push","info","envinfo","run","System","Binaries","IDEs","Managers","Languages","SDKs","npmPackages","npmGlobalPackages","JSON","parse","trim"],"mappings":";;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAHA;AAcA,eAAeA,kBAAf,CACEC,IAAI,GAAG,IADT,EAEqC;AACnC,QAAMC,OAAO,GAAG;AAACD,IAAAA,IAAD;AAAOE,IAAAA,YAAY,EAAE;AAArB,GAAhB;AAEA,MAAIC,QAAQ,GAAG,CAAC,OAAD,EAAU,cAAV,EAA0B,6BAA1B,CAAf;AAEA,QAAMC,kBAA2C,GAAG;AAClDC,IAAAA,MAAM,EAAE,oBAD0C;AAElDC,IAAAA,KAAK,EAAE;AAF2C,GAApD;AAKA,QAAMC,wBAAwB,GAAGH,kBAAkB,CAAC,qBAAD,CAAnD;;AACA,MAAIG,wBAAJ,EAA8B;AAC5BJ,IAAAA,QAAQ,CAACK,IAAT,CAAcD,wBAAd;AACD;;AAED,QAAME,IAAI,GAAI,MAAMC,mBAAQC,GAAR,CAClB;AACEC,IAAAA,MAAM,EAAE,CAAC,IAAD,EAAO,KAAP,EAAc,QAAd,EAAwB,OAAxB,CADV;AAEEC,IAAAA,QAAQ,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,KAAjB,EAAwB,UAAxB,CAFZ;AAGEC,IAAAA,IAAI,EAAE,CAAC,OAAD,EAAU,gBAAV,EAA4B,eAA5B,CAHR;AAIEC,IAAAA,QAAQ,EAAE,CAAC,WAAD,CAJZ;AAKEC,IAAAA,SAAS,EAAE,CAAC,MAAD,CALb;AAMEC,IAAAA,IAAI,EAAE,CAAC,SAAD,EAAY,aAAZ,EAA2B,aAA3B,CANR;AAOEC,IAAAA,WAAW,EAAEf,QAPf;AAQEgB,IAAAA,iBAAiB,EAAE,CAAC,gBAAD;AARrB,GADkB,EAWlBlB,OAXkB,CAApB;;AAcA,MAAIA,OAAO,CAACD,IAAZ,EAAkB;AAChB,WAAOoB,IAAI,CAACC,KAAL,CAAWZ,IAAX,CAAP;AACD;;AAED,SAAOA,IAAI,CAACa,IAAL,EAAP;AACD;;eAEcvB,kB","sourcesContent":["// @ts-ignore\nimport envinfo from 'envinfo';\nimport {EnvironmentInfo} from '@react-native-community/cli-types';\nimport {platform} from 'os';\n\n/**\n * Returns information about the running system.\n * If `json === true`, or no options are passed,\n * the return type will be an `EnvironmentInfo`.\n * If set to `false`, it will be a `string`.\n */\nasync function getEnvironmentInfo(): Promise<EnvironmentInfo>;\nasync function getEnvironmentInfo(json: true): Promise<EnvironmentInfo>;\nasync function getEnvironmentInfo(json: false): Promise<string>;\nasync function getEnvironmentInfo(\n  json = true,\n): Promise<string | EnvironmentInfo> {\n  const options = {json, showNotFound: true};\n\n  let packages = ['react', 'react-native', '@react-native-community/cli'];\n\n  const outOfTreePlatforms: {[key: string]: string} = {\n    darwin: 'react-native-macos',\n    win32: 'react-native-windows',\n  };\n\n  const outOfTreePlatformPackage = outOfTreePlatforms[platform()];\n  if (outOfTreePlatformPackage) {\n    packages.push(outOfTreePlatformPackage);\n  }\n\n  const info = (await envinfo.run(\n    {\n      System: ['OS', 'CPU', 'Memory', 'Shell'],\n      Binaries: ['Node', 'Yarn', 'npm', 'Watchman'],\n      IDEs: ['Xcode', 'Android Studio', 'Visual Studio'],\n      Managers: ['CocoaPods'],\n      Languages: ['Java'],\n      SDKs: ['iOS SDK', 'Android SDK', 'Windows SDK'],\n      npmPackages: packages,\n      npmGlobalPackages: ['*react-native*'],\n    },\n    options,\n  )) as string;\n\n  if (options.json) {\n    return JSON.parse(info);\n  }\n\n  return info.trim();\n}\n\nexport default getEnvironmentInfo;\n"]}