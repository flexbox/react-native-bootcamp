{"version":3,"sources":["../../../src/commands/link/unlink.ts"],"names":["unlinkDependency","platforms","project","dependency","packageName","otherDependencies","Object","keys","forEach","platform","projectConfig","dependencyConfig","linkConfig","isInstalled","unregister","logger","info","name","unlink","args","ctx","opts","debug","map","getPlatformName","join","dependencies","CLIError","hooks","preunlink","postunlink","error","message","assets","d","length","unlinkAssets","func","description","options","parse","val","toLowerCase","split"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {flatMap, values, difference, pick} from 'lodash';\nimport {logger, CLIError} from '@react-native-community/cli-tools';\nimport {\n  Config,\n  Dependency,\n  AndroidDependencyConfig,\n  AndroidProjectConfig,\n  IOSDependencyConfig,\n  IOSProjectConfig,\n} from '@react-native-community/cli-types';\nimport getPlatformName from './getPlatformName';\nimport makeHook from './makeHook';\nimport printDeprecationWarning from './printDeprecationWarning';\n\ntype Flags = {\n  platforms?: Array<string>;\n};\n\nconst unlinkDependency = (\n  platforms: Config['platforms'],\n  project: Config['project'],\n  dependency: Dependency,\n  packageName: string,\n  otherDependencies: Array<Dependency>,\n) => {\n  printDeprecationWarning('react-native unlink [packageName]');\n  Object.keys(platforms || {}).forEach((platform) => {\n    const projectConfig: AndroidProjectConfig | IOSProjectConfig =\n      project[platform];\n    const dependencyConfig: AndroidDependencyConfig | IOSDependencyConfig =\n      dependency.platforms[platform];\n    if (!projectConfig || !dependencyConfig) {\n      return;\n    }\n\n    const linkConfig =\n      platforms[platform] &&\n      platforms[platform].linkConfig &&\n      platforms[platform].linkConfig();\n\n    if (!linkConfig || !linkConfig.isInstalled || !linkConfig.unregister) {\n      return;\n    }\n\n    const isInstalled = linkConfig.isInstalled(\n      projectConfig,\n      packageName,\n      dependencyConfig,\n    );\n\n    if (!isInstalled) {\n      logger.info(\n        `${getPlatformName(platform)} module \"${packageName}\" is not installed`,\n      );\n      return;\n    }\n\n    logger.info(\n      `Unlinking \"${packageName}\" ${getPlatformName(platform)} dependency`,\n    );\n\n    linkConfig.unregister(\n      packageName,\n      dependencyConfig,\n      projectConfig,\n      otherDependencies,\n    );\n\n    logger.info(\n      `${getPlatformName(platform)} module \"${\n        dependency.name\n      }\" has been successfully unlinked`,\n    );\n  });\n};\n\n/**\n * Updates project and unlink specific dependency\n *\n * If optional argument [packageName] is provided, it's the only one\n * that's checked\n */\nasync function unlink(args: Array<string>, ctx: Config, opts: Flags) {\n  const packageName = args[0];\n  let platforms = ctx.platforms;\n\n  if (opts.platforms) {\n    // @ts-ignore\n    platforms = pick(platforms, opts.platforms);\n    logger.debug('Skipping selected platforms');\n  }\n\n  logger.debug(\n    `Available platforms: ${Object.keys(platforms)\n      .map(getPlatformName)\n      .join(', ')}`,\n  );\n\n  const {[packageName]: dependency, ...otherDependencies} = ctx.dependencies;\n\n  if (!dependency) {\n    throw new CLIError(`\n      Failed to unlink \"${packageName}\". It appears that the project is not linked yet.\n    `);\n  }\n\n  const dependencies = values(otherDependencies);\n  try {\n    if (dependency.hooks.preunlink) {\n      await makeHook(dependency.hooks.preunlink)();\n    }\n    unlinkDependency(\n      platforms,\n      ctx.project,\n      dependency,\n      packageName,\n      dependencies,\n    );\n    if (dependency.hooks.postunlink) {\n      await makeHook(dependency.hooks.postunlink)();\n    }\n  } catch (error) {\n    throw new CLIError(\n      `Something went wrong while unlinking. Reason ${error.message}`,\n      error,\n    );\n  }\n\n  // @todo move all these to above try/catch\n  // @todo it is possible we could be unlinking some project assets in case of duplicate\n  const assets = difference(\n    dependency.assets,\n    flatMap(dependencies, (d) => d.assets),\n  );\n\n  if (assets.length === 0) {\n    return;\n  }\n\n  Object.keys(platforms || {}).forEach((platform) => {\n    const projectConfig = ctx.project[platform];\n    const linkConfig =\n      platforms[platform] &&\n      platforms[platform].linkConfig &&\n      platforms[platform].linkConfig();\n    if (!linkConfig || !linkConfig.unlinkAssets || !projectConfig) {\n      return;\n    }\n\n    logger.info(`Unlinking assets from ${platform} project`);\n\n    linkConfig.unlinkAssets(assets, projectConfig);\n  });\n\n  logger.info(\n    `${packageName} assets has been successfully unlinked from your project`,\n  );\n}\n\nexport default {\n  func: unlink,\n  description: 'unlink native dependency',\n  name: 'unlink <packageName>',\n  options: [\n    {\n      name: '--platforms [list]',\n      description: 'Scope unlinking to specified platforms',\n      parse: (val: string) => val.toLowerCase().split(','),\n    },\n  ],\n};\n"]}