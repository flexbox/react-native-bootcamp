{"version":3,"sources":["../../../src/commands/link/link.ts"],"names":["link","rawPackageName","ctx","opts","platforms","project","logger","debug","Object","keys","map","getPlatformName","join","undefined","linkDeps","all","linkAssets","packageName","replace","dependencies","includes","CLIError","dependency","hooks","prelink","postlink","assets","error","chalk","bold","name","func","description","options","parse","val","toLowerCase","split"],"mappings":";;;;;;;AAQA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAjBA;;;;;;;;AAwBA;;;;;;AAMA,eAAeA,IAAf,CACE,CAACC,cAAD,CADF,EAEEC,GAFF,EAGEC,IAHF,EAIE;AACA,MAAIC,SAAS,GAAGF,GAAG,CAACE,SAApB;AACA,MAAIC,OAAO,GAAGH,GAAG,CAACG,OAAlB;;AAEA,MAAIF,IAAI,CAACC,SAAT,EAAoB;AAClB;AACAA,IAAAA,SAAS,GAAG,oBAAKA,SAAL,EAAgBD,IAAI,CAACC,SAArB,CAAZ;;AACAE,uBAAOC,KAAP,CAAa,6BAAb;AACD;;AAEDD,qBAAOC,KAAP,CACE,0BACG,GAAEC,MAAM,CAACC,IAAP,CAAYL,SAAZ,EAAuBM,GAAvB,CAA2BC,wBAA3B,EAA4CC,IAA5C,CAAiD,IAAjD,CAAuD,EAF9D;;AAKA,MAAIX,cAAc,KAAKY,SAAvB,EAAkC;AAChCP,uBAAOC,KAAP,CAAa,0DAAb;;AACA,WAAO,sBAAQL,GAAR,EAAa;AAACY,MAAAA,QAAQ,EAAEX,IAAI,CAACY,GAAhB;AAAqBC,MAAAA,UAAU,EAAE;AAAjC,KAAb,CAAP;AACD;;AAED,wCAAwB,iCAAxB,EApBA,CAsBA;;AACA,QAAMC,WAAW,GAAGhB,cAAc,CAACiB,OAAf,CAAuB,iBAAvB,EAA0C,IAA1C,CAApB;;AAEA,MAAI,CAACV,MAAM,CAACC,IAAP,CAAYP,GAAG,CAACiB,YAAhB,EAA8BC,QAA9B,CAAuCH,WAAvC,CAAL,EAA0D;AACxD,UAAM,KAAII,oBAAJ,EAAc;;;KAAd,CAAN;AAID;;AAED,QAAM;AAAC,KAACJ,WAAD,GAAeK;AAAhB,MAA8BpB,GAAG,CAACiB,YAAxC;;AAEAb,qBAAOC,KAAP,CAAc,oBAAmBN,cAAe,EAAhD;;AAEA,MAAI;AACF,QAAIqB,UAAU,CAACC,KAAX,CAAiBC,OAArB,EAA8B;AAC5B,YAAM,uBAASF,UAAU,CAACC,KAAX,CAAiBC,OAA1B,GAAN;AACD;;AACD,UAAM,6BAAepB,SAAf,EAA0BC,OAA1B,EAAmCiB,UAAnC,CAAN;;AACA,QAAIA,UAAU,CAACC,KAAX,CAAiBE,QAArB,EAA+B;AAC7B,YAAM,uBAASH,UAAU,CAACC,KAAX,CAAiBE,QAA1B,GAAN;AACD;;AACD,UAAM,yBAAWrB,SAAX,EAAsBC,OAAtB,EAA+BiB,UAAU,CAACI,MAA1C,CAAN;AACD,GATD,CASE,OAAOC,KAAP,EAAc;AACd,UAAM,KAAIN,oBAAJ,EACH,YAAWO,iBAAMC,IAAN,CAAWP,UAAU,CAACQ,IAAtB,CAA4B,WADpC,EAEJH,KAFI,CAAN;AAID;AACF;;AAEM,MAAMI,IAAI,GAAG/B,IAAb;;eAEQ;AACb+B,EAAAA,IAAI,EAAE/B,IADO;AAEbgC,EAAAA,WAAW,EAAE,4CAFA;AAGbF,EAAAA,IAAI,EAAE,oBAHO;AAIbG,EAAAA,OAAO,EAAE,CACP;AACEH,IAAAA,IAAI,EAAE,oBADR;AAEEE,IAAAA,WAAW,EAAE,sCAFf;AAGEE,IAAAA,KAAK,EAAGC,GAAD,IAAiBA,GAAG,CAACC,WAAJ,GAAkBC,KAAlB,CAAwB,GAAxB;AAH1B,GADO,EAMP;AACEP,IAAAA,IAAI,EAAE,OADR;AAEEE,IAAAA,WAAW,EAAE;AAFf,GANO;AAJI,C","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport chalk from 'chalk';\nimport {pick} from 'lodash';\nimport {logger, CLIError} from '@react-native-community/cli-tools';\nimport {Config} from '@react-native-community/cli-types';\nimport getPlatformName from './getPlatformName';\nimport linkDependency from './linkDependency';\nimport linkAssets from './linkAssets';\nimport linkAll from './linkAll';\nimport makeHook from './makeHook';\nimport printDeprecationWarning from './printDeprecationWarning';\n\ntype FlagsType = {\n  platforms?: Array<string>;\n  all?: boolean;\n};\n\n/**\n * Updates project and links all dependencies to it.\n *\n * @param args If optional argument [packageName] is provided,\n *             only that package is processed.\n */\nasync function link(\n  [rawPackageName]: Array<string>,\n  ctx: Config,\n  opts: FlagsType,\n) {\n  let platforms = ctx.platforms;\n  let project = ctx.project;\n\n  if (opts.platforms) {\n    // @ts-ignore\n    platforms = pick(platforms, opts.platforms);\n    logger.debug('Skipping selected platforms');\n  }\n\n  logger.debug(\n    'Available platforms: ' +\n      `${Object.keys(platforms).map(getPlatformName).join(', ')}`,\n  );\n\n  if (rawPackageName === undefined) {\n    logger.debug('No package name provided, will link all possible assets.');\n    return linkAll(ctx, {linkDeps: opts.all, linkAssets: true});\n  }\n\n  printDeprecationWarning('react-native link [packageName]');\n\n  // Trim the version / tag out of the package name (eg. package@latest)\n  const packageName = rawPackageName.replace(/^(.+?)(@.+?)$/gi, '$1');\n\n  if (!Object.keys(ctx.dependencies).includes(packageName)) {\n    throw new CLIError(`\n      Unknown dependency. Make sure that the package you are trying to link is\n      already installed in your \"node_modules\" and present in your \"package.json\" dependencies.\n    `);\n  }\n\n  const {[packageName]: dependency} = ctx.dependencies;\n\n  logger.debug(`Package to link: ${rawPackageName}`);\n\n  try {\n    if (dependency.hooks.prelink) {\n      await makeHook(dependency.hooks.prelink)();\n    }\n    await linkDependency(platforms, project, dependency);\n    if (dependency.hooks.postlink) {\n      await makeHook(dependency.hooks.postlink)();\n    }\n    await linkAssets(platforms, project, dependency.assets);\n  } catch (error) {\n    throw new CLIError(\n      `Linking \"${chalk.bold(dependency.name)}\" failed.`,\n      error,\n    );\n  }\n}\n\nexport const func = link;\n\nexport default {\n  func: link,\n  description: 'links assets and optionally native modules',\n  name: 'link [packageName]',\n  options: [\n    {\n      name: '--platforms [list]',\n      description: 'Scope linking to specified platforms',\n      parse: (val: string) => val.toLowerCase().split(','),\n    },\n    {\n      name: '--all',\n      description: 'Link all native modules and assets',\n    },\n  ],\n};\n"]}