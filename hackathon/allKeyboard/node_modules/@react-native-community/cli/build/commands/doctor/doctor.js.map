{"version":3,"sources":["../../../src/commands/doctor/doctor.ts"],"names":["printCategory","label","key","logger","log","chalk","dim","printVersions","version","versions","versionRange","versionsToShow","Array","isArray","join","red","green","printIssue","needsToBeFixed","isRequired","description","symbol","yellow","descriptionToShow","printOverallStats","errors","warnings","bold","getAutomaticFixForPlatform","healthcheck","platform","win32AutomaticFix","runAutomaticFix","darwinAutomaticFix","linuxAutomaticFix","_","options","Loader","loader","start","environmentInfo","iterateOverHealthChecks","healthchecks","Promise","all","map","visible","getDiagnostics","isWarning","Boolean","process","type","HEALTHCHECK_TYPES","WARNING","ERROR","undefined","filter","removeFixedCategories","categories","category","some","iterateOverCategories","healthchecksPerCategory","Object","values","stop","stats","forEach","issueCategory","fix","automaticFixLevel","AUTOMATIC_FIX_LEVELS","ALL_ISSUES","removeKeyPressListener","stdin","setRawMode","removeAllListeners","onKeyPress","KEYS","EXIT","exit","FIX_ALL_ISSUES","FIX_ERRORS","FIX_WARNINGS","includes","ERRORS","WARNINGS","err"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport {logger} from '@react-native-community/cli-tools';\nimport {getHealthchecks, HEALTHCHECK_TYPES} from './healthchecks';\nimport {getLoader} from '../../tools/loader';\nimport printFixOptions, {KEYS} from './printFixOptions';\nimport runAutomaticFix, {AUTOMATIC_FIX_LEVELS} from './runAutomaticFix';\nimport {\n  DetachedCommandFunction,\n  HealthCheckCategory,\n  HealthCheckInterface,\n} from '@react-native-community/cli-types';\nimport {HealthCheckCategoryResult, HealthCheckResult} from './types';\nimport getEnvironmentInfo from '../../tools/envinfo';\nimport {logMessage} from './healthchecks/common';\n\nconst printCategory = ({label, key}: {label: string; key: number}) => {\n  if (key > 0) {\n    logger.log();\n  }\n\n  logger.log(chalk.dim(label));\n};\n\nconst printVersions = ({\n  version,\n  versions,\n  versionRange,\n}: {\n  version?: 'Not Found' | string;\n  versions?: [string] | string;\n  versionRange: string;\n}) => {\n  if (versions) {\n    const versionsToShow = Array.isArray(versions)\n      ? versions.join(', ')\n      : 'N/A';\n\n    logMessage(`- Versions found: ${chalk.red(versionsToShow)}`);\n    logMessage(`- Version supported: ${chalk.green(versionRange)}`);\n\n    return;\n  }\n\n  const versionsToShow = version && version !== 'Not Found' ? version : 'N/A';\n\n  logMessage(`- Version found: ${chalk.red(versionsToShow)}`);\n  logMessage(`- Version supported: ${chalk.green(versionRange)}`);\n\n  return;\n};\n\nconst printIssue = ({\n  label,\n  needsToBeFixed,\n  version,\n  versions,\n  versionRange,\n  isRequired,\n  description,\n}: HealthCheckResult) => {\n  const symbol = needsToBeFixed\n    ? isRequired\n      ? chalk.red('✖')\n      : chalk.yellow('●')\n    : chalk.green('✓');\n\n  const descriptionToShow = description ? ` - ${description}` : '';\n\n  logger.log(` ${symbol} ${label}${descriptionToShow}`);\n\n  if (needsToBeFixed && versionRange) {\n    return printVersions({version, versions, versionRange});\n  }\n};\n\nconst printOverallStats = ({\n  errors,\n  warnings,\n}: {\n  errors: number;\n  warnings: number;\n}) => {\n  logger.log(`\\n${chalk.bold('Errors:')}   ${errors}`);\n  logger.log(`${chalk.bold('Warnings:')} ${warnings}`);\n};\n\ntype FlagsT = {\n  fix: boolean | void;\n  contributor: boolean | void;\n};\n\n/**\n * Given a `healthcheck` and a `platform`, returns the specific fix for\n * it or the fallback one if there is not one (`runAutomaticFix`).\n */\nconst getAutomaticFixForPlatform = (\n  healthcheck: HealthCheckInterface,\n  platform: NodeJS.Platform,\n) => {\n  switch (platform) {\n    case 'win32':\n      return healthcheck.win32AutomaticFix || healthcheck.runAutomaticFix;\n    case 'darwin':\n      return healthcheck.darwinAutomaticFix || healthcheck.runAutomaticFix;\n    case 'linux':\n      return healthcheck.linuxAutomaticFix || healthcheck.runAutomaticFix;\n    default:\n      return healthcheck.runAutomaticFix;\n  }\n};\n\nexport default (async (_, options) => {\n  const Loader = getLoader();\n  const loader = new Loader();\n\n  loader.start('Running diagnostics...');\n\n  const environmentInfo = await getEnvironmentInfo();\n\n  const iterateOverHealthChecks = async ({\n    label,\n    healthchecks,\n  }: HealthCheckCategory): Promise<HealthCheckCategoryResult> => ({\n    label,\n    healthchecks: (\n      await Promise.all(\n        healthchecks.map(async (healthcheck) => {\n          if (healthcheck.visible === false) {\n            return;\n          }\n\n          const {\n            needsToBeFixed,\n            version,\n            versions,\n            versionRange,\n          } = await healthcheck.getDiagnostics(environmentInfo);\n\n          // Assume that it's required unless specified otherwise\n          const isRequired = healthcheck.isRequired !== false;\n          const isWarning = needsToBeFixed && !isRequired;\n\n          return {\n            label: healthcheck.label,\n            needsToBeFixed: Boolean(needsToBeFixed),\n            version,\n            versions,\n            versionRange,\n            description: healthcheck.description,\n            runAutomaticFix: getAutomaticFixForPlatform(\n              healthcheck,\n              process.platform,\n            ),\n            isRequired,\n            type: needsToBeFixed\n              ? isWarning\n                ? HEALTHCHECK_TYPES.WARNING\n                : HEALTHCHECK_TYPES.ERROR\n              : undefined,\n          };\n        }),\n      )\n    ).filter((healthcheck) => healthcheck !== undefined) as HealthCheckResult[],\n  });\n\n  // Remove all the categories that don't have any healthcheck with\n  // `needsToBeFixed` so they don't show when the user taps to fix encountered\n  // issues\n  const removeFixedCategories = (categories: HealthCheckCategoryResult[]) =>\n    categories.filter((category) =>\n      category.healthchecks.some((healthcheck) => healthcheck.needsToBeFixed),\n    );\n\n  const iterateOverCategories = (categories: HealthCheckCategory[]) =>\n    Promise.all(categories.map(iterateOverHealthChecks));\n\n  const healthchecksPerCategory = await iterateOverCategories(\n    Object.values(getHealthchecks(options)).filter(\n      (category) => category !== undefined,\n    ) as HealthCheckCategory[],\n  );\n\n  loader.stop();\n\n  const stats = {\n    errors: 0,\n    warnings: 0,\n  };\n\n  healthchecksPerCategory.forEach((issueCategory, key) => {\n    printCategory({...issueCategory, key});\n\n    issueCategory.healthchecks.forEach((healthcheck) => {\n      printIssue(healthcheck);\n\n      if (healthcheck.type === HEALTHCHECK_TYPES.WARNING) {\n        stats.warnings++;\n        return;\n      }\n\n      if (healthcheck.type === HEALTHCHECK_TYPES.ERROR) {\n        stats.errors++;\n        return;\n      }\n    });\n  });\n\n  printOverallStats(stats);\n\n  if (options.fix) {\n    return await runAutomaticFix({\n      healthchecks: removeFixedCategories(healthchecksPerCategory),\n      automaticFixLevel: AUTOMATIC_FIX_LEVELS.ALL_ISSUES,\n      stats,\n      loader,\n      environmentInfo,\n    });\n  }\n\n  const removeKeyPressListener = () => {\n    if (typeof process.stdin.setRawMode === 'function') {\n      process.stdin.setRawMode(false);\n    }\n    process.stdin.removeAllListeners('data');\n  };\n\n  const onKeyPress = async (key: string) => {\n    if (key === KEYS.EXIT || key === '\\u0003') {\n      removeKeyPressListener();\n\n      process.exit(0);\n      return;\n    }\n\n    if (\n      [KEYS.FIX_ALL_ISSUES, KEYS.FIX_ERRORS, KEYS.FIX_WARNINGS].includes(key)\n    ) {\n      removeKeyPressListener();\n\n      try {\n        const automaticFixLevel = {\n          [KEYS.FIX_ALL_ISSUES]: AUTOMATIC_FIX_LEVELS.ALL_ISSUES,\n          [KEYS.FIX_ERRORS]: AUTOMATIC_FIX_LEVELS.ERRORS,\n          [KEYS.FIX_WARNINGS]: AUTOMATIC_FIX_LEVELS.WARNINGS,\n        };\n\n        await runAutomaticFix({\n          healthchecks: removeFixedCategories(healthchecksPerCategory),\n          automaticFixLevel: automaticFixLevel[key],\n          stats,\n          loader,\n          environmentInfo,\n        });\n\n        process.exit(0);\n      } catch (err) {\n        // TODO: log error\n        process.exit(1);\n      }\n    }\n  };\n\n  if (stats.errors || stats.warnings) {\n    printFixOptions({onKeyPress});\n  }\n}) as DetachedCommandFunction<FlagsT>;\n"]}