{"version":3,"sources":["../../../../src/commands/doctor/healthchecks/cocoaPods.ts"],"names":["label","description","getDiagnostics","needsToBeFixed","runAutomaticFix","loader","stop","installMethod","promptQuestion","installMethodCapitalized","substr","toUpperCase","loaderInstallationMessage","loaderSucceedMessage","start","options","succeed","_error","join","error","healthcheck","command","pkg","onSuccess"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;;AACA;;AAIA;;AACA;;;;AAGA,MAAMA,KAAK,GAAG,WAAd;eAEe;AACbA,EAAAA,KADa;AAEbC,EAAAA,WAAW,EAAE,0CAFA;AAGbC,EAAAA,cAAc,EAAE,aAAa;AAC3BC,IAAAA,cAAc,EAAE,MAAM,+CAAuB,KAAvB;AADK,GAAb,CAHH;AAMbC,EAAAA,eAAe,EAAE,OAAO;AAACC,IAAAA;AAAD,GAAP,KAAoB;AACnCA,IAAAA,MAAM,CAACC,IAAP;AAEA,UAAM;AACJC,MAAAA,aADI;AAEJC,MAAAA;AAFI,QAGF,MAAM,uDAHV,CAHmC,CAQnC;;AACA,UAAMC,wBAAwB,GAC5BF,aAAa,KAAK,UAAlB,GACIA,aAAa,CAACG,MAAd,CAAqB,CAArB,EAAwB,CAAxB,EAA2BC,WAA3B,KAA2CJ,aAAa,CAACG,MAAd,CAAqB,CAArB,CAD/C,GAEIH,aAHN;AAIA,UAAMK,yBAAyB,GAAI,GAAEZ,KAAM,qBAAoBS,wBAAyB,GAAxF;AACA,UAAMI,oBAAoB,GAAI,GAAEb,KAAM,oBAAmBS,wBAAyB,GAAlF,CAdmC,CAgBnC;;AACA,+BAAcD,cAAd;;AAEA,QAAID,aAAa,KAAK,KAAtB,EAA6B;AAC3BF,MAAAA,MAAM,CAACS,KAAP,CAAaF,yBAAb;AAEA,YAAMG,OAAO,GAAG,CAAC,SAAD,EAAY,WAAZ,EAAyB,eAAzB,CAAhB;;AAEA,UAAI;AACF;AACA,cAAM,sBAAM,KAAN,EAAaA,OAAb,CAAN;AAEA,eAAOV,MAAM,CAACW,OAAP,CAAeH,oBAAf,CAAP;AACD,OALD,CAKE,OAAOI,MAAP,EAAe;AACf;AACA,YAAI;AACF,gBAAM,0BAAS,OAAMF,OAAO,CAACG,IAAR,CAAa,GAAb,CAAkB,EAAjC,CAAN;AAEA,iBAAOb,MAAM,CAACW,OAAP,CAAeH,oBAAf,CAAP;AACD,SAJD,CAIE,OAAOM,KAAP,EAAc;AACd,gCAAS;AACPC,YAAAA,WAAW,EAAEpB,KADN;AAEPK,YAAAA,MAFO;AAGPc,YAAAA,KAHO;AAIPE,YAAAA,OAAO,EAAE;AAJF,WAAT;AAMD;AACF;AACF;;AAED,QAAId,aAAa,KAAK,UAAtB,EAAkC;AAChC,aAAO,MAAM,8BAAY;AACvBe,QAAAA,GAAG,EAAE,WADkB;AAEvBtB,QAAAA,KAAK,EAAEY,yBAFgB;AAGvBP,QAAAA,MAHuB;AAIvBkB,QAAAA,SAAS,EAAE,MAAMlB,MAAM,CAACW,OAAP,CAAeH,oBAAf;AAJM,OAAZ,CAAb;AAMD;AACF;AA5DY,C","sourcesContent":["import execa from 'execa';\nimport {isSoftwareNotInstalled} from '../checkInstallation';\nimport {\n  promptCocoaPodsInstallationQuestion,\n  runSudo,\n} from '../../../tools/installPods';\nimport {removeMessage, logError} from './common';\nimport {brewInstall} from '../../../tools/brewInstall';\nimport {HealthCheckInterface} from '@react-native-community/cli-types';\n\nconst label = 'CocoaPods';\n\nexport default {\n  label,\n  description: 'Required for installing iOS dependencies',\n  getDiagnostics: async () => ({\n    needsToBeFixed: await isSoftwareNotInstalled('pod'),\n  }),\n  runAutomaticFix: async ({loader}) => {\n    loader.stop();\n\n    const {\n      installMethod,\n      promptQuestion,\n    } = await promptCocoaPodsInstallationQuestion();\n\n    // Capitalise `Homebrew` when printing on the screen\n    const installMethodCapitalized =\n      installMethod === 'homebrew'\n        ? installMethod.substr(0, 1).toUpperCase() + installMethod.substr(1)\n        : installMethod;\n    const loaderInstallationMessage = `${label} (installing with ${installMethodCapitalized})`;\n    const loaderSucceedMessage = `${label} (installed with ${installMethodCapitalized})`;\n\n    // Remove the prompt after the question of how to install CocoaPods is answered\n    removeMessage(promptQuestion);\n\n    if (installMethod === 'gem') {\n      loader.start(loaderInstallationMessage);\n\n      const options = ['install', 'cocoapods', '--no-document'];\n\n      try {\n        // First attempt to install `cocoapods`\n        await execa('gem', options);\n\n        return loader.succeed(loaderSucceedMessage);\n      } catch (_error) {\n        // If that doesn't work then try with sudo\n        try {\n          await runSudo(`gem ${options.join(' ')}`);\n\n          return loader.succeed(loaderSucceedMessage);\n        } catch (error) {\n          logError({\n            healthcheck: label,\n            loader,\n            error,\n            command: 'sudo gem install cocoapods',\n          });\n        }\n      }\n    }\n\n    if (installMethod === 'homebrew') {\n      return await brewInstall({\n        pkg: 'cocoapods',\n        label: loaderInstallationMessage,\n        loader,\n        onSuccess: () => loader.succeed(loaderSucceedMessage),\n      });\n    }\n  },\n} as HealthCheckInterface;\n"]}