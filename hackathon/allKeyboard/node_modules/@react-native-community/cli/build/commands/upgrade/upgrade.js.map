{"version":3,"sources":["../../../src/commands/upgrade/upgrade.ts"],"names":["webDiffUrl","rawDiffUrl","isConnected","output","includes","checkForErrors","CLIError","logger","warn","getLatestRNVersion","info","stdout","stderr","getRNPeerDeps","version","JSON","parse","getPatch","currentVersion","newVersion","config","patch","data","error","message","chalk","underline","dim","patchWithRenamedProjects","Object","keys","project","forEach","platform","replace","RegExp","projectName","packageName","split","join","getVersionToUpgradeTo","argv","projectDir","argVersion","semverCoercedVersion","semver","coerce","valid","gt","eq","dependencies","require","path","satisfies","installDeps","root","peerDeps","deps","map","module","PackageManager","install","silent","installCocoaPodsDeps","process","pop","debug","applyPatch","tmpPatchFile","defaultExcludes","filesThatDontExist","filesThatFailedToApply","relativePathFromRoot","excludes","e","errorLines","filter","x","Boolean","file","bold","length","upgrade","ctx","success","patchSuccess","fs","writeFileSync","Error","unlinkSync","stdio","upgradeCommand","name","description","func"],"mappings":"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","sourcesContent":["import path from 'path';\nimport fs from 'fs';\nimport chalk from 'chalk';\nimport semver from 'semver';\nimport execa from 'execa';\nimport {Config} from '@react-native-community/cli-types';\nimport {logger, CLIError, fetch} from '@react-native-community/cli-tools';\nimport * as PackageManager from '../../tools/packageManager';\nimport installPods from '../../tools/installPods';\n\n// https://react-native-community.github.io/upgrade-helper/?from=0.59.10&to=0.60.0-rc.3\nconst webDiffUrl = 'https://react-native-community.github.io/upgrade-helper';\nconst rawDiffUrl =\n  'https://raw.githubusercontent.com/react-native-community/rn-diff-purge/diffs/diffs';\n\nconst isConnected = (output: string): boolean => {\n  // there is no reliable way of checking for internet connectivity, so we should just\n  // read the output from npm (to check for connectivity errors) which is faster and relatively more reliable.\n  return !output.includes('the host is inaccessible');\n};\n\nconst checkForErrors = (output: string): void => {\n  if (!output) {\n    return;\n  }\n  if (!isConnected(output)) {\n    throw new CLIError(\n      'Upgrade failed. You do not seem to have an internet connection.',\n    );\n  }\n\n  if (output.includes('npm ERR')) {\n    throw new CLIError(`Upgrade failed with the following errors:\\n${output}`);\n  }\n\n  if (output.includes('npm WARN')) {\n    logger.warn(output);\n  }\n};\n\nconst getLatestRNVersion = async (): Promise<string> => {\n  logger.info('No version passed. Fetching latest...');\n  const {stdout, stderr} = await execa('npm', [\n    'info',\n    'react-native',\n    'version',\n  ]);\n  checkForErrors(stderr);\n  return stdout;\n};\n\nconst getRNPeerDeps = async (\n  version: string,\n): Promise<{[key: string]: string}> => {\n  const {stdout, stderr} = await execa('npm', [\n    'info',\n    `react-native@${version}`,\n    'peerDependencies',\n    '--json',\n  ]);\n  checkForErrors(stderr);\n  return JSON.parse(stdout);\n};\n\nconst getPatch = async (\n  currentVersion: string,\n  newVersion: string,\n  config: Config,\n) => {\n  let patch;\n\n  logger.info(`Fetching diff between v${currentVersion} and v${newVersion}...`);\n\n  try {\n    const {data} = await fetch(\n      `${rawDiffUrl}/${currentVersion}..${newVersion}.diff`,\n    );\n\n    patch = data;\n  } catch (error) {\n    logger.error(error.message);\n    logger.error(\n      `Failed to fetch diff for react-native@${newVersion}. Maybe it's not released yet?`,\n    );\n    logger.info(\n      `For available releases to diff see: ${chalk.underline.dim(\n        'https://github.com/react-native-community/rn-diff-purge#diff-table-full-table-here',\n      )}`,\n    );\n    return null;\n  }\n\n  let patchWithRenamedProjects = patch;\n\n  Object.keys(config.project).forEach((platform) => {\n    if (!config.project[platform]) {\n      return;\n    }\n    if (platform === 'ios') {\n      patchWithRenamedProjects = patchWithRenamedProjects.replace(\n        new RegExp('RnDiffApp', 'g'),\n        config.project[platform]!.projectName.replace('.xcodeproj', ''),\n      );\n    } else if (platform === 'android') {\n      patchWithRenamedProjects = patchWithRenamedProjects\n        .replace(\n          new RegExp('com\\\\.rndiffapp', 'g'),\n          config.project[platform]!.packageName,\n        )\n        .replace(\n          new RegExp('com\\\\.rndiffapp'.split('.').join('/'), 'g'),\n          config.project[platform]!.packageName.split('.').join('/'),\n        );\n    } else {\n      logger.warn(\n        `Unsupported platform: \"${platform}\". \\`upgrade\\` only supports iOS and Android.`,\n      );\n    }\n  });\n\n  return patchWithRenamedProjects;\n};\n\nconst getVersionToUpgradeTo = async (\n  argv: Array<string>,\n  currentVersion: string,\n  projectDir: string,\n) => {\n  const argVersion = argv[0];\n  const semverCoercedVersion = semver.coerce(argVersion);\n  const newVersion = argVersion\n    ? semver.valid(argVersion) ||\n      (semverCoercedVersion ? semverCoercedVersion.version : null)\n    : await getLatestRNVersion();\n\n  if (!newVersion) {\n    logger.error(\n      `Provided version \"${argv[0]}\" is not allowed. Please pass a valid semver version`,\n    );\n    return null;\n  }\n\n  if (semver.gt(currentVersion, newVersion)) {\n    logger.error(\n      `Trying to upgrade from newer version \"${currentVersion}\" to older \"${newVersion}\"`,\n    );\n    return null;\n  }\n  if (semver.eq(currentVersion, newVersion)) {\n    const {\n      dependencies: {'react-native': version},\n    } = require(path.join(projectDir, 'package.json'));\n\n    if (semver.satisfies(newVersion, version)) {\n      logger.warn(\n        `Specified version \"${newVersion}\" is already installed in node_modules and it satisfies \"${version}\" semver range. No need to upgrade`,\n      );\n      return null;\n    }\n    logger.error(\n      `Dependency mismatch. Specified version \"${newVersion}\" is already installed in node_modules and it doesn't satisfy \"${version}\" semver range of your \"react-native\" dependency. Please re-install your dependencies`,\n    );\n    return null;\n  }\n\n  return newVersion;\n};\n\nconst installDeps = async (root: string, newVersion: string) => {\n  logger.info(\n    `Installing \"react-native@${newVersion}\" and its peer dependencies...`,\n  );\n  const peerDeps = await getRNPeerDeps(newVersion);\n  const deps = [\n    `react-native@${newVersion}`,\n    ...Object.keys(peerDeps).map((module) => `${module}@${peerDeps[module]}`),\n  ];\n  await PackageManager.install(deps, {\n    silent: true,\n    root,\n  });\n  await execa('git', ['add', 'package.json']);\n  try {\n    await execa('git', ['add', 'yarn.lock']);\n  } catch (error) {\n    // ignore\n  }\n  try {\n    await execa('git', ['add', 'package-lock.json']);\n  } catch (error) {\n    // ignore\n  }\n};\n\nconst installCocoaPodsDeps = async (projectDir: string) => {\n  if (process.platform === 'darwin') {\n    try {\n      logger.info(\n        `Installing CocoaPods dependencies ${chalk.dim(\n          '(this may take a few minutes)',\n        )}`,\n      );\n      await installPods({\n        projectName: projectDir.split('/').pop() || '',\n      });\n    } catch (error) {\n      if (error.stderr) {\n        logger.debug(\n          `\"pod install\" or \"pod repo update\" failed. Error output:\\n${error.stderr}`,\n        );\n      }\n      logger.error(\n        'Installation of CocoaPods dependencies failed. Try to install them manually by running \"pod install\" in \"ios\" directory after finishing upgrade',\n      );\n    }\n  }\n};\n\nconst applyPatch = async (\n  currentVersion: string,\n  newVersion: string,\n  tmpPatchFile: string,\n) => {\n  const defaultExcludes = ['package.json'];\n  let filesThatDontExist: Array<string> = [];\n  let filesThatFailedToApply: Array<string> = [];\n\n  const {stdout: relativePathFromRoot} = await execa('git', [\n    'rev-parse',\n    '--show-prefix',\n  ]);\n  try {\n    try {\n      const excludes = defaultExcludes.map(\n        (e) => `--exclude=${path.join(relativePathFromRoot, e)}`,\n      );\n      await execa('git', [\n        'apply',\n        // According to git documentation, `--binary` flag is turned on by\n        // default. However it's necessary when running `git apply --check` to\n        // actually accept binary files, maybe a bug in git?\n        '--binary',\n        '--check',\n        tmpPatchFile,\n        ...excludes,\n        '-p2',\n        '--3way',\n        `--directory=${relativePathFromRoot}`,\n      ]);\n      logger.info('Applying diff...');\n    } catch (error) {\n      const errorLines: Array<string> = error.stderr.split('\\n');\n      filesThatDontExist = [\n        ...errorLines\n          .filter((x) => x.includes('does not exist in index'))\n          .map((x) =>\n            x.replace(/^error: (.*): does not exist in index$/, '$1'),\n          ),\n      ].filter(Boolean);\n\n      filesThatFailedToApply = errorLines\n        .filter((x) => x.includes('patch does not apply'))\n        .map((x) => x.replace(/^error: (.*): patch does not apply$/, '$1'))\n        .filter(Boolean);\n\n      logger.info('Applying diff...');\n      logger.warn(\n        `Excluding files that exist in the template, but not in your project:\\n${filesThatDontExist\n          .map((file) => `  - ${chalk.bold(file)}`)\n          .join('\\n')}`,\n      );\n      if (filesThatFailedToApply.length) {\n        logger.error(\n          `Excluding files that failed to apply the diff:\\n${filesThatFailedToApply\n            .map((file) => `  - ${chalk.bold(file)}`)\n            .join(\n              '\\n',\n            )}\\nPlease make sure to check the actual changes after the upgrade command is finished.\\nYou can find them in our Upgrade Helper web app: ${chalk.underline.dim(\n            `${webDiffUrl}/?from=${currentVersion}&to=${newVersion}`,\n          )}`,\n        );\n      }\n    } finally {\n      const excludes = [\n        ...defaultExcludes,\n        ...filesThatDontExist,\n        ...filesThatFailedToApply,\n      ].map((e) => `--exclude=${path.join(relativePathFromRoot, e)}`);\n      await execa('git', [\n        'apply',\n        tmpPatchFile,\n        ...excludes,\n        '-p2',\n        '--3way',\n        `--directory=${relativePathFromRoot}`,\n      ]);\n    }\n  } catch (error) {\n    if (error.stderr) {\n      logger.debug(`\"git apply\" failed. Error output:\\n${error.stderr}`);\n    }\n    logger.error(\n      'Automatically applying diff failed. We did our best to automatically upgrade as many files as possible',\n    );\n    return false;\n  }\n  return true;\n};\n\n/**\n * Upgrade application to a new version of React Native.\n */\nasync function upgrade(argv: Array<string>, ctx: Config) {\n  const tmpPatchFile = 'tmp-upgrade-rn.patch';\n  const projectDir = ctx.root;\n  const {version: currentVersion} = require(path.join(\n    projectDir,\n    'node_modules/react-native/package.json',\n  ));\n\n  const newVersion = await getVersionToUpgradeTo(\n    argv,\n    currentVersion,\n    projectDir,\n  );\n\n  if (!newVersion) {\n    return;\n  }\n\n  const patch = await getPatch(currentVersion, newVersion, ctx);\n\n  if (patch === null) {\n    return;\n  }\n\n  if (patch === '') {\n    logger.info('Diff has no changes to apply, proceeding further');\n    await installDeps(projectDir, newVersion);\n    await installCocoaPodsDeps(projectDir);\n\n    logger.success(\n      `Upgraded React Native to v${newVersion} 🎉. Now you can review and commit the changes`,\n    );\n    return;\n  }\n  let patchSuccess;\n\n  try {\n    fs.writeFileSync(tmpPatchFile, patch);\n    patchSuccess = await applyPatch(currentVersion, newVersion, tmpPatchFile);\n  } catch (error) {\n    throw new Error(error.stderr || error);\n  } finally {\n    try {\n      fs.unlinkSync(tmpPatchFile);\n    } catch (e) {\n      // ignore\n    }\n    const {stdout} = await execa('git', ['status', '-s']);\n    if (!patchSuccess) {\n      if (stdout) {\n        logger.warn(\n          'Continuing after failure. Some of the files are upgraded but you will need to deal with conflicts manually',\n        );\n        await installDeps(projectDir, newVersion);\n        logger.info('Running \"git status\" to check what changed...');\n        await execa('git', ['status'], {stdio: 'inherit'});\n      } else {\n        logger.error(\n          'Patch failed to apply for unknown reason. Please fall back to manual way of upgrading',\n        );\n      }\n    } else {\n      await installDeps(projectDir, newVersion);\n      await installCocoaPodsDeps(projectDir);\n      logger.info('Running \"git status\" to check what changed...');\n      await execa('git', ['status'], {stdio: 'inherit'});\n    }\n    if (!patchSuccess) {\n      if (stdout) {\n        logger.warn(\n          'Please run \"git diff\" to review the conflicts and resolve them',\n        );\n      }\n      if (process.platform === 'darwin') {\n        logger.warn(\n          'After resolving conflicts don\\'t forget to run \"pod install\" inside \"ios\" directory',\n        );\n      }\n      logger.info(`You may find these resources helpful:\n• Release notes: ${chalk.underline.dim(\n        `https://github.com/facebook/react-native/releases/tag/v${newVersion}`,\n      )}\n• Manual Upgrade Helper: ${chalk.underline.dim(\n        `${webDiffUrl}/?from=${currentVersion}&to=${newVersion}`,\n      )}\n• Git diff: ${chalk.underline.dim(\n        `${rawDiffUrl}/${currentVersion}..${newVersion}.diff`,\n      )}`);\n\n      throw new CLIError(\n        'Upgrade failed. Please see the messages above for details',\n      );\n    }\n  }\n  logger.success(\n    `Upgraded React Native to v${newVersion} 🎉. Now you can review and commit the changes`,\n  );\n}\nconst upgradeCommand = {\n  name: 'upgrade [version]',\n  description:\n    \"Upgrade your app's template files to the specified or latest npm version using `rn-diff-purge` project. Only valid semver versions are allowed.\",\n  func: upgrade,\n};\nexport default upgradeCommand;\n"]}