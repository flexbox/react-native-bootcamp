{"version":3,"sources":["../../../src/commands/start/runServer.ts"],"names":["runServer","_argv","ctx","args","reportEvent","terminal","Terminal","process","stdout","ReporterImpl","getReporterImpl","customLogReporterPath","terminalReporter","reporter","update","event","metroConfig","config","maxWorkers","port","resetCache","watchFolders","projectRoot","sourceExts","assetPlugins","transformer","map","plugin","require","resolve","middleware","attachToServer","host","server","use","indexPageMiddleware","customEnhanceMiddleware","enhanceMiddleware","metroMiddleware","serverInstance","Metro","secure","https","secureCert","cert","secureKey","key","hmrEnabled","messageSocket","eventsSocket","interactive","keepAliveTimeout","root","undefined","e","code","path"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// @ts-ignore untyped metro\nimport Metro from 'metro';\n// @ts-ignore untyped metro\nimport {Terminal} from 'metro-core';\nimport path from 'path';\nimport {\n  createDevServerMiddleware,\n  indexPageMiddleware,\n} from '@react-native-community/cli-server-api';\nimport {Config} from '@react-native-community/cli-types';\n\nimport loadMetroConfig from '../../tools/loadMetroConfig';\nimport releaseChecker from '../../tools/releaseChecker';\nimport enableWatchMode from './watchMode';\n\nexport type Args = {\n  assetPlugins?: string[];\n  cert?: string;\n  customLogReporterPath?: string;\n  host?: string;\n  https?: boolean;\n  maxWorkers?: number;\n  key?: string;\n  platforms?: string[];\n  port?: number;\n  resetCache?: boolean;\n  sourceExts?: string[];\n  transformer?: string;\n  verbose?: boolean;\n  watchFolders?: string[];\n  config?: string;\n  projectRoot?: string;\n  interactive: boolean;\n};\n\nasync function runServer(_argv: Array<string>, ctx: Config, args: Args) {\n  let reportEvent: ((event: any) => void) | undefined;\n  const terminal = new Terminal(process.stdout);\n  const ReporterImpl = getReporterImpl(args.customLogReporterPath);\n  const terminalReporter = new ReporterImpl(terminal);\n  const reporter = {\n    update(event: any) {\n      terminalReporter.update(event);\n      if (reportEvent) {\n        reportEvent(event);\n      }\n    },\n  };\n\n  const metroConfig = await loadMetroConfig(ctx, {\n    config: args.config,\n    maxWorkers: args.maxWorkers,\n    port: args.port,\n    resetCache: args.resetCache,\n    watchFolders: args.watchFolders,\n    projectRoot: args.projectRoot,\n    sourceExts: args.sourceExts,\n    reporter,\n  });\n\n  if (args.assetPlugins) {\n    metroConfig.transformer.assetPlugins = args.assetPlugins.map((plugin) =>\n      require.resolve(plugin),\n    );\n  }\n\n  const {middleware, attachToServer} = createDevServerMiddleware({\n    host: args.host,\n    port: metroConfig.server.port,\n    watchFolders: metroConfig.watchFolders,\n  });\n  middleware.use(indexPageMiddleware);\n\n  const customEnhanceMiddleware = metroConfig.server.enhanceMiddleware;\n  metroConfig.server.enhanceMiddleware = (\n    metroMiddleware: any,\n    server: unknown,\n  ) => {\n    if (customEnhanceMiddleware) {\n      metroMiddleware = customEnhanceMiddleware(metroMiddleware, server);\n    }\n    return middleware.use(metroMiddleware);\n  };\n\n  const serverInstance = await Metro.runServer(metroConfig, {\n    host: args.host,\n    secure: args.https,\n    secureCert: args.cert,\n    secureKey: args.key,\n    hmrEnabled: true,\n  });\n\n  const {messageSocket, eventsSocket} = attachToServer(serverInstance);\n\n  reportEvent = eventsSocket.reportEvent;\n\n  if (args.interactive) {\n    enableWatchMode(messageSocket);\n  }\n\n  // In Node 8, the default keep-alive for an HTTP connection is 5 seconds. In\n  // early versions of Node 8, this was implemented in a buggy way which caused\n  // some HTTP responses (like those containing large JS bundles) to be\n  // terminated early.\n  //\n  // As a workaround, arbitrarily increase the keep-alive from 5 to 30 seconds,\n  // which should be enough to send even the largest of JS bundles.\n  //\n  // For more info: https://github.com/nodejs/node/issues/13391\n  //\n  serverInstance.keepAliveTimeout = 30000;\n\n  await releaseChecker(ctx.root);\n}\n\nfunction getReporterImpl(customLogReporterPath: string | undefined) {\n  if (customLogReporterPath === undefined) {\n    return require('metro/src/lib/TerminalReporter');\n  }\n  try {\n    // First we let require resolve it, so we can require packages in node_modules\n    // as expected. eg: require('my-package/reporter');\n    return require(customLogReporterPath);\n  } catch (e) {\n    if (e.code !== 'MODULE_NOT_FOUND') {\n      throw e;\n    }\n    // If that doesn't work, then we next try relative to the cwd, eg:\n    // require('./reporter');\n    return require(path.resolve(customLogReporterPath));\n  }\n}\n\nexport default runServer;\n"]}