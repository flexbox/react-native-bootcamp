{"version":3,"sources":["../../src/websocket/debuggerProxyServer.ts"],"names":["attachToServer","server","path","WebSocketServer","ws","Server","wss","debuggerSocket","clientSocket","send","dest","message","e","logger","warn","debuggerSocketCloseHandler","close","clientSocketCloseHandler","JSON","stringify","method","on","connection","url","upgradeReq","indexOf","onerror","onclose","onmessage","data","isDebuggerConnected"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport ws from 'ws';\nimport {logger} from '@react-native-community/cli-tools';\nimport {Server as HttpServer} from 'http';\nimport {Server as HttpsServer} from 'https';\n\ntype Server = HttpServer | HttpsServer;\nfunction attachToServer(server: Server, path: string) {\n  const WebSocketServer = ws.Server;\n  const wss = new WebSocketServer({\n    server,\n    path,\n  });\n\n  let debuggerSocket: ws | null;\n  let clientSocket: ws | null;\n\n  function send(dest: ws | null, message: ws.Data) {\n    if (!dest) {\n      return;\n    }\n\n    try {\n      dest.send(message);\n    } catch (e) {\n      logger.warn(e);\n      // Sometimes this call throws 'not opened'\n    }\n  }\n\n  const debuggerSocketCloseHandler = () => {\n    debuggerSocket = null;\n    if (clientSocket) {\n      clientSocket.close(1011, 'Debugger was disconnected');\n    }\n  };\n\n  const clientSocketCloseHandler = () => {\n    clientSocket = null;\n    send(debuggerSocket, JSON.stringify({method: '$disconnected'}));\n  };\n\n  wss.on('connection', (connection: ws) => {\n    // @ts-ignore current definition of ws does not have upgradeReq type\n    const {url} = connection.upgradeReq;\n\n    if (url.indexOf('role=debugger') > -1) {\n      if (debuggerSocket) {\n        connection.close(1011, 'Another debugger is already connected');\n        return;\n      }\n      debuggerSocket = connection;\n      if (debuggerSocket) {\n        debuggerSocket.onerror = debuggerSocketCloseHandler;\n        debuggerSocket.onclose = debuggerSocketCloseHandler;\n        debuggerSocket.onmessage = ({data}) => send(clientSocket, data);\n      }\n    } else if (url.indexOf('role=client') > -1) {\n      if (clientSocket) {\n        // @ts-ignore not nullable with current type definition of ws\n        clientSocket.onerror = null;\n        // @ts-ignore not nullable with current type definition of ws\n        clientSocket.onclose = null;\n        // @ts-ignore not nullable with current type definition of ws\n        clientSocket.onmessage = null;\n        clientSocket.close(1011, 'Another client connected');\n      }\n      clientSocket = connection;\n      clientSocket.onerror = clientSocketCloseHandler;\n      clientSocket.onclose = clientSocketCloseHandler;\n      clientSocket.onmessage = ({data}) => send(debuggerSocket, data);\n    } else {\n      connection.close(1011, 'Missing role param');\n    }\n  });\n\n  return {\n    server: wss,\n    isDebuggerConnected() {\n      return !!debuggerSocket;\n    },\n  };\n}\n\nexport default {\n  attachToServer,\n};\n"]}