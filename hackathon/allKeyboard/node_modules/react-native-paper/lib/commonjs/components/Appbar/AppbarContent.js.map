{"version":3,"sources":["AppbarContent.tsx"],"names":["AppbarContent","color","titleColor","white","subtitle","subtitleStyle","onPress","style","titleRef","titleStyle","theme","title","rest","fonts","subtitleColor","alpha","rgb","string","styles","container","Platform","OS","regular","medium","displayName","StyleSheet","create","flex","paddingHorizontal","fontSize","AppbarContentWithTheme"],"mappings":";;;;;;;AAAA;;AACA;;AASA;;AAEA;;AAEA;;AACA;;;;;;;;;;AAwCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,aAAa,GAAG,CAAC;AACrBC,EAAAA,KAAK,EAAEC,UAAU,GAAGC,aADC;AAErBC,EAAAA,QAFqB;AAGrBC,EAAAA,aAHqB;AAIrBC,EAAAA,OAJqB;AAKrBC,EAAAA,KALqB;AAMrBC,EAAAA,QANqB;AAOrBC,EAAAA,UAPqB;AAQrBC,EAAAA,KARqB;AASrBC,EAAAA,KATqB;AAUrB,KAAGC;AAVkB,CAAD,KAWT;AACX,QAAM;AAAEC,IAAAA;AAAF,MAAYH,KAAlB;AAEA,QAAMI,aAAa,GAAG,oBAAMZ,UAAN,EAAkBa,KAAlB,CAAwB,GAAxB,EAA6BC,GAA7B,GAAmCC,MAAnC,EAAtB;AAEA,sBACE,oBAAC,qCAAD;AAA0B,IAAA,OAAO,EAAEX,OAAnC;AAA4C,IAAA,QAAQ,EAAE,CAACA;AAAvD,kBACE,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAACY,MAAM,CAACC,SAAR,EAAmBZ,KAAnB;AAAb,KAA4CK,IAA5C,gBACE,oBAAC,aAAD;AACE,IAAA,GAAG,EAAEJ,QADP;AAEE,IAAA,KAAK,EAAE,CACL;AACEP,MAAAA,KAAK,EAAEC,UADT;AAEE,UAAIkB,sBAASC,EAAT,KAAgB,KAAhB,GAAwBR,KAAK,CAACS,OAA9B,GAAwCT,KAAK,CAACU,MAAlD;AAFF,KADK,EAKLL,MAAM,CAACP,KALF,EAMLF,UANK,CAFT;AAUE,IAAA,aAAa,EAAE,CAVjB;AAWE,IAAA,UAAU,MAXZ;AAYE,IAAA,mBAAmB,EAAC,QAZtB,CAaE;AAbF;AAcE,IAAA,iBAAiB,EAAEW,sBAASC,EAAT,KAAgB,KAAhB,GAAwB,SAAxB,GAAoC;AAdzD,KAgBGV,KAhBH,CADF,EAmBGP,QAAQ,gBACP,oBAAC,aAAD;AACE,IAAA,KAAK,EAAE,CAACc,MAAM,CAACd,QAAR,EAAkB;AAAEH,MAAAA,KAAK,EAAEa;AAAT,KAAlB,EAA4CT,aAA5C,CADT;AAEE,IAAA,aAAa,EAAE;AAFjB,KAIGD,QAJH,CADO,GAOL,IA1BN,CADF,CADF;AAgCD,CAhDD;;AAkDAJ,aAAa,CAACwB,WAAd,GAA4B,gBAA5B;;AAEA,MAAMN,MAAM,GAAGO,wBAAWC,MAAX,CAAkB;AAC/BP,EAAAA,SAAS,EAAE;AACTQ,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,iBAAiB,EAAE;AAFV,GADoB;AAK/BjB,EAAAA,KAAK,EAAE;AACLkB,IAAAA,QAAQ,EAAET,sBAASC,EAAT,KAAgB,KAAhB,GAAwB,EAAxB,GAA6B;AADlC,GALwB;AAQ/BjB,EAAAA,QAAQ,EAAE;AACRyB,IAAAA,QAAQ,EAAET,sBAASC,EAAT,KAAgB,KAAhB,GAAwB,EAAxB,GAA6B;AAD/B;AARqB,CAAlB,CAAf;;eAae,wBAAUrB,aAAV,C,EAEf;;;;AACA,MAAM8B,sBAAsB,GAAG,wBAAU9B,aAAV,CAA/B,C,CACA","sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport Text from '../Typography/Text';\n\nimport { withTheme } from '../../core/theming';\nimport { white } from '../../styles/colors';\n\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof View> & {\n  /**\n   * Custom color for the text.\n   */\n  color?: string;\n  /**\n   * Text for the title.\n   */\n  title: React.ReactNode;\n  /**\n   * Style for the title.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Reference for the title.\n   */\n  titleRef?: React.RefObject<Text>;\n  /**\n   * Text for the subtitle.\n   */\n  subtitle?: React.ReactNode;\n  /**\n   * Style for the subtitle.\n   */\n  subtitleStyle?: StyleProp<TextStyle>;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component used to display a title and optional subtitle in an appbar.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/appbar-content.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *     <Appbar.Header>\n *        <Appbar.Content title=\"Title\" subtitle={'Subtitle'} />\n *     </Appbar.Header>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst AppbarContent = ({\n  color: titleColor = white,\n  subtitle,\n  subtitleStyle,\n  onPress,\n  style,\n  titleRef,\n  titleStyle,\n  theme,\n  title,\n  ...rest\n}: Props) => {\n  const { fonts } = theme;\n\n  const subtitleColor = color(titleColor).alpha(0.7).rgb().string();\n\n  return (\n    <TouchableWithoutFeedback onPress={onPress} disabled={!onPress}>\n      <View style={[styles.container, style]} {...rest}>\n        <Text\n          ref={titleRef}\n          style={[\n            {\n              color: titleColor,\n              ...(Platform.OS === 'ios' ? fonts.regular : fonts.medium),\n            },\n            styles.title,\n            titleStyle,\n          ]}\n          numberOfLines={1}\n          accessible\n          accessibilityTraits=\"header\"\n          // @ts-expect-error React Native doesn't accept 'heading' as it's web-only\n          accessibilityRole={Platform.OS === 'web' ? 'heading' : 'header'}\n        >\n          {title}\n        </Text>\n        {subtitle ? (\n          <Text\n            style={[styles.subtitle, { color: subtitleColor }, subtitleStyle]}\n            numberOfLines={1}\n          >\n            {subtitle}\n          </Text>\n        ) : null}\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nAppbarContent.displayName = 'Appbar.Content';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 12,\n  },\n  title: {\n    fontSize: Platform.OS === 'ios' ? 17 : 20,\n  },\n  subtitle: {\n    fontSize: Platform.OS === 'ios' ? 11 : 14,\n  },\n});\n\nexport default withTheme(AppbarContent);\n\n// @component-docs ignore-next-line\nconst AppbarContentWithTheme = withTheme(AppbarContent);\n// @component-docs ignore-next-line\nexport { AppbarContentWithTheme as AppbarContent };\n"]}