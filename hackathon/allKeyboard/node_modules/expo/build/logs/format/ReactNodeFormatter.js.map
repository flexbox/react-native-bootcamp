{"version":3,"file":"ReactNodeFormatter.js","sourceRoot":"","sources":["../../../src/logs/format/ReactNodeFormatter.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,eAAe;IACb,IAAI,CAAC,KAAU;QACb,OAAO,CACL,KAAK;YACL,KAAK,YAAY,MAAM;YACvB,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC;YAC3B,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC;YAC3B,KAAK,CAAC,cAAc,CAAC,MAAM,CAAC,CAC7B,CAAC;IACJ,CAAC;IAED,SAAS,CAAC,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO;QACvD,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,IAAI,gBAAgB,CAC1D,IAAI,EACJ,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC,EACtB,MAAM,EACN,WAAW,EACX,KAAK,EACL,IAAI,EACJ,OAAO,CACR,GAAG,CAAC;IACP,CAAC;CACF,CAAC;AAEF,SAAS,gBAAgB,CAAC,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO;IAC/E,IAAI,MAAM,GAAG,MAAM,CAAC,YAAY,CAAC;IACjC,MAAM,mBAAmB,GAAG,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC;IAExD,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE;QACvC,MAAM,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC;QACrB,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,EAAE,MAAM,EAAE,mBAAmB,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;QACpE,MAAM,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,mBAAmB,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;QAE7E,MAAM,IAAI,GAAG,mBAAmB,GAAG,IAAI,KAAK,KAAK,EAAE,CAAC;QAEpD,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;YACxB,MAAM,IAAI,GAAG,GAAG,MAAM,CAAC,YAAY,CAAC;SACrC;aAAM,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE;YACtB,MAAM,IAAI,GAAG,CAAC;SACf;KACF;IAED,MAAM,IAAI,MAAM,CAAC,YAAY,GAAG,WAAW,CAAC;IAC5C,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["/**\n * A pretty-format plugin for React's FiberNode objects, which are very large trees that are too\n * large and verbose to print.\n */\nexport default {\n  test(value: any): boolean {\n    return (\n      value &&\n      value instanceof Object &&\n      value.hasOwnProperty('tag') &&\n      value.hasOwnProperty('key') &&\n      value.hasOwnProperty('type')\n    );\n  },\n\n  serialize(node, config, indentation, depth, refs, printer): string {\n    return `${config.min ? '' : 'FiberNode '}{${_printProperties(\n      node,\n      ['tag', 'key', 'type'],\n      config,\n      indentation,\n      depth,\n      refs,\n      printer\n    )}}`;\n  },\n};\n\nfunction _printProperties(object, keys, config, indentation, depth, refs, printer) {\n  let result = config.spacingOuter;\n  const propertyIndentation = indentation + config.indent;\n\n  for (let ii = 0; ii < keys.length; ii++) {\n    const key = keys[ii];\n    const name = printer(key, config, propertyIndentation, depth, refs);\n    const value = printer(object[key], config, propertyIndentation, depth, refs);\n\n    result += `${propertyIndentation}${name}: ${value}`;\n\n    if (ii < keys.length - 1) {\n      result += ',' + config.spacingInner;\n    } else if (!config.min) {\n      result += ',';\n    }\n  }\n\n  result += config.spacingOuter + indentation;\n  return result;\n}\n"]}