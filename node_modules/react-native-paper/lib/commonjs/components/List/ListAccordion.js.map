{"version":3,"sources":["ListAccordion.tsx"],"names":["ListAccordion","left","right","title","description","children","theme","titleStyle","descriptionStyle","titleNumberOfLines","descriptionNumberOfLines","style","id","testID","onPress","onLongPress","expanded","expandedProp","accessibilityLabel","setExpanded","React","useState","handlePressAction","undefined","titleColor","colors","text","alpha","rgb","string","descriptionColor","expandedInternal","groupContext","useContext","ListAccordionGroupContext","Error","isExpanded","expandedId","handlePress","onAccordionPress","backgroundColor","background","styles","container","row","color","primary","item","content","multiline","I18nManager","isRTL","Children","map","child","isValidElement","props","cloneElement","displayName","StyleSheet","create","padding","flexDirection","alignItems","height","justifyContent","fontSize","margin","paddingLeft","flex"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AASA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;AA6EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,aAAa,GAAG,CAAC;AACrBC,EAAAA,IADqB;AAErBC,EAAAA,KAFqB;AAGrBC,EAAAA,KAHqB;AAIrBC,EAAAA,WAJqB;AAKrBC,EAAAA,QALqB;AAMrBC,EAAAA,KANqB;AAOrBC,EAAAA,UAPqB;AAQrBC,EAAAA,gBARqB;AASrBC,EAAAA,kBAAkB,GAAG,CATA;AAUrBC,EAAAA,wBAAwB,GAAG,CAVN;AAWrBC,EAAAA,KAXqB;AAYrBC,EAAAA,EAZqB;AAarBC,EAAAA,MAbqB;AAcrBC,EAAAA,OAdqB;AAerBC,EAAAA,WAfqB;AAgBrBC,EAAAA,QAAQ,EAAEC,YAhBW;AAiBrBC,EAAAA;AAjBqB,CAAD,KAkBT;AACX,QAAM,CAACF,QAAD,EAAWG,WAAX,IAA0BC,KAAK,CAACC,QAAN,CAC9BJ,YAAY,IAAI,KADc,CAAhC;;AAIA,QAAMK,iBAAiB,GAAG,MAAM;AAC9BR,IAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO;;AAEP,QAAIG,YAAY,KAAKM,SAArB,EAAgC;AAC9B;AACA;AACAJ,MAAAA,WAAW,CAAEH,QAAD,IAAc,CAACA,QAAhB,CAAX;AACD;AACF,GARD;;AAUA,QAAMQ,UAAU,GAAG,oBAAMlB,KAAK,CAACmB,MAAN,CAAaC,IAAnB,EAAyBC,KAAzB,CAA+B,IAA/B,EAAqCC,GAArC,GAA2CC,MAA3C,EAAnB;AACA,QAAMC,gBAAgB,GAAG,oBAAMxB,KAAK,CAACmB,MAAN,CAAaC,IAAnB,EAAyBC,KAAzB,CAA+B,IAA/B,EAAqCC,GAArC,GAA2CC,MAA3C,EAAzB;AAEA,QAAME,gBAAgB,GAAGd,YAAY,KAAKM,SAAjB,GAA6BN,YAA7B,GAA4CD,QAArE;AAEA,QAAMgB,YAAY,GAAGZ,KAAK,CAACa,UAAN,CAAiBC,6CAAjB,CAArB;;AACA,MAAIF,YAAY,KAAK,IAAjB,IAAyB,CAACpB,EAA9B,EAAkC;AAChC,UAAM,IAAIuB,KAAJ,CACJ,oFADI,CAAN;AAGD;;AACD,QAAMC,UAAU,GAAGJ,YAAY,GAC3BA,YAAY,CAACK,UAAb,KAA4BzB,EADD,GAE3BmB,gBAFJ;AAGA,QAAMO,WAAW,GACfN,YAAY,IAAIpB,EAAE,KAAKW,SAAvB,GACI,MAAMS,YAAY,CAACO,gBAAb,CAA8B3B,EAA9B,CADV,GAEIU,iBAHN;AAIA,sBACE,oBAAC,iBAAD,qBACE,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAE;AAAEkB,MAAAA,eAAe,EAAElC,KAAK,CAACmB,MAAN,CAAagB;AAAhC;AAAb,kBACE,oBAAC,wBAAD;AACE,IAAA,KAAK,EAAE,CAACC,MAAM,CAACC,SAAR,EAAmBhC,KAAnB,CADT;AAEE,IAAA,OAAO,EAAE2B,WAFX;AAGE,IAAA,WAAW,EAAEvB,WAHf,CAIE;AAJF;AAKE,IAAA,mBAAmB,EAAC,QALtB;AAME,IAAA,0BAA0B,EAAC,QAN7B;AAOE,IAAA,iBAAiB,EAAC,QAPpB;AAQE,IAAA,kBAAkB,EAAE;AAAEC,MAAAA,QAAQ,EAAEoB;AAAZ,KARtB;AASE,IAAA,kBAAkB,EAAElB,kBATtB;AAUE,IAAA,MAAM,EAAEL,MAVV;AAWE,IAAA,YAAY,EAAE,CAXhB;AAYE,IAAA,UAAU;AAZZ,kBAcE,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAE6B,MAAM,CAACE,GAApB;AAAyB,IAAA,aAAa,EAAC;AAAvC,KACG3C,IAAI,GACDA,IAAI,CAAC;AACH4C,IAAAA,KAAK,EAAET,UAAU,GAAG9B,KAAK,CAACmB,MAAN,CAAaqB,OAAhB,GAA0BhB;AADxC,GAAD,CADH,GAID,IALN,eAME,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAACY,MAAM,CAACK,IAAR,EAAcL,MAAM,CAACM,OAArB;AAAb,kBACE,oBAAC,aAAD;AACE,IAAA,UAAU,EAAE,KADd;AAEE,IAAA,aAAa,EAAEvC,kBAFjB;AAGE,IAAA,KAAK,EAAE,CACLiC,MAAM,CAACvC,KADF,EAEL;AACE0C,MAAAA,KAAK,EAAET,UAAU,GAAG9B,KAAK,CAACmB,MAAN,CAAaqB,OAAhB,GAA0BtB;AAD7C,KAFK,EAKLjB,UALK;AAHT,KAWGJ,KAXH,CADF,EAcGC,WAAW,gBACV,oBAAC,aAAD;AACE,IAAA,UAAU,EAAE,KADd;AAEE,IAAA,aAAa,EAAEM,wBAFjB;AAGE,IAAA,KAAK,EAAE,CACLgC,MAAM,CAACtC,WADF,EAEL;AACEyC,MAAAA,KAAK,EAAEf;AADT,KAFK,EAKLtB,gBALK;AAHT,KAWGJ,WAXH,CADU,GAcR,IA5BN,CANF,eAoCE,oBAAC,iBAAD;AACE,IAAA,KAAK,EAAE,CAACsC,MAAM,CAACK,IAAR,EAAc3C,WAAW,GAAGsC,MAAM,CAACO,SAAV,GAAsB1B,SAA/C;AADT,KAGGrB,KAAK,GACJA,KAAK,CAAC;AACJkC,IAAAA,UAAU,EAAEA;AADR,GAAD,CADD,gBAKJ,oBAAC,8BAAD;AACE,IAAA,IAAI,EAAEA,UAAU,GAAG,YAAH,GAAkB,cADpC;AAEE,IAAA,KAAK,EAAEZ,UAFT;AAGE,IAAA,IAAI,EAAE,EAHR;AAIE,IAAA,SAAS,EAAE0B,yBAAYC,KAAZ,GAAoB,KAApB,GAA4B;AAJzC,IARJ,CApCF,CAdF,CADF,CADF,EAwEGf,UAAU,GACPhB,KAAK,CAACgC,QAAN,CAAeC,GAAf,CAAmBhD,QAAnB,EAA8BiD,KAAD,IAAW;AACtC,QACErD,IAAI,iBACJmB,KAAK,CAACmC,cAAN,CAAqBD,KAArB,CADA,IAEA,CAACA,KAAK,CAACE,KAAN,CAAYvD,IAFb,IAGA,CAACqD,KAAK,CAACE,KAAN,CAAYtD,KAJf,EAKE;AACA,0BAAOkB,KAAK,CAACqC,YAAN,CAAmBH,KAAnB,EAA0B;AAC/B3C,QAAAA,KAAK,EAAE,CAAC+B,MAAM,CAACY,KAAR,EAAeA,KAAK,CAACE,KAAN,CAAY7C,KAA3B;AADwB,OAA1B,CAAP;AAGD;;AAED,WAAO2C,KAAP;AACD,GAbD,CADO,GAeP,IAvFN,CADF;AA2FD,CA9ID;;AAgJAtD,aAAa,CAAC0D,WAAd,GAA4B,gBAA5B;;AAEA,MAAMhB,MAAM,GAAGiB,wBAAWC,MAAX,CAAkB;AAC/BjB,EAAAA,SAAS,EAAE;AACTkB,IAAAA,OAAO,EAAE;AADA,GADoB;AAI/BjB,EAAAA,GAAG,EAAE;AACHkB,IAAAA,aAAa,EAAE,KADZ;AAEHC,IAAAA,UAAU,EAAE;AAFT,GAJ0B;AAQ/Bd,EAAAA,SAAS,EAAE;AACTe,IAAAA,MAAM,EAAE,EADC;AAETD,IAAAA,UAAU,EAAE,QAFH;AAGTE,IAAAA,cAAc,EAAE;AAHP,GARoB;AAa/B9D,EAAAA,KAAK,EAAE;AACL+D,IAAAA,QAAQ,EAAE;AADL,GAbwB;AAgB/B9D,EAAAA,WAAW,EAAE;AACX8D,IAAAA,QAAQ,EAAE;AADC,GAhBkB;AAmB/BnB,EAAAA,IAAI,EAAE;AACJoB,IAAAA,MAAM,EAAE;AADJ,GAnByB;AAsB/Bb,EAAAA,KAAK,EAAE;AACLc,IAAAA,WAAW,EAAE;AADR,GAtBwB;AAyB/BpB,EAAAA,OAAO,EAAE;AACPqB,IAAAA,IAAI,EAAE,CADC;AAEPJ,IAAAA,cAAc,EAAE;AAFT;AAzBsB,CAAlB,CAAf;;eA+Be,wBAAUjE,aAAV,C","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  I18nManager,\n  GestureResponderEvent,\n} from 'react-native';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n\nimport { ListAccordionGroupContext } from './ListAccordionGroup';\n\ntype Props = {\n  /**\n   * Title text for the list accordion.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list accordion.\n   */\n  description?: React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: { isExpanded: boolean }) => React.ReactNode;\n  /**\n   * Whether the accordion is expanded\n   * If this prop is provided, the accordion will behave as a \"controlled component\".\n   * You'll need to update this prop when you want to toggle the component or on `onPress`.\n   */\n  expanded?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Content of the section.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Id is used for distinguishing specific accordion when using List.AccordionGroup. Property is required when using List.AccordionGroup and has no impact on behavior when using standalone List.Accordion.\n   */\n  id?: string | number;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n  /**\n   * Accessibility label for the TouchableRipple. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n};\n\n/**\n * A component used to display an expandable list item.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [expanded, setExpanded] = React.useState(true);\n *\n *   const handlePress = () => setExpanded(!expanded);\n *\n *   return (\n *     <List.Section title=\"Accordions\">\n *       <List.Accordion\n *         title=\"Uncontrolled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *\n *       <List.Accordion\n *         title=\"Controlled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}\n *         expanded={expanded}\n *         onPress={handlePress}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *     </List.Section>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst ListAccordion = ({\n  left,\n  right,\n  title,\n  description,\n  children,\n  theme,\n  titleStyle,\n  descriptionStyle,\n  titleNumberOfLines = 1,\n  descriptionNumberOfLines = 2,\n  style,\n  id,\n  testID,\n  onPress,\n  onLongPress,\n  expanded: expandedProp,\n  accessibilityLabel,\n}: Props) => {\n  const [expanded, setExpanded] = React.useState<boolean>(\n    expandedProp || false\n  );\n\n  const handlePressAction = () => {\n    onPress?.();\n\n    if (expandedProp === undefined) {\n      // Only update state of the `expanded` prop was not passed\n      // If it was passed, the component will act as a controlled component\n      setExpanded((expanded) => !expanded);\n    }\n  };\n\n  const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n  const descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n\n  const expandedInternal = expandedProp !== undefined ? expandedProp : expanded;\n\n  const groupContext = React.useContext(ListAccordionGroupContext);\n  if (groupContext !== null && !id) {\n    throw new Error(\n      'List.Accordion is used inside a List.AccordionGroup without specifying an id prop.'\n    );\n  }\n  const isExpanded = groupContext\n    ? groupContext.expandedId === id\n    : expandedInternal;\n  const handlePress =\n    groupContext && id !== undefined\n      ? () => groupContext.onAccordionPress(id)\n      : handlePressAction;\n  return (\n    <View>\n      <View style={{ backgroundColor: theme.colors.background }}>\n        <TouchableRipple\n          style={[styles.container, style]}\n          onPress={handlePress}\n          onLongPress={onLongPress}\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityState={{ expanded: isExpanded }}\n          accessibilityLabel={accessibilityLabel}\n          testID={testID}\n          delayPressIn={0}\n          borderless\n        >\n          <View style={styles.row} pointerEvents=\"none\">\n            {left\n              ? left({\n                  color: isExpanded ? theme.colors.primary : descriptionColor,\n                })\n              : null}\n            <View style={[styles.item, styles.content]}>\n              <Text\n                selectable={false}\n                numberOfLines={titleNumberOfLines}\n                style={[\n                  styles.title,\n                  {\n                    color: isExpanded ? theme.colors.primary : titleColor,\n                  },\n                  titleStyle,\n                ]}\n              >\n                {title}\n              </Text>\n              {description ? (\n                <Text\n                  selectable={false}\n                  numberOfLines={descriptionNumberOfLines}\n                  style={[\n                    styles.description,\n                    {\n                      color: descriptionColor,\n                    },\n                    descriptionStyle,\n                  ]}\n                >\n                  {description}\n                </Text>\n              ) : null}\n            </View>\n            <View\n              style={[styles.item, description ? styles.multiline : undefined]}\n            >\n              {right ? (\n                right({\n                  isExpanded: isExpanded,\n                })\n              ) : (\n                <MaterialCommunityIcon\n                  name={isExpanded ? 'chevron-up' : 'chevron-down'}\n                  color={titleColor}\n                  size={24}\n                  direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n                />\n              )}\n            </View>\n          </View>\n        </TouchableRipple>\n      </View>\n\n      {isExpanded\n        ? React.Children.map(children, (child) => {\n            if (\n              left &&\n              React.isValidElement(child) &&\n              !child.props.left &&\n              !child.props.right\n            ) {\n              return React.cloneElement(child, {\n                style: [styles.child, child.props.style],\n              });\n            }\n\n            return child;\n          })\n        : null}\n    </View>\n  );\n};\n\nListAccordion.displayName = 'List.Accordion';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    margin: 8,\n  },\n  child: {\n    paddingLeft: 64,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListAccordion);\n"]}